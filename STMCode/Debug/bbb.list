
bbb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800dec4  0800dec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e108  0800e108  000201b8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e108  0800e108  000201b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e108  0800e108  000201b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e108  0800e108  0001e108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e10c  0800e10c  0001e10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  0800e110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013dc  200001b8  0800e2c8  000201b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  0800e2c8  00021594  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001649f  00000000  00000000  00020223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f54  00000000  00000000  000366c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  0003a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee1  00000000  00000000  0003b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d7e6  00000000  00000000  0003c871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c79  00000000  00000000  0005a057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e587  00000000  00000000  00073cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047e0  00000000  00000000  00112258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00116a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001b8 	.word	0x200001b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800deac 	.word	0x0800deac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001bc 	.word	0x200001bc
 8000104:	0800deac 	.word	0x0800deac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fb15 	bl	8001a34 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fa65 	bl	80018e4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fb07 	bl	8001a34 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fafd 	bl	8001a34 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fa8d 	bl	8001968 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fa83 	bl	8001968 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	0008      	movs	r0, r1
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fb59 	bl	8000b30 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fae5 	bl	8000a58 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb4b 	bl	8000b30 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb41 	bl	8000b30 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 faf1 	bl	8000aa4 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fae7 	bl	8000aa4 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fadd>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	4647      	mov	r7, r8
 80004e8:	46ce      	mov	lr, r9
 80004ea:	024a      	lsls	r2, r1, #9
 80004ec:	0243      	lsls	r3, r0, #9
 80004ee:	0045      	lsls	r5, r0, #1
 80004f0:	0fc4      	lsrs	r4, r0, #31
 80004f2:	0a50      	lsrs	r0, r2, #9
 80004f4:	4680      	mov	r8, r0
 80004f6:	0048      	lsls	r0, r1, #1
 80004f8:	0a5b      	lsrs	r3, r3, #9
 80004fa:	0e00      	lsrs	r0, r0, #24
 80004fc:	0992      	lsrs	r2, r2, #6
 80004fe:	4694      	mov	ip, r2
 8000500:	b580      	push	{r7, lr}
 8000502:	001e      	movs	r6, r3
 8000504:	4681      	mov	r9, r0
 8000506:	0002      	movs	r2, r0
 8000508:	0e2d      	lsrs	r5, r5, #24
 800050a:	00df      	lsls	r7, r3, #3
 800050c:	0fc9      	lsrs	r1, r1, #31
 800050e:	428c      	cmp	r4, r1
 8000510:	d024      	beq.n	800055c <__aeabi_fadd+0x78>
 8000512:	1a28      	subs	r0, r5, r0
 8000514:	2800      	cmp	r0, #0
 8000516:	dd0e      	ble.n	8000536 <__aeabi_fadd+0x52>
 8000518:	2a00      	cmp	r2, #0
 800051a:	d13e      	bne.n	800059a <__aeabi_fadd+0xb6>
 800051c:	4662      	mov	r2, ip
 800051e:	2a00      	cmp	r2, #0
 8000520:	d100      	bne.n	8000524 <__aeabi_fadd+0x40>
 8000522:	e0fd      	b.n	8000720 <__aeabi_fadd+0x23c>
 8000524:	1e42      	subs	r2, r0, #1
 8000526:	2801      	cmp	r0, #1
 8000528:	d100      	bne.n	800052c <__aeabi_fadd+0x48>
 800052a:	e137      	b.n	800079c <__aeabi_fadd+0x2b8>
 800052c:	28ff      	cmp	r0, #255	; 0xff
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x4e>
 8000530:	e0a9      	b.n	8000686 <__aeabi_fadd+0x1a2>
 8000532:	0010      	movs	r0, r2
 8000534:	e039      	b.n	80005aa <__aeabi_fadd+0xc6>
 8000536:	2800      	cmp	r0, #0
 8000538:	d063      	beq.n	8000602 <__aeabi_fadd+0x11e>
 800053a:	464b      	mov	r3, r9
 800053c:	1b52      	subs	r2, r2, r5
 800053e:	2d00      	cmp	r5, #0
 8000540:	d000      	beq.n	8000544 <__aeabi_fadd+0x60>
 8000542:	e0e0      	b.n	8000706 <__aeabi_fadd+0x222>
 8000544:	2f00      	cmp	r7, #0
 8000546:	d100      	bne.n	800054a <__aeabi_fadd+0x66>
 8000548:	e0ce      	b.n	80006e8 <__aeabi_fadd+0x204>
 800054a:	1e53      	subs	r3, r2, #1
 800054c:	2a01      	cmp	r2, #1
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x6e>
 8000550:	e155      	b.n	80007fe <__aeabi_fadd+0x31a>
 8000552:	2aff      	cmp	r2, #255	; 0xff
 8000554:	d100      	bne.n	8000558 <__aeabi_fadd+0x74>
 8000556:	e094      	b.n	8000682 <__aeabi_fadd+0x19e>
 8000558:	001a      	movs	r2, r3
 800055a:	e0d9      	b.n	8000710 <__aeabi_fadd+0x22c>
 800055c:	1a2a      	subs	r2, r5, r0
 800055e:	2a00      	cmp	r2, #0
 8000560:	dc00      	bgt.n	8000564 <__aeabi_fadd+0x80>
 8000562:	e099      	b.n	8000698 <__aeabi_fadd+0x1b4>
 8000564:	2800      	cmp	r0, #0
 8000566:	d062      	beq.n	800062e <__aeabi_fadd+0x14a>
 8000568:	2dff      	cmp	r5, #255	; 0xff
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x8a>
 800056c:	e08b      	b.n	8000686 <__aeabi_fadd+0x1a2>
 800056e:	2380      	movs	r3, #128	; 0x80
 8000570:	4661      	mov	r1, ip
 8000572:	04db      	lsls	r3, r3, #19
 8000574:	4319      	orrs	r1, r3
 8000576:	468c      	mov	ip, r1
 8000578:	2a1b      	cmp	r2, #27
 800057a:	dc00      	bgt.n	800057e <__aeabi_fadd+0x9a>
 800057c:	e0d2      	b.n	8000724 <__aeabi_fadd+0x240>
 800057e:	2301      	movs	r3, #1
 8000580:	19db      	adds	r3, r3, r7
 8000582:	015a      	lsls	r2, r3, #5
 8000584:	d56a      	bpl.n	800065c <__aeabi_fadd+0x178>
 8000586:	3501      	adds	r5, #1
 8000588:	2dff      	cmp	r5, #255	; 0xff
 800058a:	d05b      	beq.n	8000644 <__aeabi_fadd+0x160>
 800058c:	2201      	movs	r2, #1
 800058e:	49a3      	ldr	r1, [pc, #652]	; (800081c <__aeabi_fadd+0x338>)
 8000590:	401a      	ands	r2, r3
 8000592:	085b      	lsrs	r3, r3, #1
 8000594:	400b      	ands	r3, r1
 8000596:	4313      	orrs	r3, r2
 8000598:	e01c      	b.n	80005d4 <__aeabi_fadd+0xf0>
 800059a:	2dff      	cmp	r5, #255	; 0xff
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0xbc>
 800059e:	e072      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	4662      	mov	r2, ip
 80005a4:	04db      	lsls	r3, r3, #19
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4694      	mov	ip, r2
 80005aa:	281b      	cmp	r0, #27
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_fadd+0xcc>
 80005ae:	e090      	b.n	80006d2 <__aeabi_fadd+0x1ee>
 80005b0:	2301      	movs	r3, #1
 80005b2:	1afb      	subs	r3, r7, r3
 80005b4:	015a      	lsls	r2, r3, #5
 80005b6:	d551      	bpl.n	800065c <__aeabi_fadd+0x178>
 80005b8:	019b      	lsls	r3, r3, #6
 80005ba:	099e      	lsrs	r6, r3, #6
 80005bc:	0030      	movs	r0, r6
 80005be:	f001 fe5d 	bl	800227c <__clzsi2>
 80005c2:	0033      	movs	r3, r6
 80005c4:	3805      	subs	r0, #5
 80005c6:	4083      	lsls	r3, r0
 80005c8:	4285      	cmp	r5, r0
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_fadd+0xea>
 80005cc:	e075      	b.n	80006ba <__aeabi_fadd+0x1d6>
 80005ce:	4a94      	ldr	r2, [pc, #592]	; (8000820 <__aeabi_fadd+0x33c>)
 80005d0:	1a2d      	subs	r5, r5, r0
 80005d2:	4013      	ands	r3, r2
 80005d4:	075a      	lsls	r2, r3, #29
 80005d6:	d004      	beq.n	80005e2 <__aeabi_fadd+0xfe>
 80005d8:	220f      	movs	r2, #15
 80005da:	401a      	ands	r2, r3
 80005dc:	2a04      	cmp	r2, #4
 80005de:	d000      	beq.n	80005e2 <__aeabi_fadd+0xfe>
 80005e0:	3304      	adds	r3, #4
 80005e2:	015a      	lsls	r2, r3, #5
 80005e4:	d53c      	bpl.n	8000660 <__aeabi_fadd+0x17c>
 80005e6:	1c68      	adds	r0, r5, #1
 80005e8:	2dfe      	cmp	r5, #254	; 0xfe
 80005ea:	d02b      	beq.n	8000644 <__aeabi_fadd+0x160>
 80005ec:	019b      	lsls	r3, r3, #6
 80005ee:	0a5e      	lsrs	r6, r3, #9
 80005f0:	b2c0      	uxtb	r0, r0
 80005f2:	05c0      	lsls	r0, r0, #23
 80005f4:	4330      	orrs	r0, r6
 80005f6:	07e4      	lsls	r4, r4, #31
 80005f8:	4320      	orrs	r0, r4
 80005fa:	bcc0      	pop	{r6, r7}
 80005fc:	46b9      	mov	r9, r7
 80005fe:	46b0      	mov	r8, r6
 8000600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000602:	20fe      	movs	r0, #254	; 0xfe
 8000604:	1c6a      	adds	r2, r5, #1
 8000606:	4210      	tst	r0, r2
 8000608:	d172      	bne.n	80006f0 <__aeabi_fadd+0x20c>
 800060a:	2d00      	cmp	r5, #0
 800060c:	d000      	beq.n	8000610 <__aeabi_fadd+0x12c>
 800060e:	e0ae      	b.n	800076e <__aeabi_fadd+0x28a>
 8000610:	2f00      	cmp	r7, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x132>
 8000614:	e0ec      	b.n	80007f0 <__aeabi_fadd+0x30c>
 8000616:	4663      	mov	r3, ip
 8000618:	2000      	movs	r0, #0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0e9      	beq.n	80005f2 <__aeabi_fadd+0x10e>
 800061e:	1afb      	subs	r3, r7, r3
 8000620:	015a      	lsls	r2, r3, #5
 8000622:	d400      	bmi.n	8000626 <__aeabi_fadd+0x142>
 8000624:	e0f3      	b.n	800080e <__aeabi_fadd+0x32a>
 8000626:	4663      	mov	r3, ip
 8000628:	000c      	movs	r4, r1
 800062a:	1bdb      	subs	r3, r3, r7
 800062c:	e7d2      	b.n	80005d4 <__aeabi_fadd+0xf0>
 800062e:	4661      	mov	r1, ip
 8000630:	2900      	cmp	r1, #0
 8000632:	d05b      	beq.n	80006ec <__aeabi_fadd+0x208>
 8000634:	1e51      	subs	r1, r2, #1
 8000636:	2a01      	cmp	r2, #1
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x158>
 800063a:	e0a7      	b.n	800078c <__aeabi_fadd+0x2a8>
 800063c:	2aff      	cmp	r2, #255	; 0xff
 800063e:	d022      	beq.n	8000686 <__aeabi_fadd+0x1a2>
 8000640:	000a      	movs	r2, r1
 8000642:	e799      	b.n	8000578 <__aeabi_fadd+0x94>
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	2600      	movs	r6, #0
 8000648:	e7d3      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800064a:	21fe      	movs	r1, #254	; 0xfe
 800064c:	1c6a      	adds	r2, r5, #1
 800064e:	4211      	tst	r1, r2
 8000650:	d073      	beq.n	800073a <__aeabi_fadd+0x256>
 8000652:	2aff      	cmp	r2, #255	; 0xff
 8000654:	d0f6      	beq.n	8000644 <__aeabi_fadd+0x160>
 8000656:	0015      	movs	r5, r2
 8000658:	4467      	add	r7, ip
 800065a:	087b      	lsrs	r3, r7, #1
 800065c:	075a      	lsls	r2, r3, #29
 800065e:	d1bb      	bne.n	80005d8 <__aeabi_fadd+0xf4>
 8000660:	08db      	lsrs	r3, r3, #3
 8000662:	2dff      	cmp	r5, #255	; 0xff
 8000664:	d00f      	beq.n	8000686 <__aeabi_fadd+0x1a2>
 8000666:	025b      	lsls	r3, r3, #9
 8000668:	0a5e      	lsrs	r6, r3, #9
 800066a:	b2e8      	uxtb	r0, r5
 800066c:	e7c1      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800066e:	4662      	mov	r2, ip
 8000670:	2a00      	cmp	r2, #0
 8000672:	d008      	beq.n	8000686 <__aeabi_fadd+0x1a2>
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	03d2      	lsls	r2, r2, #15
 8000678:	4213      	tst	r3, r2
 800067a:	d004      	beq.n	8000686 <__aeabi_fadd+0x1a2>
 800067c:	4640      	mov	r0, r8
 800067e:	4210      	tst	r0, r2
 8000680:	d101      	bne.n	8000686 <__aeabi_fadd+0x1a2>
 8000682:	000c      	movs	r4, r1
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0dc      	beq.n	8000644 <__aeabi_fadd+0x160>
 800068a:	2680      	movs	r6, #128	; 0x80
 800068c:	03f6      	lsls	r6, r6, #15
 800068e:	431e      	orrs	r6, r3
 8000690:	0276      	lsls	r6, r6, #9
 8000692:	20ff      	movs	r0, #255	; 0xff
 8000694:	0a76      	lsrs	r6, r6, #9
 8000696:	e7ac      	b.n	80005f2 <__aeabi_fadd+0x10e>
 8000698:	2a00      	cmp	r2, #0
 800069a:	d0d6      	beq.n	800064a <__aeabi_fadd+0x166>
 800069c:	1b42      	subs	r2, r0, r5
 800069e:	2d00      	cmp	r5, #0
 80006a0:	d05c      	beq.n	800075c <__aeabi_fadd+0x278>
 80006a2:	28ff      	cmp	r0, #255	; 0xff
 80006a4:	d0ee      	beq.n	8000684 <__aeabi_fadd+0x1a0>
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	04db      	lsls	r3, r3, #19
 80006aa:	431f      	orrs	r7, r3
 80006ac:	2a1b      	cmp	r2, #27
 80006ae:	dc00      	bgt.n	80006b2 <__aeabi_fadd+0x1ce>
 80006b0:	e082      	b.n	80007b8 <__aeabi_fadd+0x2d4>
 80006b2:	2301      	movs	r3, #1
 80006b4:	464d      	mov	r5, r9
 80006b6:	4463      	add	r3, ip
 80006b8:	e763      	b.n	8000582 <__aeabi_fadd+0x9e>
 80006ba:	2220      	movs	r2, #32
 80006bc:	1b40      	subs	r0, r0, r5
 80006be:	3001      	adds	r0, #1
 80006c0:	1a12      	subs	r2, r2, r0
 80006c2:	0019      	movs	r1, r3
 80006c4:	4093      	lsls	r3, r2
 80006c6:	40c1      	lsrs	r1, r0
 80006c8:	1e5a      	subs	r2, r3, #1
 80006ca:	4193      	sbcs	r3, r2
 80006cc:	2500      	movs	r5, #0
 80006ce:	430b      	orrs	r3, r1
 80006d0:	e780      	b.n	80005d4 <__aeabi_fadd+0xf0>
 80006d2:	2320      	movs	r3, #32
 80006d4:	4661      	mov	r1, ip
 80006d6:	1a1b      	subs	r3, r3, r0
 80006d8:	4099      	lsls	r1, r3
 80006da:	4662      	mov	r2, ip
 80006dc:	000b      	movs	r3, r1
 80006de:	40c2      	lsrs	r2, r0
 80006e0:	1e59      	subs	r1, r3, #1
 80006e2:	418b      	sbcs	r3, r1
 80006e4:	4313      	orrs	r3, r2
 80006e6:	e764      	b.n	80005b2 <__aeabi_fadd+0xce>
 80006e8:	000c      	movs	r4, r1
 80006ea:	4643      	mov	r3, r8
 80006ec:	0015      	movs	r5, r2
 80006ee:	e7b8      	b.n	8000662 <__aeabi_fadd+0x17e>
 80006f0:	4663      	mov	r3, ip
 80006f2:	1afe      	subs	r6, r7, r3
 80006f4:	0173      	lsls	r3, r6, #5
 80006f6:	d445      	bmi.n	8000784 <__aeabi_fadd+0x2a0>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d000      	beq.n	80006fe <__aeabi_fadd+0x21a>
 80006fc:	e75e      	b.n	80005bc <__aeabi_fadd+0xd8>
 80006fe:	2400      	movs	r4, #0
 8000700:	2000      	movs	r0, #0
 8000702:	2600      	movs	r6, #0
 8000704:	e775      	b.n	80005f2 <__aeabi_fadd+0x10e>
 8000706:	2bff      	cmp	r3, #255	; 0xff
 8000708:	d0bb      	beq.n	8000682 <__aeabi_fadd+0x19e>
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	04db      	lsls	r3, r3, #19
 800070e:	431f      	orrs	r7, r3
 8000710:	2a1b      	cmp	r2, #27
 8000712:	dd47      	ble.n	80007a4 <__aeabi_fadd+0x2c0>
 8000714:	2301      	movs	r3, #1
 8000716:	4662      	mov	r2, ip
 8000718:	000c      	movs	r4, r1
 800071a:	464d      	mov	r5, r9
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	e749      	b.n	80005b4 <__aeabi_fadd+0xd0>
 8000720:	0005      	movs	r5, r0
 8000722:	e79e      	b.n	8000662 <__aeabi_fadd+0x17e>
 8000724:	4661      	mov	r1, ip
 8000726:	2320      	movs	r3, #32
 8000728:	40d1      	lsrs	r1, r2
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	4662      	mov	r2, ip
 800072e:	409a      	lsls	r2, r3
 8000730:	0013      	movs	r3, r2
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	4193      	sbcs	r3, r2
 8000736:	430b      	orrs	r3, r1
 8000738:	e722      	b.n	8000580 <__aeabi_fadd+0x9c>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d146      	bne.n	80007cc <__aeabi_fadd+0x2e8>
 800073e:	2f00      	cmp	r7, #0
 8000740:	d062      	beq.n	8000808 <__aeabi_fadd+0x324>
 8000742:	4663      	mov	r3, ip
 8000744:	2000      	movs	r0, #0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fadd+0x268>
 800074a:	e752      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800074c:	003b      	movs	r3, r7
 800074e:	4463      	add	r3, ip
 8000750:	015a      	lsls	r2, r3, #5
 8000752:	d583      	bpl.n	800065c <__aeabi_fadd+0x178>
 8000754:	4a32      	ldr	r2, [pc, #200]	; (8000820 <__aeabi_fadd+0x33c>)
 8000756:	3501      	adds	r5, #1
 8000758:	4013      	ands	r3, r2
 800075a:	e77f      	b.n	800065c <__aeabi_fadd+0x178>
 800075c:	2f00      	cmp	r7, #0
 800075e:	d0c4      	beq.n	80006ea <__aeabi_fadd+0x206>
 8000760:	1e53      	subs	r3, r2, #1
 8000762:	2a01      	cmp	r2, #1
 8000764:	d012      	beq.n	800078c <__aeabi_fadd+0x2a8>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d08c      	beq.n	8000684 <__aeabi_fadd+0x1a0>
 800076a:	001a      	movs	r2, r3
 800076c:	e79e      	b.n	80006ac <__aeabi_fadd+0x1c8>
 800076e:	2f00      	cmp	r7, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x290>
 8000772:	e77c      	b.n	800066e <__aeabi_fadd+0x18a>
 8000774:	4663      	mov	r3, ip
 8000776:	2b00      	cmp	r3, #0
 8000778:	d183      	bne.n	8000682 <__aeabi_fadd+0x19e>
 800077a:	2680      	movs	r6, #128	; 0x80
 800077c:	2400      	movs	r4, #0
 800077e:	20ff      	movs	r0, #255	; 0xff
 8000780:	03f6      	lsls	r6, r6, #15
 8000782:	e736      	b.n	80005f2 <__aeabi_fadd+0x10e>
 8000784:	4663      	mov	r3, ip
 8000786:	000c      	movs	r4, r1
 8000788:	1bde      	subs	r6, r3, r7
 800078a:	e717      	b.n	80005bc <__aeabi_fadd+0xd8>
 800078c:	003b      	movs	r3, r7
 800078e:	4463      	add	r3, ip
 8000790:	2501      	movs	r5, #1
 8000792:	015a      	lsls	r2, r3, #5
 8000794:	d400      	bmi.n	8000798 <__aeabi_fadd+0x2b4>
 8000796:	e761      	b.n	800065c <__aeabi_fadd+0x178>
 8000798:	2502      	movs	r5, #2
 800079a:	e6f7      	b.n	800058c <__aeabi_fadd+0xa8>
 800079c:	4663      	mov	r3, ip
 800079e:	2501      	movs	r5, #1
 80007a0:	1afb      	subs	r3, r7, r3
 80007a2:	e707      	b.n	80005b4 <__aeabi_fadd+0xd0>
 80007a4:	2320      	movs	r3, #32
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	0038      	movs	r0, r7
 80007aa:	409f      	lsls	r7, r3
 80007ac:	003b      	movs	r3, r7
 80007ae:	40d0      	lsrs	r0, r2
 80007b0:	1e5a      	subs	r2, r3, #1
 80007b2:	4193      	sbcs	r3, r2
 80007b4:	4303      	orrs	r3, r0
 80007b6:	e7ae      	b.n	8000716 <__aeabi_fadd+0x232>
 80007b8:	2320      	movs	r3, #32
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	0039      	movs	r1, r7
 80007be:	409f      	lsls	r7, r3
 80007c0:	003b      	movs	r3, r7
 80007c2:	40d1      	lsrs	r1, r2
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	4193      	sbcs	r3, r2
 80007c8:	430b      	orrs	r3, r1
 80007ca:	e773      	b.n	80006b4 <__aeabi_fadd+0x1d0>
 80007cc:	2f00      	cmp	r7, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fadd+0x2ee>
 80007d0:	e758      	b.n	8000684 <__aeabi_fadd+0x1a0>
 80007d2:	4662      	mov	r2, ip
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0x2f6>
 80007d8:	e755      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	03d2      	lsls	r2, r2, #15
 80007de:	4213      	tst	r3, r2
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x300>
 80007e2:	e750      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80007e4:	4641      	mov	r1, r8
 80007e6:	4211      	tst	r1, r2
 80007e8:	d000      	beq.n	80007ec <__aeabi_fadd+0x308>
 80007ea:	e74c      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80007ec:	4643      	mov	r3, r8
 80007ee:	e74a      	b.n	8000686 <__aeabi_fadd+0x1a2>
 80007f0:	4663      	mov	r3, ip
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d083      	beq.n	80006fe <__aeabi_fadd+0x21a>
 80007f6:	000c      	movs	r4, r1
 80007f8:	4646      	mov	r6, r8
 80007fa:	2000      	movs	r0, #0
 80007fc:	e6f9      	b.n	80005f2 <__aeabi_fadd+0x10e>
 80007fe:	4663      	mov	r3, ip
 8000800:	000c      	movs	r4, r1
 8000802:	1bdb      	subs	r3, r3, r7
 8000804:	3501      	adds	r5, #1
 8000806:	e6d5      	b.n	80005b4 <__aeabi_fadd+0xd0>
 8000808:	4646      	mov	r6, r8
 800080a:	2000      	movs	r0, #0
 800080c:	e6f1      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800080e:	2b00      	cmp	r3, #0
 8000810:	d000      	beq.n	8000814 <__aeabi_fadd+0x330>
 8000812:	e723      	b.n	800065c <__aeabi_fadd+0x178>
 8000814:	2400      	movs	r4, #0
 8000816:	2600      	movs	r6, #0
 8000818:	e6eb      	b.n	80005f2 <__aeabi_fadd+0x10e>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	7dffffff 	.word	0x7dffffff
 8000820:	fbffffff 	.word	0xfbffffff

08000824 <__aeabi_fdiv>:
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	464f      	mov	r7, r9
 8000828:	4646      	mov	r6, r8
 800082a:	46d6      	mov	lr, sl
 800082c:	0245      	lsls	r5, r0, #9
 800082e:	b5c0      	push	{r6, r7, lr}
 8000830:	0047      	lsls	r7, r0, #1
 8000832:	1c0c      	adds	r4, r1, #0
 8000834:	0a6d      	lsrs	r5, r5, #9
 8000836:	0e3f      	lsrs	r7, r7, #24
 8000838:	0fc6      	lsrs	r6, r0, #31
 800083a:	2f00      	cmp	r7, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_fdiv+0x1c>
 800083e:	e06f      	b.n	8000920 <__aeabi_fdiv+0xfc>
 8000840:	2fff      	cmp	r7, #255	; 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fdiv+0x22>
 8000844:	e074      	b.n	8000930 <__aeabi_fdiv+0x10c>
 8000846:	2300      	movs	r3, #0
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	4699      	mov	r9, r3
 800084c:	469a      	mov	sl, r3
 800084e:	00ed      	lsls	r5, r5, #3
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4315      	orrs	r5, r2
 8000854:	3f7f      	subs	r7, #127	; 0x7f
 8000856:	0263      	lsls	r3, r4, #9
 8000858:	0a5b      	lsrs	r3, r3, #9
 800085a:	4698      	mov	r8, r3
 800085c:	0063      	lsls	r3, r4, #1
 800085e:	0e1b      	lsrs	r3, r3, #24
 8000860:	0fe4      	lsrs	r4, r4, #31
 8000862:	2b00      	cmp	r3, #0
 8000864:	d04d      	beq.n	8000902 <__aeabi_fdiv+0xde>
 8000866:	2bff      	cmp	r3, #255	; 0xff
 8000868:	d045      	beq.n	80008f6 <__aeabi_fdiv+0xd2>
 800086a:	4642      	mov	r2, r8
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	00d2      	lsls	r2, r2, #3
 8000870:	04c9      	lsls	r1, r1, #19
 8000872:	4311      	orrs	r1, r2
 8000874:	4688      	mov	r8, r1
 8000876:	2200      	movs	r2, #0
 8000878:	3b7f      	subs	r3, #127	; 0x7f
 800087a:	0031      	movs	r1, r6
 800087c:	1aff      	subs	r7, r7, r3
 800087e:	464b      	mov	r3, r9
 8000880:	4061      	eors	r1, r4
 8000882:	b2c9      	uxtb	r1, r1
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d900      	bls.n	800088a <__aeabi_fdiv+0x66>
 8000888:	e0b8      	b.n	80009fc <__aeabi_fdiv+0x1d8>
 800088a:	4870      	ldr	r0, [pc, #448]	; (8000a4c <__aeabi_fdiv+0x228>)
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	58c3      	ldr	r3, [r0, r3]
 8000890:	469f      	mov	pc, r3
 8000892:	2300      	movs	r3, #0
 8000894:	4698      	mov	r8, r3
 8000896:	0026      	movs	r6, r4
 8000898:	4645      	mov	r5, r8
 800089a:	4692      	mov	sl, r2
 800089c:	4653      	mov	r3, sl
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fdiv+0x80>
 80008a2:	e08d      	b.n	80009c0 <__aeabi_fdiv+0x19c>
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d100      	bne.n	80008aa <__aeabi_fdiv+0x86>
 80008a8:	e0a1      	b.n	80009ee <__aeabi_fdiv+0x1ca>
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d018      	beq.n	80008e0 <__aeabi_fdiv+0xbc>
 80008ae:	003b      	movs	r3, r7
 80008b0:	337f      	adds	r3, #127	; 0x7f
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	dd6d      	ble.n	8000992 <__aeabi_fdiv+0x16e>
 80008b6:	076a      	lsls	r2, r5, #29
 80008b8:	d004      	beq.n	80008c4 <__aeabi_fdiv+0xa0>
 80008ba:	220f      	movs	r2, #15
 80008bc:	402a      	ands	r2, r5
 80008be:	2a04      	cmp	r2, #4
 80008c0:	d000      	beq.n	80008c4 <__aeabi_fdiv+0xa0>
 80008c2:	3504      	adds	r5, #4
 80008c4:	012a      	lsls	r2, r5, #4
 80008c6:	d503      	bpl.n	80008d0 <__aeabi_fdiv+0xac>
 80008c8:	4b61      	ldr	r3, [pc, #388]	; (8000a50 <__aeabi_fdiv+0x22c>)
 80008ca:	401d      	ands	r5, r3
 80008cc:	003b      	movs	r3, r7
 80008ce:	3380      	adds	r3, #128	; 0x80
 80008d0:	2bfe      	cmp	r3, #254	; 0xfe
 80008d2:	dd00      	ble.n	80008d6 <__aeabi_fdiv+0xb2>
 80008d4:	e074      	b.n	80009c0 <__aeabi_fdiv+0x19c>
 80008d6:	01aa      	lsls	r2, r5, #6
 80008d8:	0a52      	lsrs	r2, r2, #9
 80008da:	b2d8      	uxtb	r0, r3
 80008dc:	e002      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80008de:	000e      	movs	r6, r1
 80008e0:	2000      	movs	r0, #0
 80008e2:	2200      	movs	r2, #0
 80008e4:	05c0      	lsls	r0, r0, #23
 80008e6:	07f6      	lsls	r6, r6, #31
 80008e8:	4310      	orrs	r0, r2
 80008ea:	4330      	orrs	r0, r6
 80008ec:	bce0      	pop	{r5, r6, r7}
 80008ee:	46ba      	mov	sl, r7
 80008f0:	46b1      	mov	r9, r6
 80008f2:	46a8      	mov	r8, r5
 80008f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f6:	4643      	mov	r3, r8
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d13f      	bne.n	800097c <__aeabi_fdiv+0x158>
 80008fc:	2202      	movs	r2, #2
 80008fe:	3fff      	subs	r7, #255	; 0xff
 8000900:	e003      	b.n	800090a <__aeabi_fdiv+0xe6>
 8000902:	4643      	mov	r3, r8
 8000904:	2b00      	cmp	r3, #0
 8000906:	d12d      	bne.n	8000964 <__aeabi_fdiv+0x140>
 8000908:	2201      	movs	r2, #1
 800090a:	0031      	movs	r1, r6
 800090c:	464b      	mov	r3, r9
 800090e:	4061      	eors	r1, r4
 8000910:	b2c9      	uxtb	r1, r1
 8000912:	4313      	orrs	r3, r2
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d838      	bhi.n	800098a <__aeabi_fdiv+0x166>
 8000918:	484e      	ldr	r0, [pc, #312]	; (8000a54 <__aeabi_fdiv+0x230>)
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	58c3      	ldr	r3, [r0, r3]
 800091e:	469f      	mov	pc, r3
 8000920:	2d00      	cmp	r5, #0
 8000922:	d113      	bne.n	800094c <__aeabi_fdiv+0x128>
 8000924:	2304      	movs	r3, #4
 8000926:	4699      	mov	r9, r3
 8000928:	3b03      	subs	r3, #3
 800092a:	2700      	movs	r7, #0
 800092c:	469a      	mov	sl, r3
 800092e:	e792      	b.n	8000856 <__aeabi_fdiv+0x32>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d105      	bne.n	8000940 <__aeabi_fdiv+0x11c>
 8000934:	2308      	movs	r3, #8
 8000936:	4699      	mov	r9, r3
 8000938:	3b06      	subs	r3, #6
 800093a:	27ff      	movs	r7, #255	; 0xff
 800093c:	469a      	mov	sl, r3
 800093e:	e78a      	b.n	8000856 <__aeabi_fdiv+0x32>
 8000940:	230c      	movs	r3, #12
 8000942:	4699      	mov	r9, r3
 8000944:	3b09      	subs	r3, #9
 8000946:	27ff      	movs	r7, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e784      	b.n	8000856 <__aeabi_fdiv+0x32>
 800094c:	0028      	movs	r0, r5
 800094e:	f001 fc95 	bl	800227c <__clzsi2>
 8000952:	2776      	movs	r7, #118	; 0x76
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	409d      	lsls	r5, r3
 8000958:	2300      	movs	r3, #0
 800095a:	427f      	negs	r7, r7
 800095c:	4699      	mov	r9, r3
 800095e:	469a      	mov	sl, r3
 8000960:	1a3f      	subs	r7, r7, r0
 8000962:	e778      	b.n	8000856 <__aeabi_fdiv+0x32>
 8000964:	4640      	mov	r0, r8
 8000966:	f001 fc89 	bl	800227c <__clzsi2>
 800096a:	4642      	mov	r2, r8
 800096c:	1f43      	subs	r3, r0, #5
 800096e:	409a      	lsls	r2, r3
 8000970:	2376      	movs	r3, #118	; 0x76
 8000972:	425b      	negs	r3, r3
 8000974:	4690      	mov	r8, r2
 8000976:	1a1b      	subs	r3, r3, r0
 8000978:	2200      	movs	r2, #0
 800097a:	e77e      	b.n	800087a <__aeabi_fdiv+0x56>
 800097c:	2303      	movs	r3, #3
 800097e:	464a      	mov	r2, r9
 8000980:	431a      	orrs	r2, r3
 8000982:	4691      	mov	r9, r2
 8000984:	33fc      	adds	r3, #252	; 0xfc
 8000986:	2203      	movs	r2, #3
 8000988:	e777      	b.n	800087a <__aeabi_fdiv+0x56>
 800098a:	000e      	movs	r6, r1
 800098c:	20ff      	movs	r0, #255	; 0xff
 800098e:	2200      	movs	r2, #0
 8000990:	e7a8      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 8000992:	2201      	movs	r2, #1
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	2b1b      	cmp	r3, #27
 8000998:	dca2      	bgt.n	80008e0 <__aeabi_fdiv+0xbc>
 800099a:	379e      	adds	r7, #158	; 0x9e
 800099c:	002a      	movs	r2, r5
 800099e:	40bd      	lsls	r5, r7
 80009a0:	40da      	lsrs	r2, r3
 80009a2:	1e6b      	subs	r3, r5, #1
 80009a4:	419d      	sbcs	r5, r3
 80009a6:	4315      	orrs	r5, r2
 80009a8:	076a      	lsls	r2, r5, #29
 80009aa:	d004      	beq.n	80009b6 <__aeabi_fdiv+0x192>
 80009ac:	220f      	movs	r2, #15
 80009ae:	402a      	ands	r2, r5
 80009b0:	2a04      	cmp	r2, #4
 80009b2:	d000      	beq.n	80009b6 <__aeabi_fdiv+0x192>
 80009b4:	3504      	adds	r5, #4
 80009b6:	016a      	lsls	r2, r5, #5
 80009b8:	d544      	bpl.n	8000a44 <__aeabi_fdiv+0x220>
 80009ba:	2001      	movs	r0, #1
 80009bc:	2200      	movs	r2, #0
 80009be:	e791      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009c0:	20ff      	movs	r0, #255	; 0xff
 80009c2:	2200      	movs	r2, #0
 80009c4:	e78e      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009c6:	2280      	movs	r2, #128	; 0x80
 80009c8:	2600      	movs	r6, #0
 80009ca:	20ff      	movs	r0, #255	; 0xff
 80009cc:	03d2      	lsls	r2, r2, #15
 80009ce:	e789      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009d0:	2300      	movs	r3, #0
 80009d2:	4698      	mov	r8, r3
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	03d2      	lsls	r2, r2, #15
 80009d8:	4215      	tst	r5, r2
 80009da:	d008      	beq.n	80009ee <__aeabi_fdiv+0x1ca>
 80009dc:	4643      	mov	r3, r8
 80009de:	4213      	tst	r3, r2
 80009e0:	d105      	bne.n	80009ee <__aeabi_fdiv+0x1ca>
 80009e2:	431a      	orrs	r2, r3
 80009e4:	0252      	lsls	r2, r2, #9
 80009e6:	0026      	movs	r6, r4
 80009e8:	20ff      	movs	r0, #255	; 0xff
 80009ea:	0a52      	lsrs	r2, r2, #9
 80009ec:	e77a      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	03d2      	lsls	r2, r2, #15
 80009f2:	432a      	orrs	r2, r5
 80009f4:	0252      	lsls	r2, r2, #9
 80009f6:	20ff      	movs	r0, #255	; 0xff
 80009f8:	0a52      	lsrs	r2, r2, #9
 80009fa:	e773      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 80009fc:	4642      	mov	r2, r8
 80009fe:	016b      	lsls	r3, r5, #5
 8000a00:	0155      	lsls	r5, r2, #5
 8000a02:	42ab      	cmp	r3, r5
 8000a04:	d21a      	bcs.n	8000a3c <__aeabi_fdiv+0x218>
 8000a06:	201b      	movs	r0, #27
 8000a08:	2200      	movs	r2, #0
 8000a0a:	3f01      	subs	r7, #1
 8000a0c:	2601      	movs	r6, #1
 8000a0e:	001c      	movs	r4, r3
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2c00      	cmp	r4, #0
 8000a16:	db01      	blt.n	8000a1c <__aeabi_fdiv+0x1f8>
 8000a18:	429d      	cmp	r5, r3
 8000a1a:	d801      	bhi.n	8000a20 <__aeabi_fdiv+0x1fc>
 8000a1c:	1b5b      	subs	r3, r3, r5
 8000a1e:	4332      	orrs	r2, r6
 8000a20:	3801      	subs	r0, #1
 8000a22:	2800      	cmp	r0, #0
 8000a24:	d1f3      	bne.n	8000a0e <__aeabi_fdiv+0x1ea>
 8000a26:	1e58      	subs	r0, r3, #1
 8000a28:	4183      	sbcs	r3, r0
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	001d      	movs	r5, r3
 8000a2e:	003b      	movs	r3, r7
 8000a30:	337f      	adds	r3, #127	; 0x7f
 8000a32:	000e      	movs	r6, r1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	dd00      	ble.n	8000a3a <__aeabi_fdiv+0x216>
 8000a38:	e73d      	b.n	80008b6 <__aeabi_fdiv+0x92>
 8000a3a:	e7aa      	b.n	8000992 <__aeabi_fdiv+0x16e>
 8000a3c:	201a      	movs	r0, #26
 8000a3e:	2201      	movs	r2, #1
 8000a40:	1b5b      	subs	r3, r3, r5
 8000a42:	e7e3      	b.n	8000a0c <__aeabi_fdiv+0x1e8>
 8000a44:	01aa      	lsls	r2, r5, #6
 8000a46:	2000      	movs	r0, #0
 8000a48:	0a52      	lsrs	r2, r2, #9
 8000a4a:	e74b      	b.n	80008e4 <__aeabi_fdiv+0xc0>
 8000a4c:	0800df0c 	.word	0x0800df0c
 8000a50:	f7ffffff 	.word	0xf7ffffff
 8000a54:	0800df4c 	.word	0x0800df4c

08000a58 <__eqsf2>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	0042      	lsls	r2, r0, #1
 8000a5c:	0245      	lsls	r5, r0, #9
 8000a5e:	024e      	lsls	r6, r1, #9
 8000a60:	004c      	lsls	r4, r1, #1
 8000a62:	0fc3      	lsrs	r3, r0, #31
 8000a64:	0a6d      	lsrs	r5, r5, #9
 8000a66:	2001      	movs	r0, #1
 8000a68:	0e12      	lsrs	r2, r2, #24
 8000a6a:	0a76      	lsrs	r6, r6, #9
 8000a6c:	0e24      	lsrs	r4, r4, #24
 8000a6e:	0fc9      	lsrs	r1, r1, #31
 8000a70:	2aff      	cmp	r2, #255	; 0xff
 8000a72:	d006      	beq.n	8000a82 <__eqsf2+0x2a>
 8000a74:	2cff      	cmp	r4, #255	; 0xff
 8000a76:	d003      	beq.n	8000a80 <__eqsf2+0x28>
 8000a78:	42a2      	cmp	r2, r4
 8000a7a:	d101      	bne.n	8000a80 <__eqsf2+0x28>
 8000a7c:	42b5      	cmp	r5, r6
 8000a7e:	d006      	beq.n	8000a8e <__eqsf2+0x36>
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d1fc      	bne.n	8000a80 <__eqsf2+0x28>
 8000a86:	2cff      	cmp	r4, #255	; 0xff
 8000a88:	d1fa      	bne.n	8000a80 <__eqsf2+0x28>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d1f8      	bne.n	8000a80 <__eqsf2+0x28>
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d006      	beq.n	8000aa0 <__eqsf2+0x48>
 8000a92:	2001      	movs	r0, #1
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d1f3      	bne.n	8000a80 <__eqsf2+0x28>
 8000a98:	0028      	movs	r0, r5
 8000a9a:	1e43      	subs	r3, r0, #1
 8000a9c:	4198      	sbcs	r0, r3
 8000a9e:	e7ef      	b.n	8000a80 <__eqsf2+0x28>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e7ed      	b.n	8000a80 <__eqsf2+0x28>

08000aa4 <__gesf2>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	0042      	lsls	r2, r0, #1
 8000aa8:	0245      	lsls	r5, r0, #9
 8000aaa:	024e      	lsls	r6, r1, #9
 8000aac:	004c      	lsls	r4, r1, #1
 8000aae:	0fc3      	lsrs	r3, r0, #31
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	0e12      	lsrs	r2, r2, #24
 8000ab4:	0a76      	lsrs	r6, r6, #9
 8000ab6:	0e24      	lsrs	r4, r4, #24
 8000ab8:	0fc8      	lsrs	r0, r1, #31
 8000aba:	2aff      	cmp	r2, #255	; 0xff
 8000abc:	d01b      	beq.n	8000af6 <__gesf2+0x52>
 8000abe:	2cff      	cmp	r4, #255	; 0xff
 8000ac0:	d00e      	beq.n	8000ae0 <__gesf2+0x3c>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d11b      	bne.n	8000afe <__gesf2+0x5a>
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d101      	bne.n	8000ace <__gesf2+0x2a>
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d01c      	beq.n	8000b08 <__gesf2+0x64>
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	d00c      	beq.n	8000aec <__gesf2+0x48>
 8000ad2:	4283      	cmp	r3, r0
 8000ad4:	d01c      	beq.n	8000b10 <__gesf2+0x6c>
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	1e58      	subs	r0, r3, #1
 8000ada:	4008      	ands	r0, r1
 8000adc:	3801      	subs	r0, #1
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	d122      	bne.n	8000b2a <__gesf2+0x86>
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	d1f4      	bne.n	8000ad2 <__gesf2+0x2e>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d1f2      	bne.n	8000ad2 <__gesf2+0x2e>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d1f6      	bne.n	8000ade <__gesf2+0x3a>
 8000af0:	2001      	movs	r0, #1
 8000af2:	4240      	negs	r0, r0
 8000af4:	e7f3      	b.n	8000ade <__gesf2+0x3a>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d117      	bne.n	8000b2a <__gesf2+0x86>
 8000afa:	2cff      	cmp	r4, #255	; 0xff
 8000afc:	d0f0      	beq.n	8000ae0 <__gesf2+0x3c>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d1e7      	bne.n	8000ad2 <__gesf2+0x2e>
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d1e5      	bne.n	8000ad2 <__gesf2+0x2e>
 8000b06:	e7e6      	b.n	8000ad6 <__gesf2+0x32>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	2d00      	cmp	r5, #0
 8000b0c:	d0e7      	beq.n	8000ade <__gesf2+0x3a>
 8000b0e:	e7e2      	b.n	8000ad6 <__gesf2+0x32>
 8000b10:	42a2      	cmp	r2, r4
 8000b12:	dc05      	bgt.n	8000b20 <__gesf2+0x7c>
 8000b14:	dbea      	blt.n	8000aec <__gesf2+0x48>
 8000b16:	42b5      	cmp	r5, r6
 8000b18:	d802      	bhi.n	8000b20 <__gesf2+0x7c>
 8000b1a:	d3e7      	bcc.n	8000aec <__gesf2+0x48>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e7de      	b.n	8000ade <__gesf2+0x3a>
 8000b20:	4243      	negs	r3, r0
 8000b22:	4158      	adcs	r0, r3
 8000b24:	0040      	lsls	r0, r0, #1
 8000b26:	3801      	subs	r0, #1
 8000b28:	e7d9      	b.n	8000ade <__gesf2+0x3a>
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	4240      	negs	r0, r0
 8000b2e:	e7d6      	b.n	8000ade <__gesf2+0x3a>

08000b30 <__lesf2>:
 8000b30:	b570      	push	{r4, r5, r6, lr}
 8000b32:	0042      	lsls	r2, r0, #1
 8000b34:	0245      	lsls	r5, r0, #9
 8000b36:	024e      	lsls	r6, r1, #9
 8000b38:	004c      	lsls	r4, r1, #1
 8000b3a:	0fc3      	lsrs	r3, r0, #31
 8000b3c:	0a6d      	lsrs	r5, r5, #9
 8000b3e:	0e12      	lsrs	r2, r2, #24
 8000b40:	0a76      	lsrs	r6, r6, #9
 8000b42:	0e24      	lsrs	r4, r4, #24
 8000b44:	0fc8      	lsrs	r0, r1, #31
 8000b46:	2aff      	cmp	r2, #255	; 0xff
 8000b48:	d00b      	beq.n	8000b62 <__lesf2+0x32>
 8000b4a:	2cff      	cmp	r4, #255	; 0xff
 8000b4c:	d00d      	beq.n	8000b6a <__lesf2+0x3a>
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	d11f      	bne.n	8000b92 <__lesf2+0x62>
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d116      	bne.n	8000b84 <__lesf2+0x54>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d114      	bne.n	8000b84 <__lesf2+0x54>
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d010      	beq.n	8000b82 <__lesf2+0x52>
 8000b60:	e009      	b.n	8000b76 <__lesf2+0x46>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d10c      	bne.n	8000b80 <__lesf2+0x50>
 8000b66:	2cff      	cmp	r4, #255	; 0xff
 8000b68:	d113      	bne.n	8000b92 <__lesf2+0x62>
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d108      	bne.n	8000b80 <__lesf2+0x50>
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d008      	beq.n	8000b84 <__lesf2+0x54>
 8000b72:	4283      	cmp	r3, r0
 8000b74:	d012      	beq.n	8000b9c <__lesf2+0x6c>
 8000b76:	2102      	movs	r1, #2
 8000b78:	1e58      	subs	r0, r3, #1
 8000b7a:	4008      	ands	r0, r1
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	e000      	b.n	8000b82 <__lesf2+0x52>
 8000b80:	2002      	movs	r0, #2
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d1f4      	bne.n	8000b72 <__lesf2+0x42>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d1fa      	bne.n	8000b82 <__lesf2+0x52>
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	4240      	negs	r0, r0
 8000b90:	e7f7      	b.n	8000b82 <__lesf2+0x52>
 8000b92:	2c00      	cmp	r4, #0
 8000b94:	d1ed      	bne.n	8000b72 <__lesf2+0x42>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d1eb      	bne.n	8000b72 <__lesf2+0x42>
 8000b9a:	e7ec      	b.n	8000b76 <__lesf2+0x46>
 8000b9c:	42a2      	cmp	r2, r4
 8000b9e:	dc05      	bgt.n	8000bac <__lesf2+0x7c>
 8000ba0:	dbf2      	blt.n	8000b88 <__lesf2+0x58>
 8000ba2:	42b5      	cmp	r5, r6
 8000ba4:	d802      	bhi.n	8000bac <__lesf2+0x7c>
 8000ba6:	d3ef      	bcc.n	8000b88 <__lesf2+0x58>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e7ea      	b.n	8000b82 <__lesf2+0x52>
 8000bac:	4243      	negs	r3, r0
 8000bae:	4158      	adcs	r0, r3
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	3801      	subs	r0, #1
 8000bb4:	e7e5      	b.n	8000b82 <__lesf2+0x52>
 8000bb6:	46c0      	nop			; (mov r8, r8)

08000bb8 <__aeabi_fmul>:
 8000bb8:	0243      	lsls	r3, r0, #9
 8000bba:	0a5b      	lsrs	r3, r3, #9
 8000bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bbe:	464f      	mov	r7, r9
 8000bc0:	4646      	mov	r6, r8
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	46d6      	mov	lr, sl
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0045      	lsls	r5, r0, #1
 8000bca:	4698      	mov	r8, r3
 8000bcc:	b5c0      	push	{r6, r7, lr}
 8000bce:	464b      	mov	r3, r9
 8000bd0:	1c0f      	adds	r7, r1, #0
 8000bd2:	0e2d      	lsrs	r5, r5, #24
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fmul+0x20>
 8000bd6:	e0cb      	b.n	8000d70 <__aeabi_fmul+0x1b8>
 8000bd8:	2dff      	cmp	r5, #255	; 0xff
 8000bda:	d100      	bne.n	8000bde <__aeabi_fmul+0x26>
 8000bdc:	e0cf      	b.n	8000d7e <__aeabi_fmul+0x1c6>
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	04d2      	lsls	r2, r2, #19
 8000be4:	431a      	orrs	r2, r3
 8000be6:	2300      	movs	r3, #0
 8000be8:	4691      	mov	r9, r2
 8000bea:	2600      	movs	r6, #0
 8000bec:	469a      	mov	sl, r3
 8000bee:	3d7f      	subs	r5, #127	; 0x7f
 8000bf0:	027c      	lsls	r4, r7, #9
 8000bf2:	007b      	lsls	r3, r7, #1
 8000bf4:	0a64      	lsrs	r4, r4, #9
 8000bf6:	0e1b      	lsrs	r3, r3, #24
 8000bf8:	0fff      	lsrs	r7, r7, #31
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fmul+0x48>
 8000bfe:	e0a9      	b.n	8000d54 <__aeabi_fmul+0x19c>
 8000c00:	2bff      	cmp	r3, #255	; 0xff
 8000c02:	d011      	beq.n	8000c28 <__aeabi_fmul+0x70>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	00e4      	lsls	r4, r4, #3
 8000c08:	04d2      	lsls	r2, r2, #19
 8000c0a:	4314      	orrs	r4, r2
 8000c0c:	4642      	mov	r2, r8
 8000c0e:	3b7f      	subs	r3, #127	; 0x7f
 8000c10:	195b      	adds	r3, r3, r5
 8000c12:	407a      	eors	r2, r7
 8000c14:	2000      	movs	r0, #0
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	1c5d      	adds	r5, r3, #1
 8000c1a:	2e0a      	cmp	r6, #10
 8000c1c:	dd13      	ble.n	8000c46 <__aeabi_fmul+0x8e>
 8000c1e:	003a      	movs	r2, r7
 8000c20:	2e0b      	cmp	r6, #11
 8000c22:	d047      	beq.n	8000cb4 <__aeabi_fmul+0xfc>
 8000c24:	4647      	mov	r7, r8
 8000c26:	e03f      	b.n	8000ca8 <__aeabi_fmul+0xf0>
 8000c28:	002b      	movs	r3, r5
 8000c2a:	33ff      	adds	r3, #255	; 0xff
 8000c2c:	2c00      	cmp	r4, #0
 8000c2e:	d11e      	bne.n	8000c6e <__aeabi_fmul+0xb6>
 8000c30:	2202      	movs	r2, #2
 8000c32:	4316      	orrs	r6, r2
 8000c34:	4642      	mov	r2, r8
 8000c36:	3501      	adds	r5, #1
 8000c38:	407a      	eors	r2, r7
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	35ff      	adds	r5, #255	; 0xff
 8000c3e:	2e0a      	cmp	r6, #10
 8000c40:	dd00      	ble.n	8000c44 <__aeabi_fmul+0x8c>
 8000c42:	e0e4      	b.n	8000e0e <__aeabi_fmul+0x256>
 8000c44:	2002      	movs	r0, #2
 8000c46:	2e02      	cmp	r6, #2
 8000c48:	dc1c      	bgt.n	8000c84 <__aeabi_fmul+0xcc>
 8000c4a:	3e01      	subs	r6, #1
 8000c4c:	2e01      	cmp	r6, #1
 8000c4e:	d842      	bhi.n	8000cd6 <__aeabi_fmul+0x11e>
 8000c50:	2802      	cmp	r0, #2
 8000c52:	d03d      	beq.n	8000cd0 <__aeabi_fmul+0x118>
 8000c54:	2801      	cmp	r0, #1
 8000c56:	d166      	bne.n	8000d26 <__aeabi_fmul+0x16e>
 8000c58:	2000      	movs	r0, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	05c0      	lsls	r0, r0, #23
 8000c5e:	4308      	orrs	r0, r1
 8000c60:	07d2      	lsls	r2, r2, #31
 8000c62:	4310      	orrs	r0, r2
 8000c64:	bce0      	pop	{r5, r6, r7}
 8000c66:	46ba      	mov	sl, r7
 8000c68:	46b1      	mov	r9, r6
 8000c6a:	46a8      	mov	r8, r5
 8000c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c6e:	2203      	movs	r2, #3
 8000c70:	4316      	orrs	r6, r2
 8000c72:	4642      	mov	r2, r8
 8000c74:	3501      	adds	r5, #1
 8000c76:	407a      	eors	r2, r7
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	35ff      	adds	r5, #255	; 0xff
 8000c7c:	2e0a      	cmp	r6, #10
 8000c7e:	dd00      	ble.n	8000c82 <__aeabi_fmul+0xca>
 8000c80:	e0e4      	b.n	8000e4c <__aeabi_fmul+0x294>
 8000c82:	2003      	movs	r0, #3
 8000c84:	2101      	movs	r1, #1
 8000c86:	40b1      	lsls	r1, r6
 8000c88:	26a6      	movs	r6, #166	; 0xa6
 8000c8a:	00f6      	lsls	r6, r6, #3
 8000c8c:	4231      	tst	r1, r6
 8000c8e:	d10a      	bne.n	8000ca6 <__aeabi_fmul+0xee>
 8000c90:	2690      	movs	r6, #144	; 0x90
 8000c92:	00b6      	lsls	r6, r6, #2
 8000c94:	4231      	tst	r1, r6
 8000c96:	d116      	bne.n	8000cc6 <__aeabi_fmul+0x10e>
 8000c98:	3eb9      	subs	r6, #185	; 0xb9
 8000c9a:	3eff      	subs	r6, #255	; 0xff
 8000c9c:	420e      	tst	r6, r1
 8000c9e:	d01a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000ca0:	46a1      	mov	r9, r4
 8000ca2:	4682      	mov	sl, r0
 8000ca4:	e000      	b.n	8000ca8 <__aeabi_fmul+0xf0>
 8000ca6:	0017      	movs	r7, r2
 8000ca8:	4653      	mov	r3, sl
 8000caa:	003a      	movs	r2, r7
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d00f      	beq.n	8000cd0 <__aeabi_fmul+0x118>
 8000cb0:	464c      	mov	r4, r9
 8000cb2:	4650      	mov	r0, sl
 8000cb4:	2803      	cmp	r0, #3
 8000cb6:	d1cd      	bne.n	8000c54 <__aeabi_fmul+0x9c>
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	03c9      	lsls	r1, r1, #15
 8000cbc:	4321      	orrs	r1, r4
 8000cbe:	0249      	lsls	r1, r1, #9
 8000cc0:	20ff      	movs	r0, #255	; 0xff
 8000cc2:	0a49      	lsrs	r1, r1, #9
 8000cc4:	e7ca      	b.n	8000c5c <__aeabi_fmul+0xa4>
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	2200      	movs	r2, #0
 8000cca:	20ff      	movs	r0, #255	; 0xff
 8000ccc:	03c9      	lsls	r1, r1, #15
 8000cce:	e7c5      	b.n	8000c5c <__aeabi_fmul+0xa4>
 8000cd0:	20ff      	movs	r0, #255	; 0xff
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	e7c2      	b.n	8000c5c <__aeabi_fmul+0xa4>
 8000cd6:	0c20      	lsrs	r0, r4, #16
 8000cd8:	4649      	mov	r1, r9
 8000cda:	0424      	lsls	r4, r4, #16
 8000cdc:	0c24      	lsrs	r4, r4, #16
 8000cde:	0027      	movs	r7, r4
 8000ce0:	0c0e      	lsrs	r6, r1, #16
 8000ce2:	0409      	lsls	r1, r1, #16
 8000ce4:	0c09      	lsrs	r1, r1, #16
 8000ce6:	4374      	muls	r4, r6
 8000ce8:	434f      	muls	r7, r1
 8000cea:	4346      	muls	r6, r0
 8000cec:	4348      	muls	r0, r1
 8000cee:	0c39      	lsrs	r1, r7, #16
 8000cf0:	1900      	adds	r0, r0, r4
 8000cf2:	1809      	adds	r1, r1, r0
 8000cf4:	428c      	cmp	r4, r1
 8000cf6:	d903      	bls.n	8000d00 <__aeabi_fmul+0x148>
 8000cf8:	2080      	movs	r0, #128	; 0x80
 8000cfa:	0240      	lsls	r0, r0, #9
 8000cfc:	4684      	mov	ip, r0
 8000cfe:	4466      	add	r6, ip
 8000d00:	043f      	lsls	r7, r7, #16
 8000d02:	0408      	lsls	r0, r1, #16
 8000d04:	0c3f      	lsrs	r7, r7, #16
 8000d06:	19c0      	adds	r0, r0, r7
 8000d08:	0184      	lsls	r4, r0, #6
 8000d0a:	1e67      	subs	r7, r4, #1
 8000d0c:	41bc      	sbcs	r4, r7
 8000d0e:	0c09      	lsrs	r1, r1, #16
 8000d10:	0e80      	lsrs	r0, r0, #26
 8000d12:	1989      	adds	r1, r1, r6
 8000d14:	4304      	orrs	r4, r0
 8000d16:	0189      	lsls	r1, r1, #6
 8000d18:	430c      	orrs	r4, r1
 8000d1a:	0109      	lsls	r1, r1, #4
 8000d1c:	d571      	bpl.n	8000e02 <__aeabi_fmul+0x24a>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	0861      	lsrs	r1, r4, #1
 8000d22:	401c      	ands	r4, r3
 8000d24:	430c      	orrs	r4, r1
 8000d26:	002b      	movs	r3, r5
 8000d28:	337f      	adds	r3, #127	; 0x7f
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	dd51      	ble.n	8000dd2 <__aeabi_fmul+0x21a>
 8000d2e:	0761      	lsls	r1, r4, #29
 8000d30:	d004      	beq.n	8000d3c <__aeabi_fmul+0x184>
 8000d32:	210f      	movs	r1, #15
 8000d34:	4021      	ands	r1, r4
 8000d36:	2904      	cmp	r1, #4
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fmul+0x184>
 8000d3a:	3404      	adds	r4, #4
 8000d3c:	0121      	lsls	r1, r4, #4
 8000d3e:	d503      	bpl.n	8000d48 <__aeabi_fmul+0x190>
 8000d40:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <__aeabi_fmul+0x298>)
 8000d42:	401c      	ands	r4, r3
 8000d44:	002b      	movs	r3, r5
 8000d46:	3380      	adds	r3, #128	; 0x80
 8000d48:	2bfe      	cmp	r3, #254	; 0xfe
 8000d4a:	dcc1      	bgt.n	8000cd0 <__aeabi_fmul+0x118>
 8000d4c:	01a1      	lsls	r1, r4, #6
 8000d4e:	0a49      	lsrs	r1, r1, #9
 8000d50:	b2d8      	uxtb	r0, r3
 8000d52:	e783      	b.n	8000c5c <__aeabi_fmul+0xa4>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d12c      	bne.n	8000db2 <__aeabi_fmul+0x1fa>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4642      	mov	r2, r8
 8000d5c:	431e      	orrs	r6, r3
 8000d5e:	002b      	movs	r3, r5
 8000d60:	407a      	eors	r2, r7
 8000d62:	2001      	movs	r0, #1
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	1c5d      	adds	r5, r3, #1
 8000d68:	2e0a      	cmp	r6, #10
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_fmul+0x1b6>
 8000d6c:	e757      	b.n	8000c1e <__aeabi_fmul+0x66>
 8000d6e:	e76a      	b.n	8000c46 <__aeabi_fmul+0x8e>
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d110      	bne.n	8000d96 <__aeabi_fmul+0x1de>
 8000d74:	2301      	movs	r3, #1
 8000d76:	2604      	movs	r6, #4
 8000d78:	2500      	movs	r5, #0
 8000d7a:	469a      	mov	sl, r3
 8000d7c:	e738      	b.n	8000bf0 <__aeabi_fmul+0x38>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d104      	bne.n	8000d8c <__aeabi_fmul+0x1d4>
 8000d82:	2302      	movs	r3, #2
 8000d84:	2608      	movs	r6, #8
 8000d86:	25ff      	movs	r5, #255	; 0xff
 8000d88:	469a      	mov	sl, r3
 8000d8a:	e731      	b.n	8000bf0 <__aeabi_fmul+0x38>
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	260c      	movs	r6, #12
 8000d90:	25ff      	movs	r5, #255	; 0xff
 8000d92:	469a      	mov	sl, r3
 8000d94:	e72c      	b.n	8000bf0 <__aeabi_fmul+0x38>
 8000d96:	4648      	mov	r0, r9
 8000d98:	f001 fa70 	bl	800227c <__clzsi2>
 8000d9c:	464a      	mov	r2, r9
 8000d9e:	1f43      	subs	r3, r0, #5
 8000da0:	2576      	movs	r5, #118	; 0x76
 8000da2:	409a      	lsls	r2, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	426d      	negs	r5, r5
 8000da8:	4691      	mov	r9, r2
 8000daa:	2600      	movs	r6, #0
 8000dac:	469a      	mov	sl, r3
 8000dae:	1a2d      	subs	r5, r5, r0
 8000db0:	e71e      	b.n	8000bf0 <__aeabi_fmul+0x38>
 8000db2:	0020      	movs	r0, r4
 8000db4:	f001 fa62 	bl	800227c <__clzsi2>
 8000db8:	4642      	mov	r2, r8
 8000dba:	1f43      	subs	r3, r0, #5
 8000dbc:	409c      	lsls	r4, r3
 8000dbe:	1a2b      	subs	r3, r5, r0
 8000dc0:	3b76      	subs	r3, #118	; 0x76
 8000dc2:	407a      	eors	r2, r7
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	1c5d      	adds	r5, r3, #1
 8000dca:	2e0a      	cmp	r6, #10
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_fmul+0x218>
 8000dce:	e726      	b.n	8000c1e <__aeabi_fmul+0x66>
 8000dd0:	e739      	b.n	8000c46 <__aeabi_fmul+0x8e>
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	1acb      	subs	r3, r1, r3
 8000dd6:	2b1b      	cmp	r3, #27
 8000dd8:	dd00      	ble.n	8000ddc <__aeabi_fmul+0x224>
 8000dda:	e73d      	b.n	8000c58 <__aeabi_fmul+0xa0>
 8000ddc:	359e      	adds	r5, #158	; 0x9e
 8000dde:	0021      	movs	r1, r4
 8000de0:	40ac      	lsls	r4, r5
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	1e63      	subs	r3, r4, #1
 8000de6:	419c      	sbcs	r4, r3
 8000de8:	4321      	orrs	r1, r4
 8000dea:	074b      	lsls	r3, r1, #29
 8000dec:	d004      	beq.n	8000df8 <__aeabi_fmul+0x240>
 8000dee:	230f      	movs	r3, #15
 8000df0:	400b      	ands	r3, r1
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d000      	beq.n	8000df8 <__aeabi_fmul+0x240>
 8000df6:	3104      	adds	r1, #4
 8000df8:	014b      	lsls	r3, r1, #5
 8000dfa:	d504      	bpl.n	8000e06 <__aeabi_fmul+0x24e>
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	2100      	movs	r1, #0
 8000e00:	e72c      	b.n	8000c5c <__aeabi_fmul+0xa4>
 8000e02:	001d      	movs	r5, r3
 8000e04:	e78f      	b.n	8000d26 <__aeabi_fmul+0x16e>
 8000e06:	0189      	lsls	r1, r1, #6
 8000e08:	2000      	movs	r0, #0
 8000e0a:	0a49      	lsrs	r1, r1, #9
 8000e0c:	e726      	b.n	8000c5c <__aeabi_fmul+0xa4>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	2e0f      	cmp	r6, #15
 8000e12:	d10c      	bne.n	8000e2e <__aeabi_fmul+0x276>
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	464b      	mov	r3, r9
 8000e18:	03c9      	lsls	r1, r1, #15
 8000e1a:	420b      	tst	r3, r1
 8000e1c:	d00d      	beq.n	8000e3a <__aeabi_fmul+0x282>
 8000e1e:	420c      	tst	r4, r1
 8000e20:	d10b      	bne.n	8000e3a <__aeabi_fmul+0x282>
 8000e22:	4321      	orrs	r1, r4
 8000e24:	0249      	lsls	r1, r1, #9
 8000e26:	003a      	movs	r2, r7
 8000e28:	20ff      	movs	r0, #255	; 0xff
 8000e2a:	0a49      	lsrs	r1, r1, #9
 8000e2c:	e716      	b.n	8000c5c <__aeabi_fmul+0xa4>
 8000e2e:	2e0b      	cmp	r6, #11
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fmul+0x27c>
 8000e32:	e6f7      	b.n	8000c24 <__aeabi_fmul+0x6c>
 8000e34:	46a1      	mov	r9, r4
 8000e36:	469a      	mov	sl, r3
 8000e38:	e736      	b.n	8000ca8 <__aeabi_fmul+0xf0>
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	464b      	mov	r3, r9
 8000e3e:	03c9      	lsls	r1, r1, #15
 8000e40:	4319      	orrs	r1, r3
 8000e42:	0249      	lsls	r1, r1, #9
 8000e44:	4642      	mov	r2, r8
 8000e46:	20ff      	movs	r0, #255	; 0xff
 8000e48:	0a49      	lsrs	r1, r1, #9
 8000e4a:	e707      	b.n	8000c5c <__aeabi_fmul+0xa4>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e7df      	b.n	8000e10 <__aeabi_fmul+0x258>
 8000e50:	f7ffffff 	.word	0xf7ffffff

08000e54 <__aeabi_fsub>:
 8000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e56:	46c6      	mov	lr, r8
 8000e58:	0243      	lsls	r3, r0, #9
 8000e5a:	0a5b      	lsrs	r3, r3, #9
 8000e5c:	0045      	lsls	r5, r0, #1
 8000e5e:	00da      	lsls	r2, r3, #3
 8000e60:	0fc4      	lsrs	r4, r0, #31
 8000e62:	0248      	lsls	r0, r1, #9
 8000e64:	004f      	lsls	r7, r1, #1
 8000e66:	4694      	mov	ip, r2
 8000e68:	0a42      	lsrs	r2, r0, #9
 8000e6a:	001e      	movs	r6, r3
 8000e6c:	4690      	mov	r8, r2
 8000e6e:	b500      	push	{lr}
 8000e70:	0e2d      	lsrs	r5, r5, #24
 8000e72:	0e3f      	lsrs	r7, r7, #24
 8000e74:	0fc9      	lsrs	r1, r1, #31
 8000e76:	0980      	lsrs	r0, r0, #6
 8000e78:	2fff      	cmp	r7, #255	; 0xff
 8000e7a:	d059      	beq.n	8000f30 <__aeabi_fsub+0xdc>
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4051      	eors	r1, r2
 8000e80:	428c      	cmp	r4, r1
 8000e82:	d039      	beq.n	8000ef8 <__aeabi_fsub+0xa4>
 8000e84:	1bea      	subs	r2, r5, r7
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	dd58      	ble.n	8000f3c <__aeabi_fsub+0xe8>
 8000e8a:	2f00      	cmp	r7, #0
 8000e8c:	d068      	beq.n	8000f60 <__aeabi_fsub+0x10c>
 8000e8e:	2dff      	cmp	r5, #255	; 0xff
 8000e90:	d100      	bne.n	8000e94 <__aeabi_fsub+0x40>
 8000e92:	e0d1      	b.n	8001038 <__aeabi_fsub+0x1e4>
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	04db      	lsls	r3, r3, #19
 8000e98:	4318      	orrs	r0, r3
 8000e9a:	2a1b      	cmp	r2, #27
 8000e9c:	dc00      	bgt.n	8000ea0 <__aeabi_fsub+0x4c>
 8000e9e:	e0e3      	b.n	8001068 <__aeabi_fsub+0x214>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	015a      	lsls	r2, r3, #5
 8000ea8:	d400      	bmi.n	8000eac <__aeabi_fsub+0x58>
 8000eaa:	e0ac      	b.n	8001006 <__aeabi_fsub+0x1b2>
 8000eac:	019b      	lsls	r3, r3, #6
 8000eae:	099e      	lsrs	r6, r3, #6
 8000eb0:	0030      	movs	r0, r6
 8000eb2:	f001 f9e3 	bl	800227c <__clzsi2>
 8000eb6:	0033      	movs	r3, r6
 8000eb8:	3805      	subs	r0, #5
 8000eba:	4083      	lsls	r3, r0
 8000ebc:	4285      	cmp	r5, r0
 8000ebe:	dc00      	bgt.n	8000ec2 <__aeabi_fsub+0x6e>
 8000ec0:	e0c6      	b.n	8001050 <__aeabi_fsub+0x1fc>
 8000ec2:	4ab2      	ldr	r2, [pc, #712]	; (800118c <__aeabi_fsub+0x338>)
 8000ec4:	1a2d      	subs	r5, r5, r0
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	075a      	lsls	r2, r3, #29
 8000eca:	d004      	beq.n	8000ed6 <__aeabi_fsub+0x82>
 8000ecc:	220f      	movs	r2, #15
 8000ece:	401a      	ands	r2, r3
 8000ed0:	2a04      	cmp	r2, #4
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_fsub+0x82>
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	015a      	lsls	r2, r3, #5
 8000ed8:	d400      	bmi.n	8000edc <__aeabi_fsub+0x88>
 8000eda:	e097      	b.n	800100c <__aeabi_fsub+0x1b8>
 8000edc:	1c6a      	adds	r2, r5, #1
 8000ede:	2dfe      	cmp	r5, #254	; 0xfe
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_fsub+0x90>
 8000ee2:	e084      	b.n	8000fee <__aeabi_fsub+0x19a>
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	0a5e      	lsrs	r6, r3, #9
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	05d0      	lsls	r0, r2, #23
 8000eec:	4330      	orrs	r0, r6
 8000eee:	07e4      	lsls	r4, r4, #31
 8000ef0:	4320      	orrs	r0, r4
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	46b8      	mov	r8, r7
 8000ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef8:	1bea      	subs	r2, r5, r7
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	dd41      	ble.n	8000f82 <__aeabi_fsub+0x12e>
 8000efe:	2f00      	cmp	r7, #0
 8000f00:	d06b      	beq.n	8000fda <__aeabi_fsub+0x186>
 8000f02:	2dff      	cmp	r5, #255	; 0xff
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0xb4>
 8000f06:	e097      	b.n	8001038 <__aeabi_fsub+0x1e4>
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	04db      	lsls	r3, r3, #19
 8000f0c:	4318      	orrs	r0, r3
 8000f0e:	2a1b      	cmp	r2, #27
 8000f10:	dc00      	bgt.n	8000f14 <__aeabi_fsub+0xc0>
 8000f12:	e0cc      	b.n	80010ae <__aeabi_fsub+0x25a>
 8000f14:	2301      	movs	r3, #1
 8000f16:	4463      	add	r3, ip
 8000f18:	015a      	lsls	r2, r3, #5
 8000f1a:	d574      	bpl.n	8001006 <__aeabi_fsub+0x1b2>
 8000f1c:	3501      	adds	r5, #1
 8000f1e:	2dff      	cmp	r5, #255	; 0xff
 8000f20:	d065      	beq.n	8000fee <__aeabi_fsub+0x19a>
 8000f22:	2201      	movs	r2, #1
 8000f24:	499a      	ldr	r1, [pc, #616]	; (8001190 <__aeabi_fsub+0x33c>)
 8000f26:	401a      	ands	r2, r3
 8000f28:	085b      	lsrs	r3, r3, #1
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	e7cb      	b.n	8000ec8 <__aeabi_fsub+0x74>
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d01f      	beq.n	8000f74 <__aeabi_fsub+0x120>
 8000f34:	428c      	cmp	r4, r1
 8000f36:	d022      	beq.n	8000f7e <__aeabi_fsub+0x12a>
 8000f38:	002a      	movs	r2, r5
 8000f3a:	3aff      	subs	r2, #255	; 0xff
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d035      	beq.n	8000fac <__aeabi_fsub+0x158>
 8000f40:	1b7a      	subs	r2, r7, r5
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	d000      	beq.n	8000f48 <__aeabi_fsub+0xf4>
 8000f46:	e099      	b.n	800107c <__aeabi_fsub+0x228>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_fsub+0xfc>
 8000f4e:	e0dd      	b.n	800110c <__aeabi_fsub+0x2b8>
 8000f50:	1e53      	subs	r3, r2, #1
 8000f52:	2a01      	cmp	r2, #1
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x104>
 8000f56:	e105      	b.n	8001164 <__aeabi_fsub+0x310>
 8000f58:	2aff      	cmp	r2, #255	; 0xff
 8000f5a:	d06b      	beq.n	8001034 <__aeabi_fsub+0x1e0>
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	e094      	b.n	800108a <__aeabi_fsub+0x236>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d073      	beq.n	800104c <__aeabi_fsub+0x1f8>
 8000f64:	1e51      	subs	r1, r2, #1
 8000f66:	2a01      	cmp	r2, #1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x118>
 8000f6a:	e0df      	b.n	800112c <__aeabi_fsub+0x2d8>
 8000f6c:	2aff      	cmp	r2, #255	; 0xff
 8000f6e:	d063      	beq.n	8001038 <__aeabi_fsub+0x1e4>
 8000f70:	000a      	movs	r2, r1
 8000f72:	e792      	b.n	8000e9a <__aeabi_fsub+0x46>
 8000f74:	2201      	movs	r2, #1
 8000f76:	4051      	eors	r1, r2
 8000f78:	42a1      	cmp	r1, r4
 8000f7a:	d000      	beq.n	8000f7e <__aeabi_fsub+0x12a>
 8000f7c:	e782      	b.n	8000e84 <__aeabi_fsub+0x30>
 8000f7e:	002a      	movs	r2, r5
 8000f80:	3aff      	subs	r2, #255	; 0xff
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d036      	beq.n	8000ff4 <__aeabi_fsub+0x1a0>
 8000f86:	1b7a      	subs	r2, r7, r5
 8000f88:	2d00      	cmp	r5, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x13a>
 8000f8c:	e0aa      	b.n	80010e4 <__aeabi_fsub+0x290>
 8000f8e:	2fff      	cmp	r7, #255	; 0xff
 8000f90:	d100      	bne.n	8000f94 <__aeabi_fsub+0x140>
 8000f92:	e0da      	b.n	800114a <__aeabi_fsub+0x2f6>
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	4661      	mov	r1, ip
 8000f98:	04db      	lsls	r3, r3, #19
 8000f9a:	4319      	orrs	r1, r3
 8000f9c:	468c      	mov	ip, r1
 8000f9e:	2a1b      	cmp	r2, #27
 8000fa0:	dc00      	bgt.n	8000fa4 <__aeabi_fsub+0x150>
 8000fa2:	e0d4      	b.n	800114e <__aeabi_fsub+0x2fa>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	003d      	movs	r5, r7
 8000fa8:	181b      	adds	r3, r3, r0
 8000faa:	e7b5      	b.n	8000f18 <__aeabi_fsub+0xc4>
 8000fac:	27fe      	movs	r7, #254	; 0xfe
 8000fae:	1c6a      	adds	r2, r5, #1
 8000fb0:	4217      	tst	r7, r2
 8000fb2:	d171      	bne.n	8001098 <__aeabi_fsub+0x244>
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d000      	beq.n	8000fba <__aeabi_fsub+0x166>
 8000fb8:	e09e      	b.n	80010f8 <__aeabi_fsub+0x2a4>
 8000fba:	4663      	mov	r3, ip
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x16e>
 8000fc0:	e0d5      	b.n	800116e <__aeabi_fsub+0x31a>
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d100      	bne.n	8000fca <__aeabi_fsub+0x176>
 8000fc8:	e78f      	b.n	8000eea <__aeabi_fsub+0x96>
 8000fca:	1a1b      	subs	r3, r3, r0
 8000fcc:	015e      	lsls	r6, r3, #5
 8000fce:	d400      	bmi.n	8000fd2 <__aeabi_fsub+0x17e>
 8000fd0:	e0d6      	b.n	8001180 <__aeabi_fsub+0x32c>
 8000fd2:	4663      	mov	r3, ip
 8000fd4:	000c      	movs	r4, r1
 8000fd6:	1ac3      	subs	r3, r0, r3
 8000fd8:	e776      	b.n	8000ec8 <__aeabi_fsub+0x74>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d036      	beq.n	800104c <__aeabi_fsub+0x1f8>
 8000fde:	1e51      	subs	r1, r2, #1
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x192>
 8000fe4:	e09a      	b.n	800111c <__aeabi_fsub+0x2c8>
 8000fe6:	2aff      	cmp	r2, #255	; 0xff
 8000fe8:	d026      	beq.n	8001038 <__aeabi_fsub+0x1e4>
 8000fea:	000a      	movs	r2, r1
 8000fec:	e78f      	b.n	8000f0e <__aeabi_fsub+0xba>
 8000fee:	22ff      	movs	r2, #255	; 0xff
 8000ff0:	2600      	movs	r6, #0
 8000ff2:	e77a      	b.n	8000eea <__aeabi_fsub+0x96>
 8000ff4:	27fe      	movs	r7, #254	; 0xfe
 8000ff6:	1c6a      	adds	r2, r5, #1
 8000ff8:	4217      	tst	r7, r2
 8000ffa:	d062      	beq.n	80010c2 <__aeabi_fsub+0x26e>
 8000ffc:	2aff      	cmp	r2, #255	; 0xff
 8000ffe:	d0f6      	beq.n	8000fee <__aeabi_fsub+0x19a>
 8001000:	0015      	movs	r5, r2
 8001002:	4460      	add	r0, ip
 8001004:	0843      	lsrs	r3, r0, #1
 8001006:	075a      	lsls	r2, r3, #29
 8001008:	d000      	beq.n	800100c <__aeabi_fsub+0x1b8>
 800100a:	e75f      	b.n	8000ecc <__aeabi_fsub+0x78>
 800100c:	08db      	lsrs	r3, r3, #3
 800100e:	2dff      	cmp	r5, #255	; 0xff
 8001010:	d012      	beq.n	8001038 <__aeabi_fsub+0x1e4>
 8001012:	025b      	lsls	r3, r3, #9
 8001014:	0a5e      	lsrs	r6, r3, #9
 8001016:	b2ea      	uxtb	r2, r5
 8001018:	e767      	b.n	8000eea <__aeabi_fsub+0x96>
 800101a:	4662      	mov	r2, ip
 800101c:	2a00      	cmp	r2, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_fsub+0x1ce>
 8001020:	e093      	b.n	800114a <__aeabi_fsub+0x2f6>
 8001022:	2800      	cmp	r0, #0
 8001024:	d008      	beq.n	8001038 <__aeabi_fsub+0x1e4>
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	03d2      	lsls	r2, r2, #15
 800102a:	4213      	tst	r3, r2
 800102c:	d004      	beq.n	8001038 <__aeabi_fsub+0x1e4>
 800102e:	4640      	mov	r0, r8
 8001030:	4210      	tst	r0, r2
 8001032:	d101      	bne.n	8001038 <__aeabi_fsub+0x1e4>
 8001034:	000c      	movs	r4, r1
 8001036:	4643      	mov	r3, r8
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0d8      	beq.n	8000fee <__aeabi_fsub+0x19a>
 800103c:	2680      	movs	r6, #128	; 0x80
 800103e:	03f6      	lsls	r6, r6, #15
 8001040:	431e      	orrs	r6, r3
 8001042:	0276      	lsls	r6, r6, #9
 8001044:	22ff      	movs	r2, #255	; 0xff
 8001046:	0a76      	lsrs	r6, r6, #9
 8001048:	e74f      	b.n	8000eea <__aeabi_fsub+0x96>
 800104a:	4643      	mov	r3, r8
 800104c:	0015      	movs	r5, r2
 800104e:	e7de      	b.n	800100e <__aeabi_fsub+0x1ba>
 8001050:	2220      	movs	r2, #32
 8001052:	1b40      	subs	r0, r0, r5
 8001054:	3001      	adds	r0, #1
 8001056:	1a12      	subs	r2, r2, r0
 8001058:	0019      	movs	r1, r3
 800105a:	4093      	lsls	r3, r2
 800105c:	40c1      	lsrs	r1, r0
 800105e:	1e5a      	subs	r2, r3, #1
 8001060:	4193      	sbcs	r3, r2
 8001062:	2500      	movs	r5, #0
 8001064:	430b      	orrs	r3, r1
 8001066:	e72f      	b.n	8000ec8 <__aeabi_fsub+0x74>
 8001068:	2320      	movs	r3, #32
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	0001      	movs	r1, r0
 800106e:	4098      	lsls	r0, r3
 8001070:	0003      	movs	r3, r0
 8001072:	40d1      	lsrs	r1, r2
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	4193      	sbcs	r3, r2
 8001078:	430b      	orrs	r3, r1
 800107a:	e712      	b.n	8000ea2 <__aeabi_fsub+0x4e>
 800107c:	2fff      	cmp	r7, #255	; 0xff
 800107e:	d0d9      	beq.n	8001034 <__aeabi_fsub+0x1e0>
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	4664      	mov	r4, ip
 8001084:	04db      	lsls	r3, r3, #19
 8001086:	431c      	orrs	r4, r3
 8001088:	46a4      	mov	ip, r4
 800108a:	2a1b      	cmp	r2, #27
 800108c:	dd52      	ble.n	8001134 <__aeabi_fsub+0x2e0>
 800108e:	2301      	movs	r3, #1
 8001090:	000c      	movs	r4, r1
 8001092:	003d      	movs	r5, r7
 8001094:	1ac3      	subs	r3, r0, r3
 8001096:	e706      	b.n	8000ea6 <__aeabi_fsub+0x52>
 8001098:	4663      	mov	r3, ip
 800109a:	1a1e      	subs	r6, r3, r0
 800109c:	0173      	lsls	r3, r6, #5
 800109e:	d439      	bmi.n	8001114 <__aeabi_fsub+0x2c0>
 80010a0:	2e00      	cmp	r6, #0
 80010a2:	d000      	beq.n	80010a6 <__aeabi_fsub+0x252>
 80010a4:	e704      	b.n	8000eb0 <__aeabi_fsub+0x5c>
 80010a6:	2400      	movs	r4, #0
 80010a8:	2200      	movs	r2, #0
 80010aa:	2600      	movs	r6, #0
 80010ac:	e71d      	b.n	8000eea <__aeabi_fsub+0x96>
 80010ae:	2320      	movs	r3, #32
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	0001      	movs	r1, r0
 80010b4:	4098      	lsls	r0, r3
 80010b6:	0003      	movs	r3, r0
 80010b8:	40d1      	lsrs	r1, r2
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	4193      	sbcs	r3, r2
 80010be:	430b      	orrs	r3, r1
 80010c0:	e729      	b.n	8000f16 <__aeabi_fsub+0xc2>
 80010c2:	2d00      	cmp	r5, #0
 80010c4:	d1a9      	bne.n	800101a <__aeabi_fsub+0x1c6>
 80010c6:	4663      	mov	r3, ip
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d056      	beq.n	800117a <__aeabi_fsub+0x326>
 80010cc:	2200      	movs	r2, #0
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0x280>
 80010d2:	e70a      	b.n	8000eea <__aeabi_fsub+0x96>
 80010d4:	0003      	movs	r3, r0
 80010d6:	4463      	add	r3, ip
 80010d8:	015a      	lsls	r2, r3, #5
 80010da:	d594      	bpl.n	8001006 <__aeabi_fsub+0x1b2>
 80010dc:	4a2b      	ldr	r2, [pc, #172]	; (800118c <__aeabi_fsub+0x338>)
 80010de:	3501      	adds	r5, #1
 80010e0:	4013      	ands	r3, r2
 80010e2:	e790      	b.n	8001006 <__aeabi_fsub+0x1b2>
 80010e4:	4663      	mov	r3, ip
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0af      	beq.n	800104a <__aeabi_fsub+0x1f6>
 80010ea:	1e53      	subs	r3, r2, #1
 80010ec:	2a01      	cmp	r2, #1
 80010ee:	d015      	beq.n	800111c <__aeabi_fsub+0x2c8>
 80010f0:	2aff      	cmp	r2, #255	; 0xff
 80010f2:	d02a      	beq.n	800114a <__aeabi_fsub+0x2f6>
 80010f4:	001a      	movs	r2, r3
 80010f6:	e752      	b.n	8000f9e <__aeabi_fsub+0x14a>
 80010f8:	4662      	mov	r2, ip
 80010fa:	2a00      	cmp	r2, #0
 80010fc:	d191      	bne.n	8001022 <__aeabi_fsub+0x1ce>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d198      	bne.n	8001034 <__aeabi_fsub+0x1e0>
 8001102:	2680      	movs	r6, #128	; 0x80
 8001104:	2400      	movs	r4, #0
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	03f6      	lsls	r6, r6, #15
 800110a:	e6ee      	b.n	8000eea <__aeabi_fsub+0x96>
 800110c:	000c      	movs	r4, r1
 800110e:	4643      	mov	r3, r8
 8001110:	0015      	movs	r5, r2
 8001112:	e77c      	b.n	800100e <__aeabi_fsub+0x1ba>
 8001114:	4663      	mov	r3, ip
 8001116:	000c      	movs	r4, r1
 8001118:	1ac6      	subs	r6, r0, r3
 800111a:	e6c9      	b.n	8000eb0 <__aeabi_fsub+0x5c>
 800111c:	0003      	movs	r3, r0
 800111e:	4463      	add	r3, ip
 8001120:	2501      	movs	r5, #1
 8001122:	015a      	lsls	r2, r3, #5
 8001124:	d400      	bmi.n	8001128 <__aeabi_fsub+0x2d4>
 8001126:	e76e      	b.n	8001006 <__aeabi_fsub+0x1b2>
 8001128:	2502      	movs	r5, #2
 800112a:	e6fa      	b.n	8000f22 <__aeabi_fsub+0xce>
 800112c:	4663      	mov	r3, ip
 800112e:	2501      	movs	r5, #1
 8001130:	1a1b      	subs	r3, r3, r0
 8001132:	e6b8      	b.n	8000ea6 <__aeabi_fsub+0x52>
 8001134:	4664      	mov	r4, ip
 8001136:	2320      	movs	r3, #32
 8001138:	40d4      	lsrs	r4, r2
 800113a:	1a9b      	subs	r3, r3, r2
 800113c:	4662      	mov	r2, ip
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	1e5a      	subs	r2, r3, #1
 8001144:	4193      	sbcs	r3, r2
 8001146:	4323      	orrs	r3, r4
 8001148:	e7a2      	b.n	8001090 <__aeabi_fsub+0x23c>
 800114a:	4643      	mov	r3, r8
 800114c:	e774      	b.n	8001038 <__aeabi_fsub+0x1e4>
 800114e:	4661      	mov	r1, ip
 8001150:	2320      	movs	r3, #32
 8001152:	40d1      	lsrs	r1, r2
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	4662      	mov	r2, ip
 8001158:	409a      	lsls	r2, r3
 800115a:	0013      	movs	r3, r2
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	4193      	sbcs	r3, r2
 8001160:	430b      	orrs	r3, r1
 8001162:	e720      	b.n	8000fa6 <__aeabi_fsub+0x152>
 8001164:	4663      	mov	r3, ip
 8001166:	000c      	movs	r4, r1
 8001168:	2501      	movs	r5, #1
 800116a:	1ac3      	subs	r3, r0, r3
 800116c:	e69b      	b.n	8000ea6 <__aeabi_fsub+0x52>
 800116e:	2800      	cmp	r0, #0
 8001170:	d099      	beq.n	80010a6 <__aeabi_fsub+0x252>
 8001172:	000c      	movs	r4, r1
 8001174:	4646      	mov	r6, r8
 8001176:	2200      	movs	r2, #0
 8001178:	e6b7      	b.n	8000eea <__aeabi_fsub+0x96>
 800117a:	4646      	mov	r6, r8
 800117c:	2200      	movs	r2, #0
 800117e:	e6b4      	b.n	8000eea <__aeabi_fsub+0x96>
 8001180:	2b00      	cmp	r3, #0
 8001182:	d000      	beq.n	8001186 <__aeabi_fsub+0x332>
 8001184:	e73f      	b.n	8001006 <__aeabi_fsub+0x1b2>
 8001186:	2400      	movs	r4, #0
 8001188:	2600      	movs	r6, #0
 800118a:	e6ae      	b.n	8000eea <__aeabi_fsub+0x96>
 800118c:	fbffffff 	.word	0xfbffffff
 8001190:	7dffffff 	.word	0x7dffffff

08001194 <__aeabi_f2iz>:
 8001194:	0241      	lsls	r1, r0, #9
 8001196:	0042      	lsls	r2, r0, #1
 8001198:	0fc3      	lsrs	r3, r0, #31
 800119a:	0a49      	lsrs	r1, r1, #9
 800119c:	2000      	movs	r0, #0
 800119e:	0e12      	lsrs	r2, r2, #24
 80011a0:	2a7e      	cmp	r2, #126	; 0x7e
 80011a2:	dd03      	ble.n	80011ac <__aeabi_f2iz+0x18>
 80011a4:	2a9d      	cmp	r2, #157	; 0x9d
 80011a6:	dd02      	ble.n	80011ae <__aeabi_f2iz+0x1a>
 80011a8:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <__aeabi_f2iz+0x3c>)
 80011aa:	1898      	adds	r0, r3, r2
 80011ac:	4770      	bx	lr
 80011ae:	2080      	movs	r0, #128	; 0x80
 80011b0:	0400      	lsls	r0, r0, #16
 80011b2:	4301      	orrs	r1, r0
 80011b4:	2a95      	cmp	r2, #149	; 0x95
 80011b6:	dc07      	bgt.n	80011c8 <__aeabi_f2iz+0x34>
 80011b8:	2096      	movs	r0, #150	; 0x96
 80011ba:	1a82      	subs	r2, r0, r2
 80011bc:	40d1      	lsrs	r1, r2
 80011be:	4248      	negs	r0, r1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f3      	bne.n	80011ac <__aeabi_f2iz+0x18>
 80011c4:	0008      	movs	r0, r1
 80011c6:	e7f1      	b.n	80011ac <__aeabi_f2iz+0x18>
 80011c8:	3a96      	subs	r2, #150	; 0x96
 80011ca:	4091      	lsls	r1, r2
 80011cc:	e7f7      	b.n	80011be <__aeabi_f2iz+0x2a>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	7fffffff 	.word	0x7fffffff

080011d4 <__aeabi_i2f>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d013      	beq.n	8001202 <__aeabi_i2f+0x2e>
 80011da:	17c3      	asrs	r3, r0, #31
 80011dc:	18c5      	adds	r5, r0, r3
 80011de:	405d      	eors	r5, r3
 80011e0:	0fc4      	lsrs	r4, r0, #31
 80011e2:	0028      	movs	r0, r5
 80011e4:	f001 f84a 	bl	800227c <__clzsi2>
 80011e8:	239e      	movs	r3, #158	; 0x9e
 80011ea:	0001      	movs	r1, r0
 80011ec:	1a1b      	subs	r3, r3, r0
 80011ee:	2b96      	cmp	r3, #150	; 0x96
 80011f0:	dc0f      	bgt.n	8001212 <__aeabi_i2f+0x3e>
 80011f2:	2808      	cmp	r0, #8
 80011f4:	d031      	beq.n	800125a <__aeabi_i2f+0x86>
 80011f6:	3908      	subs	r1, #8
 80011f8:	408d      	lsls	r5, r1
 80011fa:	026d      	lsls	r5, r5, #9
 80011fc:	0a6d      	lsrs	r5, r5, #9
 80011fe:	b2d8      	uxtb	r0, r3
 8001200:	e002      	b.n	8001208 <__aeabi_i2f+0x34>
 8001202:	2400      	movs	r4, #0
 8001204:	2000      	movs	r0, #0
 8001206:	2500      	movs	r5, #0
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4328      	orrs	r0, r5
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bd70      	pop	{r4, r5, r6, pc}
 8001212:	2b99      	cmp	r3, #153	; 0x99
 8001214:	dd0c      	ble.n	8001230 <__aeabi_i2f+0x5c>
 8001216:	2205      	movs	r2, #5
 8001218:	1a12      	subs	r2, r2, r0
 800121a:	0028      	movs	r0, r5
 800121c:	40d0      	lsrs	r0, r2
 800121e:	0002      	movs	r2, r0
 8001220:	0008      	movs	r0, r1
 8001222:	301b      	adds	r0, #27
 8001224:	4085      	lsls	r5, r0
 8001226:	0028      	movs	r0, r5
 8001228:	1e45      	subs	r5, r0, #1
 800122a:	41a8      	sbcs	r0, r5
 800122c:	4302      	orrs	r2, r0
 800122e:	0015      	movs	r5, r2
 8001230:	2905      	cmp	r1, #5
 8001232:	dc16      	bgt.n	8001262 <__aeabi_i2f+0x8e>
 8001234:	002a      	movs	r2, r5
 8001236:	480f      	ldr	r0, [pc, #60]	; (8001274 <__aeabi_i2f+0xa0>)
 8001238:	4002      	ands	r2, r0
 800123a:	076e      	lsls	r6, r5, #29
 800123c:	d009      	beq.n	8001252 <__aeabi_i2f+0x7e>
 800123e:	260f      	movs	r6, #15
 8001240:	4035      	ands	r5, r6
 8001242:	2d04      	cmp	r5, #4
 8001244:	d005      	beq.n	8001252 <__aeabi_i2f+0x7e>
 8001246:	3204      	adds	r2, #4
 8001248:	0155      	lsls	r5, r2, #5
 800124a:	d502      	bpl.n	8001252 <__aeabi_i2f+0x7e>
 800124c:	239f      	movs	r3, #159	; 0x9f
 800124e:	4002      	ands	r2, r0
 8001250:	1a5b      	subs	r3, r3, r1
 8001252:	0192      	lsls	r2, r2, #6
 8001254:	0a55      	lsrs	r5, r2, #9
 8001256:	b2d8      	uxtb	r0, r3
 8001258:	e7d6      	b.n	8001208 <__aeabi_i2f+0x34>
 800125a:	026d      	lsls	r5, r5, #9
 800125c:	2096      	movs	r0, #150	; 0x96
 800125e:	0a6d      	lsrs	r5, r5, #9
 8001260:	e7d2      	b.n	8001208 <__aeabi_i2f+0x34>
 8001262:	1f4a      	subs	r2, r1, #5
 8001264:	4095      	lsls	r5, r2
 8001266:	002a      	movs	r2, r5
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <__aeabi_i2f+0xa0>)
 800126a:	4002      	ands	r2, r0
 800126c:	076e      	lsls	r6, r5, #29
 800126e:	d0f0      	beq.n	8001252 <__aeabi_i2f+0x7e>
 8001270:	e7e5      	b.n	800123e <__aeabi_i2f+0x6a>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	fbffffff 	.word	0xfbffffff

08001278 <__aeabi_ui2f>:
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	1e04      	subs	r4, r0, #0
 800127c:	d00e      	beq.n	800129c <__aeabi_ui2f+0x24>
 800127e:	f000 fffd 	bl	800227c <__clzsi2>
 8001282:	239e      	movs	r3, #158	; 0x9e
 8001284:	0001      	movs	r1, r0
 8001286:	1a1b      	subs	r3, r3, r0
 8001288:	2b96      	cmp	r3, #150	; 0x96
 800128a:	dc0c      	bgt.n	80012a6 <__aeabi_ui2f+0x2e>
 800128c:	2808      	cmp	r0, #8
 800128e:	d02c      	beq.n	80012ea <__aeabi_ui2f+0x72>
 8001290:	3908      	subs	r1, #8
 8001292:	408c      	lsls	r4, r1
 8001294:	0264      	lsls	r4, r4, #9
 8001296:	0a64      	lsrs	r4, r4, #9
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	e001      	b.n	80012a0 <__aeabi_ui2f+0x28>
 800129c:	2000      	movs	r0, #0
 800129e:	2400      	movs	r4, #0
 80012a0:	05c0      	lsls	r0, r0, #23
 80012a2:	4320      	orrs	r0, r4
 80012a4:	bd70      	pop	{r4, r5, r6, pc}
 80012a6:	2b99      	cmp	r3, #153	; 0x99
 80012a8:	dd0a      	ble.n	80012c0 <__aeabi_ui2f+0x48>
 80012aa:	0002      	movs	r2, r0
 80012ac:	0020      	movs	r0, r4
 80012ae:	321b      	adds	r2, #27
 80012b0:	4090      	lsls	r0, r2
 80012b2:	0002      	movs	r2, r0
 80012b4:	1e50      	subs	r0, r2, #1
 80012b6:	4182      	sbcs	r2, r0
 80012b8:	2005      	movs	r0, #5
 80012ba:	1a40      	subs	r0, r0, r1
 80012bc:	40c4      	lsrs	r4, r0
 80012be:	4314      	orrs	r4, r2
 80012c0:	2905      	cmp	r1, #5
 80012c2:	dc16      	bgt.n	80012f2 <__aeabi_ui2f+0x7a>
 80012c4:	0022      	movs	r2, r4
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <__aeabi_ui2f+0x8c>)
 80012c8:	4002      	ands	r2, r0
 80012ca:	0765      	lsls	r5, r4, #29
 80012cc:	d009      	beq.n	80012e2 <__aeabi_ui2f+0x6a>
 80012ce:	250f      	movs	r5, #15
 80012d0:	402c      	ands	r4, r5
 80012d2:	2c04      	cmp	r4, #4
 80012d4:	d005      	beq.n	80012e2 <__aeabi_ui2f+0x6a>
 80012d6:	3204      	adds	r2, #4
 80012d8:	0154      	lsls	r4, r2, #5
 80012da:	d502      	bpl.n	80012e2 <__aeabi_ui2f+0x6a>
 80012dc:	239f      	movs	r3, #159	; 0x9f
 80012de:	4002      	ands	r2, r0
 80012e0:	1a5b      	subs	r3, r3, r1
 80012e2:	0192      	lsls	r2, r2, #6
 80012e4:	0a54      	lsrs	r4, r2, #9
 80012e6:	b2d8      	uxtb	r0, r3
 80012e8:	e7da      	b.n	80012a0 <__aeabi_ui2f+0x28>
 80012ea:	0264      	lsls	r4, r4, #9
 80012ec:	2096      	movs	r0, #150	; 0x96
 80012ee:	0a64      	lsrs	r4, r4, #9
 80012f0:	e7d6      	b.n	80012a0 <__aeabi_ui2f+0x28>
 80012f2:	1f4a      	subs	r2, r1, #5
 80012f4:	4094      	lsls	r4, r2
 80012f6:	0022      	movs	r2, r4
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <__aeabi_ui2f+0x8c>)
 80012fa:	4002      	ands	r2, r0
 80012fc:	0765      	lsls	r5, r4, #29
 80012fe:	d0f0      	beq.n	80012e2 <__aeabi_ui2f+0x6a>
 8001300:	e7e5      	b.n	80012ce <__aeabi_ui2f+0x56>
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	fbffffff 	.word	0xfbffffff

08001308 <__aeabi_ddiv>:
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	4657      	mov	r7, sl
 800130c:	464e      	mov	r6, r9
 800130e:	4645      	mov	r5, r8
 8001310:	46de      	mov	lr, fp
 8001312:	b5e0      	push	{r5, r6, r7, lr}
 8001314:	030c      	lsls	r4, r1, #12
 8001316:	001f      	movs	r7, r3
 8001318:	004b      	lsls	r3, r1, #1
 800131a:	4681      	mov	r9, r0
 800131c:	4692      	mov	sl, r2
 800131e:	0005      	movs	r5, r0
 8001320:	b085      	sub	sp, #20
 8001322:	0b24      	lsrs	r4, r4, #12
 8001324:	0d5b      	lsrs	r3, r3, #21
 8001326:	0fce      	lsrs	r6, r1, #31
 8001328:	2b00      	cmp	r3, #0
 800132a:	d100      	bne.n	800132e <__aeabi_ddiv+0x26>
 800132c:	e152      	b.n	80015d4 <__aeabi_ddiv+0x2cc>
 800132e:	4ad2      	ldr	r2, [pc, #840]	; (8001678 <__aeabi_ddiv+0x370>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d100      	bne.n	8001336 <__aeabi_ddiv+0x2e>
 8001334:	e16e      	b.n	8001614 <__aeabi_ddiv+0x30c>
 8001336:	0f42      	lsrs	r2, r0, #29
 8001338:	00e4      	lsls	r4, r4, #3
 800133a:	4314      	orrs	r4, r2
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	0412      	lsls	r2, r2, #16
 8001340:	4322      	orrs	r2, r4
 8001342:	4690      	mov	r8, r2
 8001344:	4acd      	ldr	r2, [pc, #820]	; (800167c <__aeabi_ddiv+0x374>)
 8001346:	00c5      	lsls	r5, r0, #3
 8001348:	4693      	mov	fp, r2
 800134a:	449b      	add	fp, r3
 800134c:	2300      	movs	r3, #0
 800134e:	4699      	mov	r9, r3
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	033c      	lsls	r4, r7, #12
 8001354:	007b      	lsls	r3, r7, #1
 8001356:	4650      	mov	r0, sl
 8001358:	0b24      	lsrs	r4, r4, #12
 800135a:	0d5b      	lsrs	r3, r3, #21
 800135c:	0fff      	lsrs	r7, r7, #31
 800135e:	2b00      	cmp	r3, #0
 8001360:	d100      	bne.n	8001364 <__aeabi_ddiv+0x5c>
 8001362:	e11a      	b.n	800159a <__aeabi_ddiv+0x292>
 8001364:	4ac4      	ldr	r2, [pc, #784]	; (8001678 <__aeabi_ddiv+0x370>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d100      	bne.n	800136c <__aeabi_ddiv+0x64>
 800136a:	e15e      	b.n	800162a <__aeabi_ddiv+0x322>
 800136c:	0f42      	lsrs	r2, r0, #29
 800136e:	00e4      	lsls	r4, r4, #3
 8001370:	4322      	orrs	r2, r4
 8001372:	2480      	movs	r4, #128	; 0x80
 8001374:	0424      	lsls	r4, r4, #16
 8001376:	4314      	orrs	r4, r2
 8001378:	4ac0      	ldr	r2, [pc, #768]	; (800167c <__aeabi_ddiv+0x374>)
 800137a:	00c1      	lsls	r1, r0, #3
 800137c:	4694      	mov	ip, r2
 800137e:	465a      	mov	r2, fp
 8001380:	4463      	add	r3, ip
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	469b      	mov	fp, r3
 8001386:	2000      	movs	r0, #0
 8001388:	0033      	movs	r3, r6
 800138a:	407b      	eors	r3, r7
 800138c:	469a      	mov	sl, r3
 800138e:	464b      	mov	r3, r9
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d827      	bhi.n	80013e4 <__aeabi_ddiv+0xdc>
 8001394:	4aba      	ldr	r2, [pc, #744]	; (8001680 <__aeabi_ddiv+0x378>)
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	58d3      	ldr	r3, [r2, r3]
 800139a:	469f      	mov	pc, r3
 800139c:	46b2      	mov	sl, r6
 800139e:	9b00      	ldr	r3, [sp, #0]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d016      	beq.n	80013d2 <__aeabi_ddiv+0xca>
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d100      	bne.n	80013aa <__aeabi_ddiv+0xa2>
 80013a8:	e287      	b.n	80018ba <__aeabi_ddiv+0x5b2>
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d000      	beq.n	80013b0 <__aeabi_ddiv+0xa8>
 80013ae:	e0d5      	b.n	800155c <__aeabi_ddiv+0x254>
 80013b0:	2300      	movs	r3, #0
 80013b2:	2200      	movs	r2, #0
 80013b4:	2500      	movs	r5, #0
 80013b6:	051b      	lsls	r3, r3, #20
 80013b8:	4313      	orrs	r3, r2
 80013ba:	4652      	mov	r2, sl
 80013bc:	07d2      	lsls	r2, r2, #31
 80013be:	4313      	orrs	r3, r2
 80013c0:	0028      	movs	r0, r5
 80013c2:	0019      	movs	r1, r3
 80013c4:	b005      	add	sp, #20
 80013c6:	bcf0      	pop	{r4, r5, r6, r7}
 80013c8:	46bb      	mov	fp, r7
 80013ca:	46b2      	mov	sl, r6
 80013cc:	46a9      	mov	r9, r5
 80013ce:	46a0      	mov	r8, r4
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d2:	2200      	movs	r2, #0
 80013d4:	2500      	movs	r5, #0
 80013d6:	4ba8      	ldr	r3, [pc, #672]	; (8001678 <__aeabi_ddiv+0x370>)
 80013d8:	e7ed      	b.n	80013b6 <__aeabi_ddiv+0xae>
 80013da:	46ba      	mov	sl, r7
 80013dc:	46a0      	mov	r8, r4
 80013de:	000d      	movs	r5, r1
 80013e0:	9000      	str	r0, [sp, #0]
 80013e2:	e7dc      	b.n	800139e <__aeabi_ddiv+0x96>
 80013e4:	4544      	cmp	r4, r8
 80013e6:	d200      	bcs.n	80013ea <__aeabi_ddiv+0xe2>
 80013e8:	e1c4      	b.n	8001774 <__aeabi_ddiv+0x46c>
 80013ea:	d100      	bne.n	80013ee <__aeabi_ddiv+0xe6>
 80013ec:	e1bf      	b.n	800176e <__aeabi_ddiv+0x466>
 80013ee:	2301      	movs	r3, #1
 80013f0:	425b      	negs	r3, r3
 80013f2:	469c      	mov	ip, r3
 80013f4:	002e      	movs	r6, r5
 80013f6:	4640      	mov	r0, r8
 80013f8:	2500      	movs	r5, #0
 80013fa:	44e3      	add	fp, ip
 80013fc:	0223      	lsls	r3, r4, #8
 80013fe:	0e0c      	lsrs	r4, r1, #24
 8001400:	431c      	orrs	r4, r3
 8001402:	0c1b      	lsrs	r3, r3, #16
 8001404:	4699      	mov	r9, r3
 8001406:	0423      	lsls	r3, r4, #16
 8001408:	020a      	lsls	r2, r1, #8
 800140a:	0c1f      	lsrs	r7, r3, #16
 800140c:	4649      	mov	r1, r9
 800140e:	9200      	str	r2, [sp, #0]
 8001410:	9701      	str	r7, [sp, #4]
 8001412:	f7fe feff 	bl	8000214 <__aeabi_uidivmod>
 8001416:	0002      	movs	r2, r0
 8001418:	437a      	muls	r2, r7
 800141a:	040b      	lsls	r3, r1, #16
 800141c:	0c31      	lsrs	r1, r6, #16
 800141e:	4680      	mov	r8, r0
 8001420:	4319      	orrs	r1, r3
 8001422:	428a      	cmp	r2, r1
 8001424:	d907      	bls.n	8001436 <__aeabi_ddiv+0x12e>
 8001426:	2301      	movs	r3, #1
 8001428:	425b      	negs	r3, r3
 800142a:	469c      	mov	ip, r3
 800142c:	1909      	adds	r1, r1, r4
 800142e:	44e0      	add	r8, ip
 8001430:	428c      	cmp	r4, r1
 8001432:	d800      	bhi.n	8001436 <__aeabi_ddiv+0x12e>
 8001434:	e201      	b.n	800183a <__aeabi_ddiv+0x532>
 8001436:	1a88      	subs	r0, r1, r2
 8001438:	4649      	mov	r1, r9
 800143a:	f7fe feeb 	bl	8000214 <__aeabi_uidivmod>
 800143e:	9a01      	ldr	r2, [sp, #4]
 8001440:	0436      	lsls	r6, r6, #16
 8001442:	4342      	muls	r2, r0
 8001444:	0409      	lsls	r1, r1, #16
 8001446:	0c36      	lsrs	r6, r6, #16
 8001448:	0003      	movs	r3, r0
 800144a:	430e      	orrs	r6, r1
 800144c:	42b2      	cmp	r2, r6
 800144e:	d904      	bls.n	800145a <__aeabi_ddiv+0x152>
 8001450:	1936      	adds	r6, r6, r4
 8001452:	3b01      	subs	r3, #1
 8001454:	42b4      	cmp	r4, r6
 8001456:	d800      	bhi.n	800145a <__aeabi_ddiv+0x152>
 8001458:	e1e9      	b.n	800182e <__aeabi_ddiv+0x526>
 800145a:	1ab0      	subs	r0, r6, r2
 800145c:	4642      	mov	r2, r8
 800145e:	9e00      	ldr	r6, [sp, #0]
 8001460:	0412      	lsls	r2, r2, #16
 8001462:	431a      	orrs	r2, r3
 8001464:	0c33      	lsrs	r3, r6, #16
 8001466:	001f      	movs	r7, r3
 8001468:	0c11      	lsrs	r1, r2, #16
 800146a:	4690      	mov	r8, r2
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	0413      	lsls	r3, r2, #16
 8001470:	0432      	lsls	r2, r6, #16
 8001472:	0c16      	lsrs	r6, r2, #16
 8001474:	0032      	movs	r2, r6
 8001476:	0c1b      	lsrs	r3, r3, #16
 8001478:	435a      	muls	r2, r3
 800147a:	9603      	str	r6, [sp, #12]
 800147c:	437b      	muls	r3, r7
 800147e:	434e      	muls	r6, r1
 8001480:	4379      	muls	r1, r7
 8001482:	0c17      	lsrs	r7, r2, #16
 8001484:	46bc      	mov	ip, r7
 8001486:	199b      	adds	r3, r3, r6
 8001488:	4463      	add	r3, ip
 800148a:	429e      	cmp	r6, r3
 800148c:	d903      	bls.n	8001496 <__aeabi_ddiv+0x18e>
 800148e:	2680      	movs	r6, #128	; 0x80
 8001490:	0276      	lsls	r6, r6, #9
 8001492:	46b4      	mov	ip, r6
 8001494:	4461      	add	r1, ip
 8001496:	0c1e      	lsrs	r6, r3, #16
 8001498:	1871      	adds	r1, r6, r1
 800149a:	0416      	lsls	r6, r2, #16
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	0c36      	lsrs	r6, r6, #16
 80014a0:	199e      	adds	r6, r3, r6
 80014a2:	4288      	cmp	r0, r1
 80014a4:	d302      	bcc.n	80014ac <__aeabi_ddiv+0x1a4>
 80014a6:	d112      	bne.n	80014ce <__aeabi_ddiv+0x1c6>
 80014a8:	42b5      	cmp	r5, r6
 80014aa:	d210      	bcs.n	80014ce <__aeabi_ddiv+0x1c6>
 80014ac:	4643      	mov	r3, r8
 80014ae:	1e5a      	subs	r2, r3, #1
 80014b0:	9b00      	ldr	r3, [sp, #0]
 80014b2:	469c      	mov	ip, r3
 80014b4:	4465      	add	r5, ip
 80014b6:	001f      	movs	r7, r3
 80014b8:	429d      	cmp	r5, r3
 80014ba:	419b      	sbcs	r3, r3
 80014bc:	425b      	negs	r3, r3
 80014be:	191b      	adds	r3, r3, r4
 80014c0:	18c0      	adds	r0, r0, r3
 80014c2:	4284      	cmp	r4, r0
 80014c4:	d200      	bcs.n	80014c8 <__aeabi_ddiv+0x1c0>
 80014c6:	e19e      	b.n	8001806 <__aeabi_ddiv+0x4fe>
 80014c8:	d100      	bne.n	80014cc <__aeabi_ddiv+0x1c4>
 80014ca:	e199      	b.n	8001800 <__aeabi_ddiv+0x4f8>
 80014cc:	4690      	mov	r8, r2
 80014ce:	1bae      	subs	r6, r5, r6
 80014d0:	42b5      	cmp	r5, r6
 80014d2:	41ad      	sbcs	r5, r5
 80014d4:	1a40      	subs	r0, r0, r1
 80014d6:	426d      	negs	r5, r5
 80014d8:	1b40      	subs	r0, r0, r5
 80014da:	4284      	cmp	r4, r0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_ddiv+0x1d8>
 80014de:	e1d2      	b.n	8001886 <__aeabi_ddiv+0x57e>
 80014e0:	4649      	mov	r1, r9
 80014e2:	f7fe fe97 	bl	8000214 <__aeabi_uidivmod>
 80014e6:	9a01      	ldr	r2, [sp, #4]
 80014e8:	040b      	lsls	r3, r1, #16
 80014ea:	4342      	muls	r2, r0
 80014ec:	0c31      	lsrs	r1, r6, #16
 80014ee:	0005      	movs	r5, r0
 80014f0:	4319      	orrs	r1, r3
 80014f2:	428a      	cmp	r2, r1
 80014f4:	d900      	bls.n	80014f8 <__aeabi_ddiv+0x1f0>
 80014f6:	e16c      	b.n	80017d2 <__aeabi_ddiv+0x4ca>
 80014f8:	1a88      	subs	r0, r1, r2
 80014fa:	4649      	mov	r1, r9
 80014fc:	f7fe fe8a 	bl	8000214 <__aeabi_uidivmod>
 8001500:	9a01      	ldr	r2, [sp, #4]
 8001502:	0436      	lsls	r6, r6, #16
 8001504:	4342      	muls	r2, r0
 8001506:	0409      	lsls	r1, r1, #16
 8001508:	0c36      	lsrs	r6, r6, #16
 800150a:	0003      	movs	r3, r0
 800150c:	430e      	orrs	r6, r1
 800150e:	42b2      	cmp	r2, r6
 8001510:	d900      	bls.n	8001514 <__aeabi_ddiv+0x20c>
 8001512:	e153      	b.n	80017bc <__aeabi_ddiv+0x4b4>
 8001514:	9803      	ldr	r0, [sp, #12]
 8001516:	1ab6      	subs	r6, r6, r2
 8001518:	0002      	movs	r2, r0
 800151a:	042d      	lsls	r5, r5, #16
 800151c:	431d      	orrs	r5, r3
 800151e:	9f02      	ldr	r7, [sp, #8]
 8001520:	042b      	lsls	r3, r5, #16
 8001522:	0c1b      	lsrs	r3, r3, #16
 8001524:	435a      	muls	r2, r3
 8001526:	437b      	muls	r3, r7
 8001528:	469c      	mov	ip, r3
 800152a:	0c29      	lsrs	r1, r5, #16
 800152c:	4348      	muls	r0, r1
 800152e:	0c13      	lsrs	r3, r2, #16
 8001530:	4484      	add	ip, r0
 8001532:	4463      	add	r3, ip
 8001534:	4379      	muls	r1, r7
 8001536:	4298      	cmp	r0, r3
 8001538:	d903      	bls.n	8001542 <__aeabi_ddiv+0x23a>
 800153a:	2080      	movs	r0, #128	; 0x80
 800153c:	0240      	lsls	r0, r0, #9
 800153e:	4684      	mov	ip, r0
 8001540:	4461      	add	r1, ip
 8001542:	0c18      	lsrs	r0, r3, #16
 8001544:	0412      	lsls	r2, r2, #16
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	0c12      	lsrs	r2, r2, #16
 800154a:	1840      	adds	r0, r0, r1
 800154c:	189b      	adds	r3, r3, r2
 800154e:	4286      	cmp	r6, r0
 8001550:	d200      	bcs.n	8001554 <__aeabi_ddiv+0x24c>
 8001552:	e100      	b.n	8001756 <__aeabi_ddiv+0x44e>
 8001554:	d100      	bne.n	8001558 <__aeabi_ddiv+0x250>
 8001556:	e0fb      	b.n	8001750 <__aeabi_ddiv+0x448>
 8001558:	2301      	movs	r3, #1
 800155a:	431d      	orrs	r5, r3
 800155c:	4b49      	ldr	r3, [pc, #292]	; (8001684 <__aeabi_ddiv+0x37c>)
 800155e:	445b      	add	r3, fp
 8001560:	2b00      	cmp	r3, #0
 8001562:	dc00      	bgt.n	8001566 <__aeabi_ddiv+0x25e>
 8001564:	e0aa      	b.n	80016bc <__aeabi_ddiv+0x3b4>
 8001566:	076a      	lsls	r2, r5, #29
 8001568:	d000      	beq.n	800156c <__aeabi_ddiv+0x264>
 800156a:	e13d      	b.n	80017e8 <__aeabi_ddiv+0x4e0>
 800156c:	08e9      	lsrs	r1, r5, #3
 800156e:	4642      	mov	r2, r8
 8001570:	01d2      	lsls	r2, r2, #7
 8001572:	d506      	bpl.n	8001582 <__aeabi_ddiv+0x27a>
 8001574:	4642      	mov	r2, r8
 8001576:	4b44      	ldr	r3, [pc, #272]	; (8001688 <__aeabi_ddiv+0x380>)
 8001578:	401a      	ands	r2, r3
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	4690      	mov	r8, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	445b      	add	r3, fp
 8001582:	4a42      	ldr	r2, [pc, #264]	; (800168c <__aeabi_ddiv+0x384>)
 8001584:	4293      	cmp	r3, r2
 8001586:	dd00      	ble.n	800158a <__aeabi_ddiv+0x282>
 8001588:	e723      	b.n	80013d2 <__aeabi_ddiv+0xca>
 800158a:	4642      	mov	r2, r8
 800158c:	055b      	lsls	r3, r3, #21
 800158e:	0755      	lsls	r5, r2, #29
 8001590:	0252      	lsls	r2, r2, #9
 8001592:	430d      	orrs	r5, r1
 8001594:	0b12      	lsrs	r2, r2, #12
 8001596:	0d5b      	lsrs	r3, r3, #21
 8001598:	e70d      	b.n	80013b6 <__aeabi_ddiv+0xae>
 800159a:	4651      	mov	r1, sl
 800159c:	4321      	orrs	r1, r4
 800159e:	d100      	bne.n	80015a2 <__aeabi_ddiv+0x29a>
 80015a0:	e07c      	b.n	800169c <__aeabi_ddiv+0x394>
 80015a2:	2c00      	cmp	r4, #0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_ddiv+0x2a0>
 80015a6:	e0fb      	b.n	80017a0 <__aeabi_ddiv+0x498>
 80015a8:	0020      	movs	r0, r4
 80015aa:	f000 fe67 	bl	800227c <__clzsi2>
 80015ae:	0002      	movs	r2, r0
 80015b0:	3a0b      	subs	r2, #11
 80015b2:	231d      	movs	r3, #29
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	4652      	mov	r2, sl
 80015b8:	0001      	movs	r1, r0
 80015ba:	40da      	lsrs	r2, r3
 80015bc:	4653      	mov	r3, sl
 80015be:	3908      	subs	r1, #8
 80015c0:	408b      	lsls	r3, r1
 80015c2:	408c      	lsls	r4, r1
 80015c4:	0019      	movs	r1, r3
 80015c6:	4314      	orrs	r4, r2
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <__aeabi_ddiv+0x388>)
 80015ca:	4458      	add	r0, fp
 80015cc:	469b      	mov	fp, r3
 80015ce:	4483      	add	fp, r0
 80015d0:	2000      	movs	r0, #0
 80015d2:	e6d9      	b.n	8001388 <__aeabi_ddiv+0x80>
 80015d4:	0003      	movs	r3, r0
 80015d6:	4323      	orrs	r3, r4
 80015d8:	4698      	mov	r8, r3
 80015da:	d044      	beq.n	8001666 <__aeabi_ddiv+0x35e>
 80015dc:	2c00      	cmp	r4, #0
 80015de:	d100      	bne.n	80015e2 <__aeabi_ddiv+0x2da>
 80015e0:	e0cf      	b.n	8001782 <__aeabi_ddiv+0x47a>
 80015e2:	0020      	movs	r0, r4
 80015e4:	f000 fe4a 	bl	800227c <__clzsi2>
 80015e8:	0001      	movs	r1, r0
 80015ea:	0002      	movs	r2, r0
 80015ec:	390b      	subs	r1, #11
 80015ee:	231d      	movs	r3, #29
 80015f0:	1a5b      	subs	r3, r3, r1
 80015f2:	4649      	mov	r1, r9
 80015f4:	0010      	movs	r0, r2
 80015f6:	40d9      	lsrs	r1, r3
 80015f8:	3808      	subs	r0, #8
 80015fa:	4084      	lsls	r4, r0
 80015fc:	000b      	movs	r3, r1
 80015fe:	464d      	mov	r5, r9
 8001600:	4323      	orrs	r3, r4
 8001602:	4698      	mov	r8, r3
 8001604:	4085      	lsls	r5, r0
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <__aeabi_ddiv+0x38c>)
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	469b      	mov	fp, r3
 800160c:	2300      	movs	r3, #0
 800160e:	4699      	mov	r9, r3
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	e69e      	b.n	8001352 <__aeabi_ddiv+0x4a>
 8001614:	0002      	movs	r2, r0
 8001616:	4322      	orrs	r2, r4
 8001618:	4690      	mov	r8, r2
 800161a:	d11d      	bne.n	8001658 <__aeabi_ddiv+0x350>
 800161c:	2208      	movs	r2, #8
 800161e:	469b      	mov	fp, r3
 8001620:	2302      	movs	r3, #2
 8001622:	2500      	movs	r5, #0
 8001624:	4691      	mov	r9, r2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	e693      	b.n	8001352 <__aeabi_ddiv+0x4a>
 800162a:	4651      	mov	r1, sl
 800162c:	4321      	orrs	r1, r4
 800162e:	d109      	bne.n	8001644 <__aeabi_ddiv+0x33c>
 8001630:	2302      	movs	r3, #2
 8001632:	464a      	mov	r2, r9
 8001634:	431a      	orrs	r2, r3
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <__aeabi_ddiv+0x390>)
 8001638:	4691      	mov	r9, r2
 800163a:	469c      	mov	ip, r3
 800163c:	2400      	movs	r4, #0
 800163e:	2002      	movs	r0, #2
 8001640:	44e3      	add	fp, ip
 8001642:	e6a1      	b.n	8001388 <__aeabi_ddiv+0x80>
 8001644:	2303      	movs	r3, #3
 8001646:	464a      	mov	r2, r9
 8001648:	431a      	orrs	r2, r3
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <__aeabi_ddiv+0x390>)
 800164c:	4691      	mov	r9, r2
 800164e:	469c      	mov	ip, r3
 8001650:	4651      	mov	r1, sl
 8001652:	2003      	movs	r0, #3
 8001654:	44e3      	add	fp, ip
 8001656:	e697      	b.n	8001388 <__aeabi_ddiv+0x80>
 8001658:	220c      	movs	r2, #12
 800165a:	469b      	mov	fp, r3
 800165c:	2303      	movs	r3, #3
 800165e:	46a0      	mov	r8, r4
 8001660:	4691      	mov	r9, r2
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	e675      	b.n	8001352 <__aeabi_ddiv+0x4a>
 8001666:	2304      	movs	r3, #4
 8001668:	4699      	mov	r9, r3
 800166a:	2300      	movs	r3, #0
 800166c:	469b      	mov	fp, r3
 800166e:	3301      	adds	r3, #1
 8001670:	2500      	movs	r5, #0
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	e66d      	b.n	8001352 <__aeabi_ddiv+0x4a>
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	000007ff 	.word	0x000007ff
 800167c:	fffffc01 	.word	0xfffffc01
 8001680:	0800df8c 	.word	0x0800df8c
 8001684:	000003ff 	.word	0x000003ff
 8001688:	feffffff 	.word	0xfeffffff
 800168c:	000007fe 	.word	0x000007fe
 8001690:	000003f3 	.word	0x000003f3
 8001694:	fffffc0d 	.word	0xfffffc0d
 8001698:	fffff801 	.word	0xfffff801
 800169c:	464a      	mov	r2, r9
 800169e:	2301      	movs	r3, #1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	4691      	mov	r9, r2
 80016a4:	2400      	movs	r4, #0
 80016a6:	2001      	movs	r0, #1
 80016a8:	e66e      	b.n	8001388 <__aeabi_ddiv+0x80>
 80016aa:	2300      	movs	r3, #0
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	469a      	mov	sl, r3
 80016b0:	2500      	movs	r5, #0
 80016b2:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <__aeabi_ddiv+0x5cc>)
 80016b4:	0312      	lsls	r2, r2, #12
 80016b6:	e67e      	b.n	80013b6 <__aeabi_ddiv+0xae>
 80016b8:	2501      	movs	r5, #1
 80016ba:	426d      	negs	r5, r5
 80016bc:	2201      	movs	r2, #1
 80016be:	1ad2      	subs	r2, r2, r3
 80016c0:	2a38      	cmp	r2, #56	; 0x38
 80016c2:	dd00      	ble.n	80016c6 <__aeabi_ddiv+0x3be>
 80016c4:	e674      	b.n	80013b0 <__aeabi_ddiv+0xa8>
 80016c6:	2a1f      	cmp	r2, #31
 80016c8:	dc00      	bgt.n	80016cc <__aeabi_ddiv+0x3c4>
 80016ca:	e0bd      	b.n	8001848 <__aeabi_ddiv+0x540>
 80016cc:	211f      	movs	r1, #31
 80016ce:	4249      	negs	r1, r1
 80016d0:	1acb      	subs	r3, r1, r3
 80016d2:	4641      	mov	r1, r8
 80016d4:	40d9      	lsrs	r1, r3
 80016d6:	000b      	movs	r3, r1
 80016d8:	2a20      	cmp	r2, #32
 80016da:	d004      	beq.n	80016e6 <__aeabi_ddiv+0x3de>
 80016dc:	4641      	mov	r1, r8
 80016de:	4a7e      	ldr	r2, [pc, #504]	; (80018d8 <__aeabi_ddiv+0x5d0>)
 80016e0:	445a      	add	r2, fp
 80016e2:	4091      	lsls	r1, r2
 80016e4:	430d      	orrs	r5, r1
 80016e6:	0029      	movs	r1, r5
 80016e8:	1e4a      	subs	r2, r1, #1
 80016ea:	4191      	sbcs	r1, r2
 80016ec:	4319      	orrs	r1, r3
 80016ee:	2307      	movs	r3, #7
 80016f0:	001d      	movs	r5, r3
 80016f2:	2200      	movs	r2, #0
 80016f4:	400d      	ands	r5, r1
 80016f6:	420b      	tst	r3, r1
 80016f8:	d100      	bne.n	80016fc <__aeabi_ddiv+0x3f4>
 80016fa:	e0d0      	b.n	800189e <__aeabi_ddiv+0x596>
 80016fc:	220f      	movs	r2, #15
 80016fe:	2300      	movs	r3, #0
 8001700:	400a      	ands	r2, r1
 8001702:	2a04      	cmp	r2, #4
 8001704:	d100      	bne.n	8001708 <__aeabi_ddiv+0x400>
 8001706:	e0c7      	b.n	8001898 <__aeabi_ddiv+0x590>
 8001708:	1d0a      	adds	r2, r1, #4
 800170a:	428a      	cmp	r2, r1
 800170c:	4189      	sbcs	r1, r1
 800170e:	4249      	negs	r1, r1
 8001710:	185b      	adds	r3, r3, r1
 8001712:	0011      	movs	r1, r2
 8001714:	021a      	lsls	r2, r3, #8
 8001716:	d400      	bmi.n	800171a <__aeabi_ddiv+0x412>
 8001718:	e0be      	b.n	8001898 <__aeabi_ddiv+0x590>
 800171a:	2301      	movs	r3, #1
 800171c:	2200      	movs	r2, #0
 800171e:	2500      	movs	r5, #0
 8001720:	e649      	b.n	80013b6 <__aeabi_ddiv+0xae>
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	4643      	mov	r3, r8
 8001726:	0312      	lsls	r2, r2, #12
 8001728:	4213      	tst	r3, r2
 800172a:	d008      	beq.n	800173e <__aeabi_ddiv+0x436>
 800172c:	4214      	tst	r4, r2
 800172e:	d106      	bne.n	800173e <__aeabi_ddiv+0x436>
 8001730:	4322      	orrs	r2, r4
 8001732:	0312      	lsls	r2, r2, #12
 8001734:	46ba      	mov	sl, r7
 8001736:	000d      	movs	r5, r1
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <__aeabi_ddiv+0x5cc>)
 800173a:	0b12      	lsrs	r2, r2, #12
 800173c:	e63b      	b.n	80013b6 <__aeabi_ddiv+0xae>
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	4643      	mov	r3, r8
 8001742:	0312      	lsls	r2, r2, #12
 8001744:	431a      	orrs	r2, r3
 8001746:	0312      	lsls	r2, r2, #12
 8001748:	46b2      	mov	sl, r6
 800174a:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <__aeabi_ddiv+0x5cc>)
 800174c:	0b12      	lsrs	r2, r2, #12
 800174e:	e632      	b.n	80013b6 <__aeabi_ddiv+0xae>
 8001750:	2b00      	cmp	r3, #0
 8001752:	d100      	bne.n	8001756 <__aeabi_ddiv+0x44e>
 8001754:	e702      	b.n	800155c <__aeabi_ddiv+0x254>
 8001756:	19a6      	adds	r6, r4, r6
 8001758:	1e6a      	subs	r2, r5, #1
 800175a:	42a6      	cmp	r6, r4
 800175c:	d200      	bcs.n	8001760 <__aeabi_ddiv+0x458>
 800175e:	e089      	b.n	8001874 <__aeabi_ddiv+0x56c>
 8001760:	4286      	cmp	r6, r0
 8001762:	d200      	bcs.n	8001766 <__aeabi_ddiv+0x45e>
 8001764:	e09f      	b.n	80018a6 <__aeabi_ddiv+0x59e>
 8001766:	d100      	bne.n	800176a <__aeabi_ddiv+0x462>
 8001768:	e0af      	b.n	80018ca <__aeabi_ddiv+0x5c2>
 800176a:	0015      	movs	r5, r2
 800176c:	e6f4      	b.n	8001558 <__aeabi_ddiv+0x250>
 800176e:	42a9      	cmp	r1, r5
 8001770:	d900      	bls.n	8001774 <__aeabi_ddiv+0x46c>
 8001772:	e63c      	b.n	80013ee <__aeabi_ddiv+0xe6>
 8001774:	4643      	mov	r3, r8
 8001776:	07de      	lsls	r6, r3, #31
 8001778:	0858      	lsrs	r0, r3, #1
 800177a:	086b      	lsrs	r3, r5, #1
 800177c:	431e      	orrs	r6, r3
 800177e:	07ed      	lsls	r5, r5, #31
 8001780:	e63c      	b.n	80013fc <__aeabi_ddiv+0xf4>
 8001782:	f000 fd7b 	bl	800227c <__clzsi2>
 8001786:	0001      	movs	r1, r0
 8001788:	0002      	movs	r2, r0
 800178a:	3115      	adds	r1, #21
 800178c:	3220      	adds	r2, #32
 800178e:	291c      	cmp	r1, #28
 8001790:	dc00      	bgt.n	8001794 <__aeabi_ddiv+0x48c>
 8001792:	e72c      	b.n	80015ee <__aeabi_ddiv+0x2e6>
 8001794:	464b      	mov	r3, r9
 8001796:	3808      	subs	r0, #8
 8001798:	4083      	lsls	r3, r0
 800179a:	2500      	movs	r5, #0
 800179c:	4698      	mov	r8, r3
 800179e:	e732      	b.n	8001606 <__aeabi_ddiv+0x2fe>
 80017a0:	f000 fd6c 	bl	800227c <__clzsi2>
 80017a4:	0003      	movs	r3, r0
 80017a6:	001a      	movs	r2, r3
 80017a8:	3215      	adds	r2, #21
 80017aa:	3020      	adds	r0, #32
 80017ac:	2a1c      	cmp	r2, #28
 80017ae:	dc00      	bgt.n	80017b2 <__aeabi_ddiv+0x4aa>
 80017b0:	e6ff      	b.n	80015b2 <__aeabi_ddiv+0x2aa>
 80017b2:	4654      	mov	r4, sl
 80017b4:	3b08      	subs	r3, #8
 80017b6:	2100      	movs	r1, #0
 80017b8:	409c      	lsls	r4, r3
 80017ba:	e705      	b.n	80015c8 <__aeabi_ddiv+0x2c0>
 80017bc:	1936      	adds	r6, r6, r4
 80017be:	3b01      	subs	r3, #1
 80017c0:	42b4      	cmp	r4, r6
 80017c2:	d900      	bls.n	80017c6 <__aeabi_ddiv+0x4be>
 80017c4:	e6a6      	b.n	8001514 <__aeabi_ddiv+0x20c>
 80017c6:	42b2      	cmp	r2, r6
 80017c8:	d800      	bhi.n	80017cc <__aeabi_ddiv+0x4c4>
 80017ca:	e6a3      	b.n	8001514 <__aeabi_ddiv+0x20c>
 80017cc:	1e83      	subs	r3, r0, #2
 80017ce:	1936      	adds	r6, r6, r4
 80017d0:	e6a0      	b.n	8001514 <__aeabi_ddiv+0x20c>
 80017d2:	1909      	adds	r1, r1, r4
 80017d4:	3d01      	subs	r5, #1
 80017d6:	428c      	cmp	r4, r1
 80017d8:	d900      	bls.n	80017dc <__aeabi_ddiv+0x4d4>
 80017da:	e68d      	b.n	80014f8 <__aeabi_ddiv+0x1f0>
 80017dc:	428a      	cmp	r2, r1
 80017de:	d800      	bhi.n	80017e2 <__aeabi_ddiv+0x4da>
 80017e0:	e68a      	b.n	80014f8 <__aeabi_ddiv+0x1f0>
 80017e2:	1e85      	subs	r5, r0, #2
 80017e4:	1909      	adds	r1, r1, r4
 80017e6:	e687      	b.n	80014f8 <__aeabi_ddiv+0x1f0>
 80017e8:	220f      	movs	r2, #15
 80017ea:	402a      	ands	r2, r5
 80017ec:	2a04      	cmp	r2, #4
 80017ee:	d100      	bne.n	80017f2 <__aeabi_ddiv+0x4ea>
 80017f0:	e6bc      	b.n	800156c <__aeabi_ddiv+0x264>
 80017f2:	1d29      	adds	r1, r5, #4
 80017f4:	42a9      	cmp	r1, r5
 80017f6:	41ad      	sbcs	r5, r5
 80017f8:	426d      	negs	r5, r5
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	44a8      	add	r8, r5
 80017fe:	e6b6      	b.n	800156e <__aeabi_ddiv+0x266>
 8001800:	42af      	cmp	r7, r5
 8001802:	d900      	bls.n	8001806 <__aeabi_ddiv+0x4fe>
 8001804:	e662      	b.n	80014cc <__aeabi_ddiv+0x1c4>
 8001806:	4281      	cmp	r1, r0
 8001808:	d804      	bhi.n	8001814 <__aeabi_ddiv+0x50c>
 800180a:	d000      	beq.n	800180e <__aeabi_ddiv+0x506>
 800180c:	e65e      	b.n	80014cc <__aeabi_ddiv+0x1c4>
 800180e:	42ae      	cmp	r6, r5
 8001810:	d800      	bhi.n	8001814 <__aeabi_ddiv+0x50c>
 8001812:	e65b      	b.n	80014cc <__aeabi_ddiv+0x1c4>
 8001814:	2302      	movs	r3, #2
 8001816:	425b      	negs	r3, r3
 8001818:	469c      	mov	ip, r3
 800181a:	9b00      	ldr	r3, [sp, #0]
 800181c:	44e0      	add	r8, ip
 800181e:	469c      	mov	ip, r3
 8001820:	4465      	add	r5, ip
 8001822:	429d      	cmp	r5, r3
 8001824:	419b      	sbcs	r3, r3
 8001826:	425b      	negs	r3, r3
 8001828:	191b      	adds	r3, r3, r4
 800182a:	18c0      	adds	r0, r0, r3
 800182c:	e64f      	b.n	80014ce <__aeabi_ddiv+0x1c6>
 800182e:	42b2      	cmp	r2, r6
 8001830:	d800      	bhi.n	8001834 <__aeabi_ddiv+0x52c>
 8001832:	e612      	b.n	800145a <__aeabi_ddiv+0x152>
 8001834:	1e83      	subs	r3, r0, #2
 8001836:	1936      	adds	r6, r6, r4
 8001838:	e60f      	b.n	800145a <__aeabi_ddiv+0x152>
 800183a:	428a      	cmp	r2, r1
 800183c:	d800      	bhi.n	8001840 <__aeabi_ddiv+0x538>
 800183e:	e5fa      	b.n	8001436 <__aeabi_ddiv+0x12e>
 8001840:	1e83      	subs	r3, r0, #2
 8001842:	4698      	mov	r8, r3
 8001844:	1909      	adds	r1, r1, r4
 8001846:	e5f6      	b.n	8001436 <__aeabi_ddiv+0x12e>
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <__aeabi_ddiv+0x5d4>)
 800184a:	0028      	movs	r0, r5
 800184c:	445b      	add	r3, fp
 800184e:	4641      	mov	r1, r8
 8001850:	409d      	lsls	r5, r3
 8001852:	4099      	lsls	r1, r3
 8001854:	40d0      	lsrs	r0, r2
 8001856:	1e6b      	subs	r3, r5, #1
 8001858:	419d      	sbcs	r5, r3
 800185a:	4643      	mov	r3, r8
 800185c:	4301      	orrs	r1, r0
 800185e:	4329      	orrs	r1, r5
 8001860:	40d3      	lsrs	r3, r2
 8001862:	074a      	lsls	r2, r1, #29
 8001864:	d100      	bne.n	8001868 <__aeabi_ddiv+0x560>
 8001866:	e755      	b.n	8001714 <__aeabi_ddiv+0x40c>
 8001868:	220f      	movs	r2, #15
 800186a:	400a      	ands	r2, r1
 800186c:	2a04      	cmp	r2, #4
 800186e:	d000      	beq.n	8001872 <__aeabi_ddiv+0x56a>
 8001870:	e74a      	b.n	8001708 <__aeabi_ddiv+0x400>
 8001872:	e74f      	b.n	8001714 <__aeabi_ddiv+0x40c>
 8001874:	0015      	movs	r5, r2
 8001876:	4286      	cmp	r6, r0
 8001878:	d000      	beq.n	800187c <__aeabi_ddiv+0x574>
 800187a:	e66d      	b.n	8001558 <__aeabi_ddiv+0x250>
 800187c:	9a00      	ldr	r2, [sp, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d000      	beq.n	8001884 <__aeabi_ddiv+0x57c>
 8001882:	e669      	b.n	8001558 <__aeabi_ddiv+0x250>
 8001884:	e66a      	b.n	800155c <__aeabi_ddiv+0x254>
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <__aeabi_ddiv+0x5d8>)
 8001888:	445b      	add	r3, fp
 800188a:	2b00      	cmp	r3, #0
 800188c:	dc00      	bgt.n	8001890 <__aeabi_ddiv+0x588>
 800188e:	e713      	b.n	80016b8 <__aeabi_ddiv+0x3b0>
 8001890:	2501      	movs	r5, #1
 8001892:	2100      	movs	r1, #0
 8001894:	44a8      	add	r8, r5
 8001896:	e66a      	b.n	800156e <__aeabi_ddiv+0x266>
 8001898:	075d      	lsls	r5, r3, #29
 800189a:	025b      	lsls	r3, r3, #9
 800189c:	0b1a      	lsrs	r2, r3, #12
 800189e:	08c9      	lsrs	r1, r1, #3
 80018a0:	2300      	movs	r3, #0
 80018a2:	430d      	orrs	r5, r1
 80018a4:	e587      	b.n	80013b6 <__aeabi_ddiv+0xae>
 80018a6:	9900      	ldr	r1, [sp, #0]
 80018a8:	3d02      	subs	r5, #2
 80018aa:	004a      	lsls	r2, r1, #1
 80018ac:	428a      	cmp	r2, r1
 80018ae:	41bf      	sbcs	r7, r7
 80018b0:	427f      	negs	r7, r7
 80018b2:	193f      	adds	r7, r7, r4
 80018b4:	19f6      	adds	r6, r6, r7
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	e7dd      	b.n	8001876 <__aeabi_ddiv+0x56e>
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	4643      	mov	r3, r8
 80018be:	0312      	lsls	r2, r2, #12
 80018c0:	431a      	orrs	r2, r3
 80018c2:	0312      	lsls	r2, r2, #12
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <__aeabi_ddiv+0x5cc>)
 80018c6:	0b12      	lsrs	r2, r2, #12
 80018c8:	e575      	b.n	80013b6 <__aeabi_ddiv+0xae>
 80018ca:	9900      	ldr	r1, [sp, #0]
 80018cc:	4299      	cmp	r1, r3
 80018ce:	d3ea      	bcc.n	80018a6 <__aeabi_ddiv+0x59e>
 80018d0:	0015      	movs	r5, r2
 80018d2:	e7d3      	b.n	800187c <__aeabi_ddiv+0x574>
 80018d4:	000007ff 	.word	0x000007ff
 80018d8:	0000043e 	.word	0x0000043e
 80018dc:	0000041e 	.word	0x0000041e
 80018e0:	000003ff 	.word	0x000003ff

080018e4 <__eqdf2>:
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	464e      	mov	r6, r9
 80018e8:	4645      	mov	r5, r8
 80018ea:	46de      	mov	lr, fp
 80018ec:	4657      	mov	r7, sl
 80018ee:	4690      	mov	r8, r2
 80018f0:	b5e0      	push	{r5, r6, r7, lr}
 80018f2:	0017      	movs	r7, r2
 80018f4:	031a      	lsls	r2, r3, #12
 80018f6:	0b12      	lsrs	r2, r2, #12
 80018f8:	0005      	movs	r5, r0
 80018fa:	4684      	mov	ip, r0
 80018fc:	4819      	ldr	r0, [pc, #100]	; (8001964 <__eqdf2+0x80>)
 80018fe:	030e      	lsls	r6, r1, #12
 8001900:	004c      	lsls	r4, r1, #1
 8001902:	4691      	mov	r9, r2
 8001904:	005a      	lsls	r2, r3, #1
 8001906:	0fdb      	lsrs	r3, r3, #31
 8001908:	469b      	mov	fp, r3
 800190a:	0b36      	lsrs	r6, r6, #12
 800190c:	0d64      	lsrs	r4, r4, #21
 800190e:	0fc9      	lsrs	r1, r1, #31
 8001910:	0d52      	lsrs	r2, r2, #21
 8001912:	4284      	cmp	r4, r0
 8001914:	d019      	beq.n	800194a <__eqdf2+0x66>
 8001916:	4282      	cmp	r2, r0
 8001918:	d010      	beq.n	800193c <__eqdf2+0x58>
 800191a:	2001      	movs	r0, #1
 800191c:	4294      	cmp	r4, r2
 800191e:	d10e      	bne.n	800193e <__eqdf2+0x5a>
 8001920:	454e      	cmp	r6, r9
 8001922:	d10c      	bne.n	800193e <__eqdf2+0x5a>
 8001924:	2001      	movs	r0, #1
 8001926:	45c4      	cmp	ip, r8
 8001928:	d109      	bne.n	800193e <__eqdf2+0x5a>
 800192a:	4559      	cmp	r1, fp
 800192c:	d017      	beq.n	800195e <__eqdf2+0x7a>
 800192e:	2c00      	cmp	r4, #0
 8001930:	d105      	bne.n	800193e <__eqdf2+0x5a>
 8001932:	0030      	movs	r0, r6
 8001934:	4328      	orrs	r0, r5
 8001936:	1e43      	subs	r3, r0, #1
 8001938:	4198      	sbcs	r0, r3
 800193a:	e000      	b.n	800193e <__eqdf2+0x5a>
 800193c:	2001      	movs	r0, #1
 800193e:	bcf0      	pop	{r4, r5, r6, r7}
 8001940:	46bb      	mov	fp, r7
 8001942:	46b2      	mov	sl, r6
 8001944:	46a9      	mov	r9, r5
 8001946:	46a0      	mov	r8, r4
 8001948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194a:	0033      	movs	r3, r6
 800194c:	2001      	movs	r0, #1
 800194e:	432b      	orrs	r3, r5
 8001950:	d1f5      	bne.n	800193e <__eqdf2+0x5a>
 8001952:	42a2      	cmp	r2, r4
 8001954:	d1f3      	bne.n	800193e <__eqdf2+0x5a>
 8001956:	464b      	mov	r3, r9
 8001958:	433b      	orrs	r3, r7
 800195a:	d1f0      	bne.n	800193e <__eqdf2+0x5a>
 800195c:	e7e2      	b.n	8001924 <__eqdf2+0x40>
 800195e:	2000      	movs	r0, #0
 8001960:	e7ed      	b.n	800193e <__eqdf2+0x5a>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	000007ff 	.word	0x000007ff

08001968 <__gedf2>:
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	4647      	mov	r7, r8
 800196c:	46ce      	mov	lr, r9
 800196e:	0004      	movs	r4, r0
 8001970:	0018      	movs	r0, r3
 8001972:	0016      	movs	r6, r2
 8001974:	031b      	lsls	r3, r3, #12
 8001976:	0b1b      	lsrs	r3, r3, #12
 8001978:	4d2d      	ldr	r5, [pc, #180]	; (8001a30 <__gedf2+0xc8>)
 800197a:	004a      	lsls	r2, r1, #1
 800197c:	4699      	mov	r9, r3
 800197e:	b580      	push	{r7, lr}
 8001980:	0043      	lsls	r3, r0, #1
 8001982:	030f      	lsls	r7, r1, #12
 8001984:	46a4      	mov	ip, r4
 8001986:	46b0      	mov	r8, r6
 8001988:	0b3f      	lsrs	r7, r7, #12
 800198a:	0d52      	lsrs	r2, r2, #21
 800198c:	0fc9      	lsrs	r1, r1, #31
 800198e:	0d5b      	lsrs	r3, r3, #21
 8001990:	0fc0      	lsrs	r0, r0, #31
 8001992:	42aa      	cmp	r2, r5
 8001994:	d021      	beq.n	80019da <__gedf2+0x72>
 8001996:	42ab      	cmp	r3, r5
 8001998:	d013      	beq.n	80019c2 <__gedf2+0x5a>
 800199a:	2a00      	cmp	r2, #0
 800199c:	d122      	bne.n	80019e4 <__gedf2+0x7c>
 800199e:	433c      	orrs	r4, r7
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <__gedf2+0x42>
 80019a4:	464d      	mov	r5, r9
 80019a6:	432e      	orrs	r6, r5
 80019a8:	d022      	beq.n	80019f0 <__gedf2+0x88>
 80019aa:	2c00      	cmp	r4, #0
 80019ac:	d010      	beq.n	80019d0 <__gedf2+0x68>
 80019ae:	4281      	cmp	r1, r0
 80019b0:	d022      	beq.n	80019f8 <__gedf2+0x90>
 80019b2:	2002      	movs	r0, #2
 80019b4:	3901      	subs	r1, #1
 80019b6:	4008      	ands	r0, r1
 80019b8:	3801      	subs	r0, #1
 80019ba:	bcc0      	pop	{r6, r7}
 80019bc:	46b9      	mov	r9, r7
 80019be:	46b0      	mov	r8, r6
 80019c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c2:	464d      	mov	r5, r9
 80019c4:	432e      	orrs	r6, r5
 80019c6:	d129      	bne.n	8001a1c <__gedf2+0xb4>
 80019c8:	2a00      	cmp	r2, #0
 80019ca:	d1f0      	bne.n	80019ae <__gedf2+0x46>
 80019cc:	433c      	orrs	r4, r7
 80019ce:	d1ee      	bne.n	80019ae <__gedf2+0x46>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d1f2      	bne.n	80019ba <__gedf2+0x52>
 80019d4:	2001      	movs	r0, #1
 80019d6:	4240      	negs	r0, r0
 80019d8:	e7ef      	b.n	80019ba <__gedf2+0x52>
 80019da:	003d      	movs	r5, r7
 80019dc:	4325      	orrs	r5, r4
 80019de:	d11d      	bne.n	8001a1c <__gedf2+0xb4>
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d0ee      	beq.n	80019c2 <__gedf2+0x5a>
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e2      	bne.n	80019ae <__gedf2+0x46>
 80019e8:	464c      	mov	r4, r9
 80019ea:	4326      	orrs	r6, r4
 80019ec:	d1df      	bne.n	80019ae <__gedf2+0x46>
 80019ee:	e7e0      	b.n	80019b2 <__gedf2+0x4a>
 80019f0:	2000      	movs	r0, #0
 80019f2:	2c00      	cmp	r4, #0
 80019f4:	d0e1      	beq.n	80019ba <__gedf2+0x52>
 80019f6:	e7dc      	b.n	80019b2 <__gedf2+0x4a>
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dc0a      	bgt.n	8001a12 <__gedf2+0xaa>
 80019fc:	dbe8      	blt.n	80019d0 <__gedf2+0x68>
 80019fe:	454f      	cmp	r7, r9
 8001a00:	d8d7      	bhi.n	80019b2 <__gedf2+0x4a>
 8001a02:	d00e      	beq.n	8001a22 <__gedf2+0xba>
 8001a04:	2000      	movs	r0, #0
 8001a06:	454f      	cmp	r7, r9
 8001a08:	d2d7      	bcs.n	80019ba <__gedf2+0x52>
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	d0e2      	beq.n	80019d4 <__gedf2+0x6c>
 8001a0e:	0008      	movs	r0, r1
 8001a10:	e7d3      	b.n	80019ba <__gedf2+0x52>
 8001a12:	4243      	negs	r3, r0
 8001a14:	4158      	adcs	r0, r3
 8001a16:	0040      	lsls	r0, r0, #1
 8001a18:	3801      	subs	r0, #1
 8001a1a:	e7ce      	b.n	80019ba <__gedf2+0x52>
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	4240      	negs	r0, r0
 8001a20:	e7cb      	b.n	80019ba <__gedf2+0x52>
 8001a22:	45c4      	cmp	ip, r8
 8001a24:	d8c5      	bhi.n	80019b2 <__gedf2+0x4a>
 8001a26:	2000      	movs	r0, #0
 8001a28:	45c4      	cmp	ip, r8
 8001a2a:	d2c6      	bcs.n	80019ba <__gedf2+0x52>
 8001a2c:	e7ed      	b.n	8001a0a <__gedf2+0xa2>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	000007ff 	.word	0x000007ff

08001a34 <__ledf2>:
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	4647      	mov	r7, r8
 8001a38:	46ce      	mov	lr, r9
 8001a3a:	0004      	movs	r4, r0
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	0016      	movs	r6, r2
 8001a40:	031b      	lsls	r3, r3, #12
 8001a42:	0b1b      	lsrs	r3, r3, #12
 8001a44:	4d2c      	ldr	r5, [pc, #176]	; (8001af8 <__ledf2+0xc4>)
 8001a46:	004a      	lsls	r2, r1, #1
 8001a48:	4699      	mov	r9, r3
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	0043      	lsls	r3, r0, #1
 8001a4e:	030f      	lsls	r7, r1, #12
 8001a50:	46a4      	mov	ip, r4
 8001a52:	46b0      	mov	r8, r6
 8001a54:	0b3f      	lsrs	r7, r7, #12
 8001a56:	0d52      	lsrs	r2, r2, #21
 8001a58:	0fc9      	lsrs	r1, r1, #31
 8001a5a:	0d5b      	lsrs	r3, r3, #21
 8001a5c:	0fc0      	lsrs	r0, r0, #31
 8001a5e:	42aa      	cmp	r2, r5
 8001a60:	d00d      	beq.n	8001a7e <__ledf2+0x4a>
 8001a62:	42ab      	cmp	r3, r5
 8001a64:	d010      	beq.n	8001a88 <__ledf2+0x54>
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d127      	bne.n	8001aba <__ledf2+0x86>
 8001a6a:	433c      	orrs	r4, r7
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d111      	bne.n	8001a94 <__ledf2+0x60>
 8001a70:	464d      	mov	r5, r9
 8001a72:	432e      	orrs	r6, r5
 8001a74:	d10e      	bne.n	8001a94 <__ledf2+0x60>
 8001a76:	2000      	movs	r0, #0
 8001a78:	2c00      	cmp	r4, #0
 8001a7a:	d015      	beq.n	8001aa8 <__ledf2+0x74>
 8001a7c:	e00e      	b.n	8001a9c <__ledf2+0x68>
 8001a7e:	003d      	movs	r5, r7
 8001a80:	4325      	orrs	r5, r4
 8001a82:	d110      	bne.n	8001aa6 <__ledf2+0x72>
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d118      	bne.n	8001aba <__ledf2+0x86>
 8001a88:	464d      	mov	r5, r9
 8001a8a:	432e      	orrs	r6, r5
 8001a8c:	d10b      	bne.n	8001aa6 <__ledf2+0x72>
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	d102      	bne.n	8001a98 <__ledf2+0x64>
 8001a92:	433c      	orrs	r4, r7
 8001a94:	2c00      	cmp	r4, #0
 8001a96:	d00b      	beq.n	8001ab0 <__ledf2+0x7c>
 8001a98:	4281      	cmp	r1, r0
 8001a9a:	d014      	beq.n	8001ac6 <__ledf2+0x92>
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	3901      	subs	r1, #1
 8001aa0:	4008      	ands	r0, r1
 8001aa2:	3801      	subs	r0, #1
 8001aa4:	e000      	b.n	8001aa8 <__ledf2+0x74>
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	bcc0      	pop	{r6, r7}
 8001aaa:	46b9      	mov	r9, r7
 8001aac:	46b0      	mov	r8, r6
 8001aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <__ledf2+0x74>
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	4240      	negs	r0, r0
 8001ab8:	e7f6      	b.n	8001aa8 <__ledf2+0x74>
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1ec      	bne.n	8001a98 <__ledf2+0x64>
 8001abe:	464c      	mov	r4, r9
 8001ac0:	4326      	orrs	r6, r4
 8001ac2:	d1e9      	bne.n	8001a98 <__ledf2+0x64>
 8001ac4:	e7ea      	b.n	8001a9c <__ledf2+0x68>
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	dd04      	ble.n	8001ad4 <__ledf2+0xa0>
 8001aca:	4243      	negs	r3, r0
 8001acc:	4158      	adcs	r0, r3
 8001ace:	0040      	lsls	r0, r0, #1
 8001ad0:	3801      	subs	r0, #1
 8001ad2:	e7e9      	b.n	8001aa8 <__ledf2+0x74>
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbeb      	blt.n	8001ab0 <__ledf2+0x7c>
 8001ad8:	454f      	cmp	r7, r9
 8001ada:	d8df      	bhi.n	8001a9c <__ledf2+0x68>
 8001adc:	d006      	beq.n	8001aec <__ledf2+0xb8>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	454f      	cmp	r7, r9
 8001ae2:	d2e1      	bcs.n	8001aa8 <__ledf2+0x74>
 8001ae4:	2900      	cmp	r1, #0
 8001ae6:	d0e5      	beq.n	8001ab4 <__ledf2+0x80>
 8001ae8:	0008      	movs	r0, r1
 8001aea:	e7dd      	b.n	8001aa8 <__ledf2+0x74>
 8001aec:	45c4      	cmp	ip, r8
 8001aee:	d8d5      	bhi.n	8001a9c <__ledf2+0x68>
 8001af0:	2000      	movs	r0, #0
 8001af2:	45c4      	cmp	ip, r8
 8001af4:	d2d8      	bcs.n	8001aa8 <__ledf2+0x74>
 8001af6:	e7f5      	b.n	8001ae4 <__ledf2+0xb0>
 8001af8:	000007ff 	.word	0x000007ff

08001afc <__aeabi_dmul>:
 8001afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afe:	4645      	mov	r5, r8
 8001b00:	46de      	mov	lr, fp
 8001b02:	4657      	mov	r7, sl
 8001b04:	464e      	mov	r6, r9
 8001b06:	b5e0      	push	{r5, r6, r7, lr}
 8001b08:	001f      	movs	r7, r3
 8001b0a:	030b      	lsls	r3, r1, #12
 8001b0c:	0b1b      	lsrs	r3, r3, #12
 8001b0e:	469b      	mov	fp, r3
 8001b10:	004d      	lsls	r5, r1, #1
 8001b12:	0fcb      	lsrs	r3, r1, #31
 8001b14:	0004      	movs	r4, r0
 8001b16:	4691      	mov	r9, r2
 8001b18:	4698      	mov	r8, r3
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	0d6d      	lsrs	r5, r5, #21
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x26>
 8001b20:	e1cd      	b.n	8001ebe <__aeabi_dmul+0x3c2>
 8001b22:	4bce      	ldr	r3, [pc, #824]	; (8001e5c <__aeabi_dmul+0x360>)
 8001b24:	429d      	cmp	r5, r3
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dmul+0x2e>
 8001b28:	e1e9      	b.n	8001efe <__aeabi_dmul+0x402>
 8001b2a:	465a      	mov	r2, fp
 8001b2c:	0f43      	lsrs	r3, r0, #29
 8001b2e:	00d2      	lsls	r2, r2, #3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	0412      	lsls	r2, r2, #16
 8001b36:	431a      	orrs	r2, r3
 8001b38:	00c3      	lsls	r3, r0, #3
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	4bc8      	ldr	r3, [pc, #800]	; (8001e60 <__aeabi_dmul+0x364>)
 8001b3e:	4693      	mov	fp, r2
 8001b40:	469c      	mov	ip, r3
 8001b42:	2300      	movs	r3, #0
 8001b44:	2600      	movs	r6, #0
 8001b46:	4465      	add	r5, ip
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	033c      	lsls	r4, r7, #12
 8001b4c:	007b      	lsls	r3, r7, #1
 8001b4e:	4648      	mov	r0, r9
 8001b50:	0b24      	lsrs	r4, r4, #12
 8001b52:	0d5b      	lsrs	r3, r3, #21
 8001b54:	0fff      	lsrs	r7, r7, #31
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dmul+0x60>
 8001b5a:	e189      	b.n	8001e70 <__aeabi_dmul+0x374>
 8001b5c:	4abf      	ldr	r2, [pc, #764]	; (8001e5c <__aeabi_dmul+0x360>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <__aeabi_dmul+0x9a>
 8001b62:	0f42      	lsrs	r2, r0, #29
 8001b64:	00e4      	lsls	r4, r4, #3
 8001b66:	4322      	orrs	r2, r4
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	0424      	lsls	r4, r4, #16
 8001b6c:	4314      	orrs	r4, r2
 8001b6e:	4abc      	ldr	r2, [pc, #752]	; (8001e60 <__aeabi_dmul+0x364>)
 8001b70:	2100      	movs	r1, #0
 8001b72:	4694      	mov	ip, r2
 8001b74:	4642      	mov	r2, r8
 8001b76:	4463      	add	r3, ip
 8001b78:	195b      	adds	r3, r3, r5
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	9b01      	ldr	r3, [sp, #4]
 8001b7e:	407a      	eors	r2, r7
 8001b80:	3301      	adds	r3, #1
 8001b82:	00c0      	lsls	r0, r0, #3
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	2e0a      	cmp	r6, #10
 8001b8a:	dd1c      	ble.n	8001bc6 <__aeabi_dmul+0xca>
 8001b8c:	003a      	movs	r2, r7
 8001b8e:	2e0b      	cmp	r6, #11
 8001b90:	d05e      	beq.n	8001c50 <__aeabi_dmul+0x154>
 8001b92:	4647      	mov	r7, r8
 8001b94:	e056      	b.n	8001c44 <__aeabi_dmul+0x148>
 8001b96:	4649      	mov	r1, r9
 8001b98:	4bb0      	ldr	r3, [pc, #704]	; (8001e5c <__aeabi_dmul+0x360>)
 8001b9a:	4321      	orrs	r1, r4
 8001b9c:	18eb      	adds	r3, r5, r3
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	2900      	cmp	r1, #0
 8001ba2:	d12a      	bne.n	8001bfa <__aeabi_dmul+0xfe>
 8001ba4:	2080      	movs	r0, #128	; 0x80
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	0100      	lsls	r0, r0, #4
 8001baa:	002b      	movs	r3, r5
 8001bac:	4684      	mov	ip, r0
 8001bae:	4316      	orrs	r6, r2
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	4463      	add	r3, ip
 8001bb4:	407a      	eors	r2, r7
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	2e0a      	cmp	r6, #10
 8001bbc:	dd00      	ble.n	8001bc0 <__aeabi_dmul+0xc4>
 8001bbe:	e231      	b.n	8002024 <__aeabi_dmul+0x528>
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	2e02      	cmp	r6, #2
 8001bc8:	dc26      	bgt.n	8001c18 <__aeabi_dmul+0x11c>
 8001bca:	3e01      	subs	r6, #1
 8001bcc:	2e01      	cmp	r6, #1
 8001bce:	d852      	bhi.n	8001c76 <__aeabi_dmul+0x17a>
 8001bd0:	2902      	cmp	r1, #2
 8001bd2:	d04c      	beq.n	8001c6e <__aeabi_dmul+0x172>
 8001bd4:	2901      	cmp	r1, #1
 8001bd6:	d000      	beq.n	8001bda <__aeabi_dmul+0xde>
 8001bd8:	e118      	b.n	8001e0c <__aeabi_dmul+0x310>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2400      	movs	r4, #0
 8001bde:	2500      	movs	r5, #0
 8001be0:	051b      	lsls	r3, r3, #20
 8001be2:	4323      	orrs	r3, r4
 8001be4:	07d2      	lsls	r2, r2, #31
 8001be6:	4313      	orrs	r3, r2
 8001be8:	0028      	movs	r0, r5
 8001bea:	0019      	movs	r1, r3
 8001bec:	b007      	add	sp, #28
 8001bee:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf0:	46bb      	mov	fp, r7
 8001bf2:	46b2      	mov	sl, r6
 8001bf4:	46a9      	mov	r9, r5
 8001bf6:	46a0      	mov	r8, r4
 8001bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	0109      	lsls	r1, r1, #4
 8001c00:	002b      	movs	r3, r5
 8001c02:	468c      	mov	ip, r1
 8001c04:	4316      	orrs	r6, r2
 8001c06:	4642      	mov	r2, r8
 8001c08:	4463      	add	r3, ip
 8001c0a:	407a      	eors	r2, r7
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2e0a      	cmp	r6, #10
 8001c12:	dd00      	ble.n	8001c16 <__aeabi_dmul+0x11a>
 8001c14:	e228      	b.n	8002068 <__aeabi_dmul+0x56c>
 8001c16:	2103      	movs	r1, #3
 8001c18:	2501      	movs	r5, #1
 8001c1a:	40b5      	lsls	r5, r6
 8001c1c:	46ac      	mov	ip, r5
 8001c1e:	26a6      	movs	r6, #166	; 0xa6
 8001c20:	4663      	mov	r3, ip
 8001c22:	00f6      	lsls	r6, r6, #3
 8001c24:	4035      	ands	r5, r6
 8001c26:	4233      	tst	r3, r6
 8001c28:	d10b      	bne.n	8001c42 <__aeabi_dmul+0x146>
 8001c2a:	2690      	movs	r6, #144	; 0x90
 8001c2c:	00b6      	lsls	r6, r6, #2
 8001c2e:	4233      	tst	r3, r6
 8001c30:	d118      	bne.n	8001c64 <__aeabi_dmul+0x168>
 8001c32:	3eb9      	subs	r6, #185	; 0xb9
 8001c34:	3eff      	subs	r6, #255	; 0xff
 8001c36:	421e      	tst	r6, r3
 8001c38:	d01d      	beq.n	8001c76 <__aeabi_dmul+0x17a>
 8001c3a:	46a3      	mov	fp, r4
 8001c3c:	4682      	mov	sl, r0
 8001c3e:	9100      	str	r1, [sp, #0]
 8001c40:	e000      	b.n	8001c44 <__aeabi_dmul+0x148>
 8001c42:	0017      	movs	r7, r2
 8001c44:	9900      	ldr	r1, [sp, #0]
 8001c46:	003a      	movs	r2, r7
 8001c48:	2902      	cmp	r1, #2
 8001c4a:	d010      	beq.n	8001c6e <__aeabi_dmul+0x172>
 8001c4c:	465c      	mov	r4, fp
 8001c4e:	4650      	mov	r0, sl
 8001c50:	2903      	cmp	r1, #3
 8001c52:	d1bf      	bne.n	8001bd4 <__aeabi_dmul+0xd8>
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	031b      	lsls	r3, r3, #12
 8001c58:	431c      	orrs	r4, r3
 8001c5a:	0324      	lsls	r4, r4, #12
 8001c5c:	0005      	movs	r5, r0
 8001c5e:	4b7f      	ldr	r3, [pc, #508]	; (8001e5c <__aeabi_dmul+0x360>)
 8001c60:	0b24      	lsrs	r4, r4, #12
 8001c62:	e7bd      	b.n	8001be0 <__aeabi_dmul+0xe4>
 8001c64:	2480      	movs	r4, #128	; 0x80
 8001c66:	2200      	movs	r2, #0
 8001c68:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <__aeabi_dmul+0x360>)
 8001c6a:	0324      	lsls	r4, r4, #12
 8001c6c:	e7b8      	b.n	8001be0 <__aeabi_dmul+0xe4>
 8001c6e:	2400      	movs	r4, #0
 8001c70:	2500      	movs	r5, #0
 8001c72:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <__aeabi_dmul+0x360>)
 8001c74:	e7b4      	b.n	8001be0 <__aeabi_dmul+0xe4>
 8001c76:	4653      	mov	r3, sl
 8001c78:	041e      	lsls	r6, r3, #16
 8001c7a:	0c36      	lsrs	r6, r6, #16
 8001c7c:	0c1f      	lsrs	r7, r3, #16
 8001c7e:	0033      	movs	r3, r6
 8001c80:	0c01      	lsrs	r1, r0, #16
 8001c82:	0400      	lsls	r0, r0, #16
 8001c84:	0c00      	lsrs	r0, r0, #16
 8001c86:	4343      	muls	r3, r0
 8001c88:	4698      	mov	r8, r3
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	437b      	muls	r3, r7
 8001c8e:	4699      	mov	r9, r3
 8001c90:	0033      	movs	r3, r6
 8001c92:	434b      	muls	r3, r1
 8001c94:	469c      	mov	ip, r3
 8001c96:	4643      	mov	r3, r8
 8001c98:	000d      	movs	r5, r1
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	469a      	mov	sl, r3
 8001c9e:	437d      	muls	r5, r7
 8001ca0:	44cc      	add	ip, r9
 8001ca2:	44d4      	add	ip, sl
 8001ca4:	9500      	str	r5, [sp, #0]
 8001ca6:	45e1      	cmp	r9, ip
 8001ca8:	d904      	bls.n	8001cb4 <__aeabi_dmul+0x1b8>
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	4699      	mov	r9, r3
 8001cb0:	444d      	add	r5, r9
 8001cb2:	9500      	str	r5, [sp, #0]
 8001cb4:	4663      	mov	r3, ip
 8001cb6:	0c1b      	lsrs	r3, r3, #16
 8001cb8:	001d      	movs	r5, r3
 8001cba:	4663      	mov	r3, ip
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	469c      	mov	ip, r3
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	041b      	lsls	r3, r3, #16
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	4698      	mov	r8, r3
 8001cc8:	4663      	mov	r3, ip
 8001cca:	4443      	add	r3, r8
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	0c23      	lsrs	r3, r4, #16
 8001cd0:	4698      	mov	r8, r3
 8001cd2:	0033      	movs	r3, r6
 8001cd4:	0424      	lsls	r4, r4, #16
 8001cd6:	0c24      	lsrs	r4, r4, #16
 8001cd8:	4363      	muls	r3, r4
 8001cda:	469c      	mov	ip, r3
 8001cdc:	0023      	movs	r3, r4
 8001cde:	437b      	muls	r3, r7
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	4643      	mov	r3, r8
 8001ce4:	435e      	muls	r6, r3
 8001ce6:	435f      	muls	r7, r3
 8001ce8:	444e      	add	r6, r9
 8001cea:	4663      	mov	r3, ip
 8001cec:	46b2      	mov	sl, r6
 8001cee:	0c1e      	lsrs	r6, r3, #16
 8001cf0:	4456      	add	r6, sl
 8001cf2:	45b1      	cmp	r9, r6
 8001cf4:	d903      	bls.n	8001cfe <__aeabi_dmul+0x202>
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	025b      	lsls	r3, r3, #9
 8001cfa:	4699      	mov	r9, r3
 8001cfc:	444f      	add	r7, r9
 8001cfe:	0c33      	lsrs	r3, r6, #16
 8001d00:	4699      	mov	r9, r3
 8001d02:	003b      	movs	r3, r7
 8001d04:	444b      	add	r3, r9
 8001d06:	9305      	str	r3, [sp, #20]
 8001d08:	4663      	mov	r3, ip
 8001d0a:	46ac      	mov	ip, r5
 8001d0c:	041f      	lsls	r7, r3, #16
 8001d0e:	0c3f      	lsrs	r7, r7, #16
 8001d10:	0436      	lsls	r6, r6, #16
 8001d12:	19f6      	adds	r6, r6, r7
 8001d14:	44b4      	add	ip, r6
 8001d16:	4663      	mov	r3, ip
 8001d18:	9304      	str	r3, [sp, #16]
 8001d1a:	465b      	mov	r3, fp
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	469c      	mov	ip, r3
 8001d20:	465b      	mov	r3, fp
 8001d22:	041f      	lsls	r7, r3, #16
 8001d24:	0c3f      	lsrs	r7, r7, #16
 8001d26:	003b      	movs	r3, r7
 8001d28:	4343      	muls	r3, r0
 8001d2a:	4699      	mov	r9, r3
 8001d2c:	4663      	mov	r3, ip
 8001d2e:	4343      	muls	r3, r0
 8001d30:	469a      	mov	sl, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	4660      	mov	r0, ip
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	469b      	mov	fp, r3
 8001d3a:	4348      	muls	r0, r1
 8001d3c:	4379      	muls	r1, r7
 8001d3e:	4451      	add	r1, sl
 8001d40:	4459      	add	r1, fp
 8001d42:	458a      	cmp	sl, r1
 8001d44:	d903      	bls.n	8001d4e <__aeabi_dmul+0x252>
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	025b      	lsls	r3, r3, #9
 8001d4a:	469a      	mov	sl, r3
 8001d4c:	4450      	add	r0, sl
 8001d4e:	0c0b      	lsrs	r3, r1, #16
 8001d50:	469a      	mov	sl, r3
 8001d52:	464b      	mov	r3, r9
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	0c1b      	lsrs	r3, r3, #16
 8001d58:	4699      	mov	r9, r3
 8001d5a:	003b      	movs	r3, r7
 8001d5c:	4363      	muls	r3, r4
 8001d5e:	0409      	lsls	r1, r1, #16
 8001d60:	4645      	mov	r5, r8
 8001d62:	4449      	add	r1, r9
 8001d64:	4699      	mov	r9, r3
 8001d66:	4663      	mov	r3, ip
 8001d68:	435c      	muls	r4, r3
 8001d6a:	436b      	muls	r3, r5
 8001d6c:	469c      	mov	ip, r3
 8001d6e:	464b      	mov	r3, r9
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	4698      	mov	r8, r3
 8001d74:	436f      	muls	r7, r5
 8001d76:	193f      	adds	r7, r7, r4
 8001d78:	4447      	add	r7, r8
 8001d7a:	4450      	add	r0, sl
 8001d7c:	42bc      	cmp	r4, r7
 8001d7e:	d903      	bls.n	8001d88 <__aeabi_dmul+0x28c>
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	4698      	mov	r8, r3
 8001d86:	44c4      	add	ip, r8
 8001d88:	9b04      	ldr	r3, [sp, #16]
 8001d8a:	9d00      	ldr	r5, [sp, #0]
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	4445      	add	r5, r8
 8001d90:	42b5      	cmp	r5, r6
 8001d92:	41b6      	sbcs	r6, r6
 8001d94:	4273      	negs	r3, r6
 8001d96:	4698      	mov	r8, r3
 8001d98:	464b      	mov	r3, r9
 8001d9a:	041e      	lsls	r6, r3, #16
 8001d9c:	9b05      	ldr	r3, [sp, #20]
 8001d9e:	043c      	lsls	r4, r7, #16
 8001da0:	4699      	mov	r9, r3
 8001da2:	0c36      	lsrs	r6, r6, #16
 8001da4:	19a4      	adds	r4, r4, r6
 8001da6:	444c      	add	r4, r9
 8001da8:	46a1      	mov	r9, r4
 8001daa:	4683      	mov	fp, r0
 8001dac:	186e      	adds	r6, r5, r1
 8001dae:	44c1      	add	r9, r8
 8001db0:	428e      	cmp	r6, r1
 8001db2:	4189      	sbcs	r1, r1
 8001db4:	44cb      	add	fp, r9
 8001db6:	465d      	mov	r5, fp
 8001db8:	4249      	negs	r1, r1
 8001dba:	186d      	adds	r5, r5, r1
 8001dbc:	429c      	cmp	r4, r3
 8001dbe:	41a4      	sbcs	r4, r4
 8001dc0:	45c1      	cmp	r9, r8
 8001dc2:	419b      	sbcs	r3, r3
 8001dc4:	4583      	cmp	fp, r0
 8001dc6:	4180      	sbcs	r0, r0
 8001dc8:	428d      	cmp	r5, r1
 8001dca:	4189      	sbcs	r1, r1
 8001dcc:	425b      	negs	r3, r3
 8001dce:	4264      	negs	r4, r4
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	4240      	negs	r0, r0
 8001dd4:	9b03      	ldr	r3, [sp, #12]
 8001dd6:	4249      	negs	r1, r1
 8001dd8:	4301      	orrs	r1, r0
 8001dda:	0270      	lsls	r0, r6, #9
 8001ddc:	0c3f      	lsrs	r7, r7, #16
 8001dde:	4318      	orrs	r0, r3
 8001de0:	19e4      	adds	r4, r4, r7
 8001de2:	1e47      	subs	r7, r0, #1
 8001de4:	41b8      	sbcs	r0, r7
 8001de6:	1864      	adds	r4, r4, r1
 8001de8:	4464      	add	r4, ip
 8001dea:	0df6      	lsrs	r6, r6, #23
 8001dec:	0261      	lsls	r1, r4, #9
 8001dee:	4330      	orrs	r0, r6
 8001df0:	0dec      	lsrs	r4, r5, #23
 8001df2:	026e      	lsls	r6, r5, #9
 8001df4:	430c      	orrs	r4, r1
 8001df6:	4330      	orrs	r0, r6
 8001df8:	01c9      	lsls	r1, r1, #7
 8001dfa:	d400      	bmi.n	8001dfe <__aeabi_dmul+0x302>
 8001dfc:	e0f1      	b.n	8001fe2 <__aeabi_dmul+0x4e6>
 8001dfe:	2101      	movs	r1, #1
 8001e00:	0843      	lsrs	r3, r0, #1
 8001e02:	4001      	ands	r1, r0
 8001e04:	430b      	orrs	r3, r1
 8001e06:	07e0      	lsls	r0, r4, #31
 8001e08:	4318      	orrs	r0, r3
 8001e0a:	0864      	lsrs	r4, r4, #1
 8001e0c:	4915      	ldr	r1, [pc, #84]	; (8001e64 <__aeabi_dmul+0x368>)
 8001e0e:	9b02      	ldr	r3, [sp, #8]
 8001e10:	468c      	mov	ip, r1
 8001e12:	4463      	add	r3, ip
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	dc00      	bgt.n	8001e1a <__aeabi_dmul+0x31e>
 8001e18:	e097      	b.n	8001f4a <__aeabi_dmul+0x44e>
 8001e1a:	0741      	lsls	r1, r0, #29
 8001e1c:	d009      	beq.n	8001e32 <__aeabi_dmul+0x336>
 8001e1e:	210f      	movs	r1, #15
 8001e20:	4001      	ands	r1, r0
 8001e22:	2904      	cmp	r1, #4
 8001e24:	d005      	beq.n	8001e32 <__aeabi_dmul+0x336>
 8001e26:	1d01      	adds	r1, r0, #4
 8001e28:	4281      	cmp	r1, r0
 8001e2a:	4180      	sbcs	r0, r0
 8001e2c:	4240      	negs	r0, r0
 8001e2e:	1824      	adds	r4, r4, r0
 8001e30:	0008      	movs	r0, r1
 8001e32:	01e1      	lsls	r1, r4, #7
 8001e34:	d506      	bpl.n	8001e44 <__aeabi_dmul+0x348>
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	00c9      	lsls	r1, r1, #3
 8001e3a:	468c      	mov	ip, r1
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <__aeabi_dmul+0x36c>)
 8001e3e:	401c      	ands	r4, r3
 8001e40:	9b02      	ldr	r3, [sp, #8]
 8001e42:	4463      	add	r3, ip
 8001e44:	4909      	ldr	r1, [pc, #36]	; (8001e6c <__aeabi_dmul+0x370>)
 8001e46:	428b      	cmp	r3, r1
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dmul+0x350>
 8001e4a:	e710      	b.n	8001c6e <__aeabi_dmul+0x172>
 8001e4c:	0761      	lsls	r1, r4, #29
 8001e4e:	08c5      	lsrs	r5, r0, #3
 8001e50:	0264      	lsls	r4, r4, #9
 8001e52:	055b      	lsls	r3, r3, #21
 8001e54:	430d      	orrs	r5, r1
 8001e56:	0b24      	lsrs	r4, r4, #12
 8001e58:	0d5b      	lsrs	r3, r3, #21
 8001e5a:	e6c1      	b.n	8001be0 <__aeabi_dmul+0xe4>
 8001e5c:	000007ff 	.word	0x000007ff
 8001e60:	fffffc01 	.word	0xfffffc01
 8001e64:	000003ff 	.word	0x000003ff
 8001e68:	feffffff 	.word	0xfeffffff
 8001e6c:	000007fe 	.word	0x000007fe
 8001e70:	464b      	mov	r3, r9
 8001e72:	4323      	orrs	r3, r4
 8001e74:	d059      	beq.n	8001f2a <__aeabi_dmul+0x42e>
 8001e76:	2c00      	cmp	r4, #0
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dmul+0x380>
 8001e7a:	e0a3      	b.n	8001fc4 <__aeabi_dmul+0x4c8>
 8001e7c:	0020      	movs	r0, r4
 8001e7e:	f000 f9fd 	bl	800227c <__clzsi2>
 8001e82:	0001      	movs	r1, r0
 8001e84:	0003      	movs	r3, r0
 8001e86:	390b      	subs	r1, #11
 8001e88:	221d      	movs	r2, #29
 8001e8a:	1a52      	subs	r2, r2, r1
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	0018      	movs	r0, r3
 8001e90:	40d1      	lsrs	r1, r2
 8001e92:	464a      	mov	r2, r9
 8001e94:	3808      	subs	r0, #8
 8001e96:	4082      	lsls	r2, r0
 8001e98:	4084      	lsls	r4, r0
 8001e9a:	0010      	movs	r0, r2
 8001e9c:	430c      	orrs	r4, r1
 8001e9e:	4a74      	ldr	r2, [pc, #464]	; (8002070 <__aeabi_dmul+0x574>)
 8001ea0:	1aeb      	subs	r3, r5, r3
 8001ea2:	4694      	mov	ip, r2
 8001ea4:	4642      	mov	r2, r8
 8001ea6:	4463      	add	r3, ip
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	9b01      	ldr	r3, [sp, #4]
 8001eac:	407a      	eors	r2, r7
 8001eae:	3301      	adds	r3, #1
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	2e0a      	cmp	r6, #10
 8001eb8:	dd00      	ble.n	8001ebc <__aeabi_dmul+0x3c0>
 8001eba:	e667      	b.n	8001b8c <__aeabi_dmul+0x90>
 8001ebc:	e683      	b.n	8001bc6 <__aeabi_dmul+0xca>
 8001ebe:	465b      	mov	r3, fp
 8001ec0:	4303      	orrs	r3, r0
 8001ec2:	469a      	mov	sl, r3
 8001ec4:	d02a      	beq.n	8001f1c <__aeabi_dmul+0x420>
 8001ec6:	465b      	mov	r3, fp
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d06d      	beq.n	8001fa8 <__aeabi_dmul+0x4ac>
 8001ecc:	4658      	mov	r0, fp
 8001ece:	f000 f9d5 	bl	800227c <__clzsi2>
 8001ed2:	0001      	movs	r1, r0
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	390b      	subs	r1, #11
 8001ed8:	221d      	movs	r2, #29
 8001eda:	1a52      	subs	r2, r2, r1
 8001edc:	0021      	movs	r1, r4
 8001ede:	0018      	movs	r0, r3
 8001ee0:	465d      	mov	r5, fp
 8001ee2:	40d1      	lsrs	r1, r2
 8001ee4:	3808      	subs	r0, #8
 8001ee6:	4085      	lsls	r5, r0
 8001ee8:	000a      	movs	r2, r1
 8001eea:	4084      	lsls	r4, r0
 8001eec:	432a      	orrs	r2, r5
 8001eee:	4693      	mov	fp, r2
 8001ef0:	46a2      	mov	sl, r4
 8001ef2:	4d5f      	ldr	r5, [pc, #380]	; (8002070 <__aeabi_dmul+0x574>)
 8001ef4:	2600      	movs	r6, #0
 8001ef6:	1aed      	subs	r5, r5, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	e625      	b.n	8001b4a <__aeabi_dmul+0x4e>
 8001efe:	465b      	mov	r3, fp
 8001f00:	4303      	orrs	r3, r0
 8001f02:	469a      	mov	sl, r3
 8001f04:	d105      	bne.n	8001f12 <__aeabi_dmul+0x416>
 8001f06:	2300      	movs	r3, #0
 8001f08:	469b      	mov	fp, r3
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	2608      	movs	r6, #8
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	e61b      	b.n	8001b4a <__aeabi_dmul+0x4e>
 8001f12:	2303      	movs	r3, #3
 8001f14:	4682      	mov	sl, r0
 8001f16:	260c      	movs	r6, #12
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	e616      	b.n	8001b4a <__aeabi_dmul+0x4e>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	469b      	mov	fp, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	2604      	movs	r6, #4
 8001f24:	2500      	movs	r5, #0
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	e60f      	b.n	8001b4a <__aeabi_dmul+0x4e>
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	9501      	str	r5, [sp, #4]
 8001f30:	431e      	orrs	r6, r3
 8001f32:	9b01      	ldr	r3, [sp, #4]
 8001f34:	407a      	eors	r2, r7
 8001f36:	3301      	adds	r3, #1
 8001f38:	2400      	movs	r4, #0
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	9302      	str	r3, [sp, #8]
 8001f42:	2e0a      	cmp	r6, #10
 8001f44:	dd00      	ble.n	8001f48 <__aeabi_dmul+0x44c>
 8001f46:	e621      	b.n	8001b8c <__aeabi_dmul+0x90>
 8001f48:	e63d      	b.n	8001bc6 <__aeabi_dmul+0xca>
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	1ac9      	subs	r1, r1, r3
 8001f4e:	2938      	cmp	r1, #56	; 0x38
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_dmul+0x458>
 8001f52:	e642      	b.n	8001bda <__aeabi_dmul+0xde>
 8001f54:	291f      	cmp	r1, #31
 8001f56:	dd47      	ble.n	8001fe8 <__aeabi_dmul+0x4ec>
 8001f58:	261f      	movs	r6, #31
 8001f5a:	0025      	movs	r5, r4
 8001f5c:	4276      	negs	r6, r6
 8001f5e:	1af3      	subs	r3, r6, r3
 8001f60:	40dd      	lsrs	r5, r3
 8001f62:	002b      	movs	r3, r5
 8001f64:	2920      	cmp	r1, #32
 8001f66:	d005      	beq.n	8001f74 <__aeabi_dmul+0x478>
 8001f68:	4942      	ldr	r1, [pc, #264]	; (8002074 <__aeabi_dmul+0x578>)
 8001f6a:	9d02      	ldr	r5, [sp, #8]
 8001f6c:	468c      	mov	ip, r1
 8001f6e:	4465      	add	r5, ip
 8001f70:	40ac      	lsls	r4, r5
 8001f72:	4320      	orrs	r0, r4
 8001f74:	1e41      	subs	r1, r0, #1
 8001f76:	4188      	sbcs	r0, r1
 8001f78:	4318      	orrs	r0, r3
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	001d      	movs	r5, r3
 8001f7e:	2400      	movs	r4, #0
 8001f80:	4005      	ands	r5, r0
 8001f82:	4203      	tst	r3, r0
 8001f84:	d04a      	beq.n	800201c <__aeabi_dmul+0x520>
 8001f86:	230f      	movs	r3, #15
 8001f88:	2400      	movs	r4, #0
 8001f8a:	4003      	ands	r3, r0
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d042      	beq.n	8002016 <__aeabi_dmul+0x51a>
 8001f90:	1d03      	adds	r3, r0, #4
 8001f92:	4283      	cmp	r3, r0
 8001f94:	4180      	sbcs	r0, r0
 8001f96:	4240      	negs	r0, r0
 8001f98:	1824      	adds	r4, r4, r0
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	0223      	lsls	r3, r4, #8
 8001f9e:	d53a      	bpl.n	8002016 <__aeabi_dmul+0x51a>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	e61b      	b.n	8001be0 <__aeabi_dmul+0xe4>
 8001fa8:	f000 f968 	bl	800227c <__clzsi2>
 8001fac:	0001      	movs	r1, r0
 8001fae:	0003      	movs	r3, r0
 8001fb0:	3115      	adds	r1, #21
 8001fb2:	3320      	adds	r3, #32
 8001fb4:	291c      	cmp	r1, #28
 8001fb6:	dd8f      	ble.n	8001ed8 <__aeabi_dmul+0x3dc>
 8001fb8:	3808      	subs	r0, #8
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4084      	lsls	r4, r0
 8001fbe:	4692      	mov	sl, r2
 8001fc0:	46a3      	mov	fp, r4
 8001fc2:	e796      	b.n	8001ef2 <__aeabi_dmul+0x3f6>
 8001fc4:	f000 f95a 	bl	800227c <__clzsi2>
 8001fc8:	0001      	movs	r1, r0
 8001fca:	0003      	movs	r3, r0
 8001fcc:	3115      	adds	r1, #21
 8001fce:	3320      	adds	r3, #32
 8001fd0:	291c      	cmp	r1, #28
 8001fd2:	dc00      	bgt.n	8001fd6 <__aeabi_dmul+0x4da>
 8001fd4:	e758      	b.n	8001e88 <__aeabi_dmul+0x38c>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	464c      	mov	r4, r9
 8001fda:	3a08      	subs	r2, #8
 8001fdc:	2000      	movs	r0, #0
 8001fde:	4094      	lsls	r4, r2
 8001fe0:	e75d      	b.n	8001e9e <__aeabi_dmul+0x3a2>
 8001fe2:	9b01      	ldr	r3, [sp, #4]
 8001fe4:	9302      	str	r3, [sp, #8]
 8001fe6:	e711      	b.n	8001e0c <__aeabi_dmul+0x310>
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <__aeabi_dmul+0x57c>)
 8001fea:	0026      	movs	r6, r4
 8001fec:	469c      	mov	ip, r3
 8001fee:	0003      	movs	r3, r0
 8001ff0:	9d02      	ldr	r5, [sp, #8]
 8001ff2:	40cb      	lsrs	r3, r1
 8001ff4:	4465      	add	r5, ip
 8001ff6:	40ae      	lsls	r6, r5
 8001ff8:	431e      	orrs	r6, r3
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	40ab      	lsls	r3, r5
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	4183      	sbcs	r3, r0
 8002002:	0030      	movs	r0, r6
 8002004:	4318      	orrs	r0, r3
 8002006:	40cc      	lsrs	r4, r1
 8002008:	0743      	lsls	r3, r0, #29
 800200a:	d0c7      	beq.n	8001f9c <__aeabi_dmul+0x4a0>
 800200c:	230f      	movs	r3, #15
 800200e:	4003      	ands	r3, r0
 8002010:	2b04      	cmp	r3, #4
 8002012:	d1bd      	bne.n	8001f90 <__aeabi_dmul+0x494>
 8002014:	e7c2      	b.n	8001f9c <__aeabi_dmul+0x4a0>
 8002016:	0765      	lsls	r5, r4, #29
 8002018:	0264      	lsls	r4, r4, #9
 800201a:	0b24      	lsrs	r4, r4, #12
 800201c:	08c0      	lsrs	r0, r0, #3
 800201e:	2300      	movs	r3, #0
 8002020:	4305      	orrs	r5, r0
 8002022:	e5dd      	b.n	8001be0 <__aeabi_dmul+0xe4>
 8002024:	2500      	movs	r5, #0
 8002026:	2302      	movs	r3, #2
 8002028:	2e0f      	cmp	r6, #15
 800202a:	d10c      	bne.n	8002046 <__aeabi_dmul+0x54a>
 800202c:	2480      	movs	r4, #128	; 0x80
 800202e:	465b      	mov	r3, fp
 8002030:	0324      	lsls	r4, r4, #12
 8002032:	4223      	tst	r3, r4
 8002034:	d00e      	beq.n	8002054 <__aeabi_dmul+0x558>
 8002036:	4221      	tst	r1, r4
 8002038:	d10c      	bne.n	8002054 <__aeabi_dmul+0x558>
 800203a:	430c      	orrs	r4, r1
 800203c:	0324      	lsls	r4, r4, #12
 800203e:	003a      	movs	r2, r7
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <__aeabi_dmul+0x580>)
 8002042:	0b24      	lsrs	r4, r4, #12
 8002044:	e5cc      	b.n	8001be0 <__aeabi_dmul+0xe4>
 8002046:	2e0b      	cmp	r6, #11
 8002048:	d000      	beq.n	800204c <__aeabi_dmul+0x550>
 800204a:	e5a2      	b.n	8001b92 <__aeabi_dmul+0x96>
 800204c:	468b      	mov	fp, r1
 800204e:	46aa      	mov	sl, r5
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	e5f7      	b.n	8001c44 <__aeabi_dmul+0x148>
 8002054:	2480      	movs	r4, #128	; 0x80
 8002056:	465b      	mov	r3, fp
 8002058:	0324      	lsls	r4, r4, #12
 800205a:	431c      	orrs	r4, r3
 800205c:	0324      	lsls	r4, r4, #12
 800205e:	4642      	mov	r2, r8
 8002060:	4655      	mov	r5, sl
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <__aeabi_dmul+0x580>)
 8002064:	0b24      	lsrs	r4, r4, #12
 8002066:	e5bb      	b.n	8001be0 <__aeabi_dmul+0xe4>
 8002068:	464d      	mov	r5, r9
 800206a:	0021      	movs	r1, r4
 800206c:	2303      	movs	r3, #3
 800206e:	e7db      	b.n	8002028 <__aeabi_dmul+0x52c>
 8002070:	fffffc0d 	.word	0xfffffc0d
 8002074:	0000043e 	.word	0x0000043e
 8002078:	0000041e 	.word	0x0000041e
 800207c:	000007ff 	.word	0x000007ff

08002080 <__aeabi_i2d>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	2800      	cmp	r0, #0
 8002084:	d016      	beq.n	80020b4 <__aeabi_i2d+0x34>
 8002086:	17c3      	asrs	r3, r0, #31
 8002088:	18c5      	adds	r5, r0, r3
 800208a:	405d      	eors	r5, r3
 800208c:	0fc4      	lsrs	r4, r0, #31
 800208e:	0028      	movs	r0, r5
 8002090:	f000 f8f4 	bl	800227c <__clzsi2>
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <__aeabi_i2d+0x5c>)
 8002096:	1a1b      	subs	r3, r3, r0
 8002098:	280a      	cmp	r0, #10
 800209a:	dc16      	bgt.n	80020ca <__aeabi_i2d+0x4a>
 800209c:	0002      	movs	r2, r0
 800209e:	002e      	movs	r6, r5
 80020a0:	3215      	adds	r2, #21
 80020a2:	4096      	lsls	r6, r2
 80020a4:	220b      	movs	r2, #11
 80020a6:	1a12      	subs	r2, r2, r0
 80020a8:	40d5      	lsrs	r5, r2
 80020aa:	055b      	lsls	r3, r3, #21
 80020ac:	032d      	lsls	r5, r5, #12
 80020ae:	0b2d      	lsrs	r5, r5, #12
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	e003      	b.n	80020bc <__aeabi_i2d+0x3c>
 80020b4:	2400      	movs	r4, #0
 80020b6:	2300      	movs	r3, #0
 80020b8:	2500      	movs	r5, #0
 80020ba:	2600      	movs	r6, #0
 80020bc:	051b      	lsls	r3, r3, #20
 80020be:	432b      	orrs	r3, r5
 80020c0:	07e4      	lsls	r4, r4, #31
 80020c2:	4323      	orrs	r3, r4
 80020c4:	0030      	movs	r0, r6
 80020c6:	0019      	movs	r1, r3
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	380b      	subs	r0, #11
 80020cc:	4085      	lsls	r5, r0
 80020ce:	055b      	lsls	r3, r3, #21
 80020d0:	032d      	lsls	r5, r5, #12
 80020d2:	2600      	movs	r6, #0
 80020d4:	0b2d      	lsrs	r5, r5, #12
 80020d6:	0d5b      	lsrs	r3, r3, #21
 80020d8:	e7f0      	b.n	80020bc <__aeabi_i2d+0x3c>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	0000041e 	.word	0x0000041e

080020e0 <__aeabi_f2d>:
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	0242      	lsls	r2, r0, #9
 80020e4:	0043      	lsls	r3, r0, #1
 80020e6:	0fc4      	lsrs	r4, r0, #31
 80020e8:	20fe      	movs	r0, #254	; 0xfe
 80020ea:	0e1b      	lsrs	r3, r3, #24
 80020ec:	1c59      	adds	r1, r3, #1
 80020ee:	0a55      	lsrs	r5, r2, #9
 80020f0:	4208      	tst	r0, r1
 80020f2:	d00c      	beq.n	800210e <__aeabi_f2d+0x2e>
 80020f4:	21e0      	movs	r1, #224	; 0xe0
 80020f6:	0089      	lsls	r1, r1, #2
 80020f8:	468c      	mov	ip, r1
 80020fa:	076d      	lsls	r5, r5, #29
 80020fc:	0b12      	lsrs	r2, r2, #12
 80020fe:	4463      	add	r3, ip
 8002100:	051b      	lsls	r3, r3, #20
 8002102:	4313      	orrs	r3, r2
 8002104:	07e4      	lsls	r4, r4, #31
 8002106:	4323      	orrs	r3, r4
 8002108:	0028      	movs	r0, r5
 800210a:	0019      	movs	r1, r3
 800210c:	bd70      	pop	{r4, r5, r6, pc}
 800210e:	2b00      	cmp	r3, #0
 8002110:	d114      	bne.n	800213c <__aeabi_f2d+0x5c>
 8002112:	2d00      	cmp	r5, #0
 8002114:	d01b      	beq.n	800214e <__aeabi_f2d+0x6e>
 8002116:	0028      	movs	r0, r5
 8002118:	f000 f8b0 	bl	800227c <__clzsi2>
 800211c:	280a      	cmp	r0, #10
 800211e:	dc1c      	bgt.n	800215a <__aeabi_f2d+0x7a>
 8002120:	230b      	movs	r3, #11
 8002122:	002a      	movs	r2, r5
 8002124:	1a1b      	subs	r3, r3, r0
 8002126:	40da      	lsrs	r2, r3
 8002128:	0003      	movs	r3, r0
 800212a:	3315      	adds	r3, #21
 800212c:	409d      	lsls	r5, r3
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <__aeabi_f2d+0x88>)
 8002130:	0312      	lsls	r2, r2, #12
 8002132:	1a1b      	subs	r3, r3, r0
 8002134:	055b      	lsls	r3, r3, #21
 8002136:	0b12      	lsrs	r2, r2, #12
 8002138:	0d5b      	lsrs	r3, r3, #21
 800213a:	e7e1      	b.n	8002100 <__aeabi_f2d+0x20>
 800213c:	2d00      	cmp	r5, #0
 800213e:	d009      	beq.n	8002154 <__aeabi_f2d+0x74>
 8002140:	0b13      	lsrs	r3, r2, #12
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	0312      	lsls	r2, r2, #12
 8002146:	431a      	orrs	r2, r3
 8002148:	076d      	lsls	r5, r5, #29
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <__aeabi_f2d+0x8c>)
 800214c:	e7d8      	b.n	8002100 <__aeabi_f2d+0x20>
 800214e:	2300      	movs	r3, #0
 8002150:	2200      	movs	r2, #0
 8002152:	e7d5      	b.n	8002100 <__aeabi_f2d+0x20>
 8002154:	2200      	movs	r2, #0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <__aeabi_f2d+0x8c>)
 8002158:	e7d2      	b.n	8002100 <__aeabi_f2d+0x20>
 800215a:	0003      	movs	r3, r0
 800215c:	002a      	movs	r2, r5
 800215e:	3b0b      	subs	r3, #11
 8002160:	409a      	lsls	r2, r3
 8002162:	2500      	movs	r5, #0
 8002164:	e7e3      	b.n	800212e <__aeabi_f2d+0x4e>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	00000389 	.word	0x00000389
 800216c:	000007ff 	.word	0x000007ff

08002170 <__aeabi_d2f>:
 8002170:	0002      	movs	r2, r0
 8002172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002174:	004b      	lsls	r3, r1, #1
 8002176:	030d      	lsls	r5, r1, #12
 8002178:	0f40      	lsrs	r0, r0, #29
 800217a:	0d5b      	lsrs	r3, r3, #21
 800217c:	0fcc      	lsrs	r4, r1, #31
 800217e:	0a6d      	lsrs	r5, r5, #9
 8002180:	493a      	ldr	r1, [pc, #232]	; (800226c <__aeabi_d2f+0xfc>)
 8002182:	4305      	orrs	r5, r0
 8002184:	1c58      	adds	r0, r3, #1
 8002186:	00d7      	lsls	r7, r2, #3
 8002188:	4208      	tst	r0, r1
 800218a:	d00a      	beq.n	80021a2 <__aeabi_d2f+0x32>
 800218c:	4938      	ldr	r1, [pc, #224]	; (8002270 <__aeabi_d2f+0x100>)
 800218e:	1859      	adds	r1, r3, r1
 8002190:	29fe      	cmp	r1, #254	; 0xfe
 8002192:	dd16      	ble.n	80021c2 <__aeabi_d2f+0x52>
 8002194:	20ff      	movs	r0, #255	; 0xff
 8002196:	2200      	movs	r2, #0
 8002198:	05c0      	lsls	r0, r0, #23
 800219a:	4310      	orrs	r0, r2
 800219c:	07e4      	lsls	r4, r4, #31
 800219e:	4320      	orrs	r0, r4
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <__aeabi_d2f+0x44>
 80021a6:	433d      	orrs	r5, r7
 80021a8:	d026      	beq.n	80021f8 <__aeabi_d2f+0x88>
 80021aa:	2205      	movs	r2, #5
 80021ac:	0192      	lsls	r2, r2, #6
 80021ae:	0a52      	lsrs	r2, r2, #9
 80021b0:	b2d8      	uxtb	r0, r3
 80021b2:	e7f1      	b.n	8002198 <__aeabi_d2f+0x28>
 80021b4:	432f      	orrs	r7, r5
 80021b6:	d0ed      	beq.n	8002194 <__aeabi_d2f+0x24>
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	03d2      	lsls	r2, r2, #15
 80021bc:	20ff      	movs	r0, #255	; 0xff
 80021be:	432a      	orrs	r2, r5
 80021c0:	e7ea      	b.n	8002198 <__aeabi_d2f+0x28>
 80021c2:	2900      	cmp	r1, #0
 80021c4:	dd1b      	ble.n	80021fe <__aeabi_d2f+0x8e>
 80021c6:	0192      	lsls	r2, r2, #6
 80021c8:	1e50      	subs	r0, r2, #1
 80021ca:	4182      	sbcs	r2, r0
 80021cc:	00ed      	lsls	r5, r5, #3
 80021ce:	0f7f      	lsrs	r7, r7, #29
 80021d0:	432a      	orrs	r2, r5
 80021d2:	433a      	orrs	r2, r7
 80021d4:	0753      	lsls	r3, r2, #29
 80021d6:	d047      	beq.n	8002268 <__aeabi_d2f+0xf8>
 80021d8:	230f      	movs	r3, #15
 80021da:	4013      	ands	r3, r2
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d000      	beq.n	80021e2 <__aeabi_d2f+0x72>
 80021e0:	3204      	adds	r2, #4
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	04db      	lsls	r3, r3, #19
 80021e6:	4013      	ands	r3, r2
 80021e8:	d03e      	beq.n	8002268 <__aeabi_d2f+0xf8>
 80021ea:	1c48      	adds	r0, r1, #1
 80021ec:	29fe      	cmp	r1, #254	; 0xfe
 80021ee:	d0d1      	beq.n	8002194 <__aeabi_d2f+0x24>
 80021f0:	0192      	lsls	r2, r2, #6
 80021f2:	0a52      	lsrs	r2, r2, #9
 80021f4:	b2c0      	uxtb	r0, r0
 80021f6:	e7cf      	b.n	8002198 <__aeabi_d2f+0x28>
 80021f8:	2000      	movs	r0, #0
 80021fa:	2200      	movs	r2, #0
 80021fc:	e7cc      	b.n	8002198 <__aeabi_d2f+0x28>
 80021fe:	000a      	movs	r2, r1
 8002200:	3217      	adds	r2, #23
 8002202:	db2f      	blt.n	8002264 <__aeabi_d2f+0xf4>
 8002204:	2680      	movs	r6, #128	; 0x80
 8002206:	0436      	lsls	r6, r6, #16
 8002208:	432e      	orrs	r6, r5
 800220a:	251e      	movs	r5, #30
 800220c:	1a6d      	subs	r5, r5, r1
 800220e:	2d1f      	cmp	r5, #31
 8002210:	dd11      	ble.n	8002236 <__aeabi_d2f+0xc6>
 8002212:	2202      	movs	r2, #2
 8002214:	4252      	negs	r2, r2
 8002216:	1a52      	subs	r2, r2, r1
 8002218:	0031      	movs	r1, r6
 800221a:	40d1      	lsrs	r1, r2
 800221c:	2d20      	cmp	r5, #32
 800221e:	d004      	beq.n	800222a <__aeabi_d2f+0xba>
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <__aeabi_d2f+0x104>)
 8002222:	4694      	mov	ip, r2
 8002224:	4463      	add	r3, ip
 8002226:	409e      	lsls	r6, r3
 8002228:	4337      	orrs	r7, r6
 800222a:	003a      	movs	r2, r7
 800222c:	1e53      	subs	r3, r2, #1
 800222e:	419a      	sbcs	r2, r3
 8002230:	430a      	orrs	r2, r1
 8002232:	2100      	movs	r1, #0
 8002234:	e7ce      	b.n	80021d4 <__aeabi_d2f+0x64>
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <__aeabi_d2f+0x108>)
 8002238:	0038      	movs	r0, r7
 800223a:	4694      	mov	ip, r2
 800223c:	4463      	add	r3, ip
 800223e:	4098      	lsls	r0, r3
 8002240:	003a      	movs	r2, r7
 8002242:	1e41      	subs	r1, r0, #1
 8002244:	4188      	sbcs	r0, r1
 8002246:	409e      	lsls	r6, r3
 8002248:	40ea      	lsrs	r2, r5
 800224a:	4330      	orrs	r0, r6
 800224c:	4302      	orrs	r2, r0
 800224e:	2100      	movs	r1, #0
 8002250:	0753      	lsls	r3, r2, #29
 8002252:	d1c1      	bne.n	80021d8 <__aeabi_d2f+0x68>
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0013      	movs	r3, r2
 8002258:	04c9      	lsls	r1, r1, #19
 800225a:	2001      	movs	r0, #1
 800225c:	400b      	ands	r3, r1
 800225e:	420a      	tst	r2, r1
 8002260:	d1c6      	bne.n	80021f0 <__aeabi_d2f+0x80>
 8002262:	e7a3      	b.n	80021ac <__aeabi_d2f+0x3c>
 8002264:	2300      	movs	r3, #0
 8002266:	e7a0      	b.n	80021aa <__aeabi_d2f+0x3a>
 8002268:	000b      	movs	r3, r1
 800226a:	e79f      	b.n	80021ac <__aeabi_d2f+0x3c>
 800226c:	000007fe 	.word	0x000007fe
 8002270:	fffffc80 	.word	0xfffffc80
 8002274:	fffffca2 	.word	0xfffffca2
 8002278:	fffffc82 	.word	0xfffffc82

0800227c <__clzsi2>:
 800227c:	211c      	movs	r1, #28
 800227e:	2301      	movs	r3, #1
 8002280:	041b      	lsls	r3, r3, #16
 8002282:	4298      	cmp	r0, r3
 8002284:	d301      	bcc.n	800228a <__clzsi2+0xe>
 8002286:	0c00      	lsrs	r0, r0, #16
 8002288:	3910      	subs	r1, #16
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	4298      	cmp	r0, r3
 800228e:	d301      	bcc.n	8002294 <__clzsi2+0x18>
 8002290:	0a00      	lsrs	r0, r0, #8
 8002292:	3908      	subs	r1, #8
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	4298      	cmp	r0, r3
 8002298:	d301      	bcc.n	800229e <__clzsi2+0x22>
 800229a:	0900      	lsrs	r0, r0, #4
 800229c:	3904      	subs	r1, #4
 800229e:	a202      	add	r2, pc, #8	; (adr r2, 80022a8 <__clzsi2+0x2c>)
 80022a0:	5c10      	ldrb	r0, [r2, r0]
 80022a2:	1840      	adds	r0, r0, r1
 80022a4:	4770      	bx	lr
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	02020304 	.word	0x02020304
 80022ac:	01010101 	.word	0x01010101
	...

080022b8 <get_goal_velocity>:
float error_int=0.0;
float max_int=60;
float k_coff=0.08;

float get_goal_velocity(int16_t nowforce,int16_t goalforce)
{
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	0002      	movs	r2, r0
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	801a      	strh	r2, [r3, #0]
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	1c0a      	adds	r2, r1, #0
 80022c8:	801a      	strh	r2, [r3, #0]
	float sum=0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
	sum+=Kp*(goalforce-nowforce);
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	5e9a      	ldrsh	r2, [r3, r2]
 80022d4:	1dbb      	adds	r3, r7, #6
 80022d6:	2100      	movs	r1, #0
 80022d8:	5e5b      	ldrsh	r3, [r3, r1]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	0018      	movs	r0, r3
 80022de:	f7fe ff79 	bl	80011d4 <__aeabi_i2f>
 80022e2:	1c02      	adds	r2, r0, #0
 80022e4:	4b41      	ldr	r3, [pc, #260]	; (80023ec <get_goal_velocity+0x134>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	1c19      	adds	r1, r3, #0
 80022ea:	1c10      	adds	r0, r2, #0
 80022ec:	f7fe fc64 	bl	8000bb8 <__aeabi_fmul>
 80022f0:	1c03      	adds	r3, r0, #0
 80022f2:	1c19      	adds	r1, r3, #0
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7fe f8f5 	bl	80004e4 <__aeabi_fadd>
 80022fa:	1c03      	adds	r3, r0, #0
 80022fc:	60fb      	str	r3, [r7, #12]
	error_int += Ki*(goalforce-nowforce);
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	2200      	movs	r2, #0
 8002302:	5e9a      	ldrsh	r2, [r3, r2]
 8002304:	1dbb      	adds	r3, r7, #6
 8002306:	2100      	movs	r1, #0
 8002308:	5e5b      	ldrsh	r3, [r3, r1]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	0018      	movs	r0, r3
 800230e:	f7fe ff61 	bl	80011d4 <__aeabi_i2f>
 8002312:	1c02      	adds	r2, r0, #0
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <get_goal_velocity+0x138>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	1c19      	adds	r1, r3, #0
 800231a:	1c10      	adds	r0, r2, #0
 800231c:	f7fe fc4c 	bl	8000bb8 <__aeabi_fmul>
 8002320:	1c03      	adds	r3, r0, #0
 8002322:	1c1a      	adds	r2, r3, #0
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <get_goal_velocity+0x13c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c19      	adds	r1, r3, #0
 800232a:	1c10      	adds	r0, r2, #0
 800232c:	f7fe f8da 	bl	80004e4 <__aeabi_fadd>
 8002330:	1c03      	adds	r3, r0, #0
 8002332:	1c1a      	adds	r2, r3, #0
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <get_goal_velocity+0x13c>)
 8002336:	601a      	str	r2, [r3, #0]
	if(error_int > max_int) error_int = max_int;
 8002338:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <get_goal_velocity+0x13c>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <get_goal_velocity+0x140>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1c19      	adds	r1, r3, #0
 8002342:	1c10      	adds	r0, r2, #0
 8002344:	f7fe f8ba 	bl	80004bc <__aeabi_fcmpgt>
 8002348:	1e03      	subs	r3, r0, #0
 800234a:	d003      	beq.n	8002354 <get_goal_velocity+0x9c>
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <get_goal_velocity+0x140>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <get_goal_velocity+0x13c>)
 8002352:	601a      	str	r2, [r3, #0]
	if(error_int < -max_int) error_int = -max_int;
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <get_goal_velocity+0x140>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	0612      	lsls	r2, r2, #24
 800235c:	405a      	eors	r2, r3
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <get_goal_velocity+0x13c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1c19      	adds	r1, r3, #0
 8002364:	1c10      	adds	r0, r2, #0
 8002366:	f7fe f8a9 	bl	80004bc <__aeabi_fcmpgt>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d006      	beq.n	800237c <get_goal_velocity+0xc4>
 800236e:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <get_goal_velocity+0x140>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	0612      	lsls	r2, r2, #24
 8002376:	405a      	eors	r2, r3
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <get_goal_velocity+0x13c>)
 800237a:	601a      	str	r2, [r3, #0]
	sum+=error_int;
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <get_goal_velocity+0x13c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1c19      	adds	r1, r3, #0
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7fe f8ae 	bl	80004e4 <__aeabi_fadd>
 8002388:	1c03      	adds	r3, r0, #0
 800238a:	60fb      	str	r3, [r7, #12]
	if(k_coff<0.05)
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <get_goal_velocity+0x144>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1c18      	adds	r0, r3, #0
 8002392:	f7ff fea5 	bl	80020e0 <__aeabi_f2d>
 8002396:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <get_goal_velocity+0x148>)
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <get_goal_velocity+0x14c>)
 800239a:	f7fe f841 	bl	8000420 <__aeabi_dcmplt>
 800239e:	1e03      	subs	r3, r0, #0
 80023a0:	d002      	beq.n	80023a8 <get_goal_velocity+0xf0>
		k_coff = 0.05;
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <get_goal_velocity+0x144>)
 80023a4:	4a18      	ldr	r2, [pc, #96]	; (8002408 <get_goal_velocity+0x150>)
 80023a6:	601a      	str	r2, [r3, #0]
	return sum*0.09/k_coff;
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff fe99 	bl	80020e0 <__aeabi_f2d>
 80023ae:	4a17      	ldr	r2, [pc, #92]	; (800240c <get_goal_velocity+0x154>)
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <get_goal_velocity+0x158>)
 80023b2:	f7ff fba3 	bl	8001afc <__aeabi_dmul>
 80023b6:	0002      	movs	r2, r0
 80023b8:	000b      	movs	r3, r1
 80023ba:	0014      	movs	r4, r2
 80023bc:	001d      	movs	r5, r3
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <get_goal_velocity+0x144>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1c18      	adds	r0, r3, #0
 80023c4:	f7ff fe8c 	bl	80020e0 <__aeabi_f2d>
 80023c8:	0002      	movs	r2, r0
 80023ca:	000b      	movs	r3, r1
 80023cc:	0020      	movs	r0, r4
 80023ce:	0029      	movs	r1, r5
 80023d0:	f7fe ff9a 	bl	8001308 <__aeabi_ddiv>
 80023d4:	0002      	movs	r2, r0
 80023d6:	000b      	movs	r3, r1
 80023d8:	0010      	movs	r0, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	f7ff fec8 	bl	8002170 <__aeabi_d2f>
 80023e0:	1c03      	adds	r3, r0, #0
}
 80023e2:	1c18      	adds	r0, r3, #0
 80023e4:	46bd      	mov	sp, r7
 80023e6:	b004      	add	sp, #16
 80023e8:	bdb0      	pop	{r4, r5, r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004
 80023f4:	200001d4 	.word	0x200001d4
 80023f8:	20000008 	.word	0x20000008
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	9999999a 	.word	0x9999999a
 8002404:	3fa99999 	.word	0x3fa99999
 8002408:	3d4ccccd 	.word	0x3d4ccccd
 800240c:	70a3d70a 	.word	0x70a3d70a
 8002410:	3fb70a3d 	.word	0x3fb70a3d

08002414 <get_pos_goal_speed>:
int32_t now_r;
extern int motor_response_flag;

const int16_t MAX_POS_SPEED = 1600;
float get_pos_goal_speed(int32_t now_pos,int16_t goal_pos)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	000a      	movs	r2, r1
 800241e:	1cbb      	adds	r3, r7, #2
 8002420:	801a      	strh	r2, [r3, #0]
	int16_t delta_pos = goal_pos - now_pos/100;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2264      	movs	r2, #100	; 0x64
 8002426:	4251      	negs	r1, r2
 8002428:	0018      	movs	r0, r3
 800242a:	f7fd fef7 	bl	800021c <__divsi3>
 800242e:	0003      	movs	r3, r0
 8002430:	b29a      	uxth	r2, r3
 8002432:	1cbb      	adds	r3, r7, #2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	18d3      	adds	r3, r2, r3
 8002438:	b29a      	uxth	r2, r3
 800243a:	210e      	movs	r1, #14
 800243c:	187b      	adds	r3, r7, r1
 800243e:	801a      	strh	r2, [r3, #0]
	if(delta_pos * 25> MAX_POS_SPEED)
 8002440:	187b      	adds	r3, r7, r1
 8002442:	2200      	movs	r2, #0
 8002444:	5e9a      	ldrsh	r2, [r3, r2]
 8002446:	0013      	movs	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	189b      	adds	r3, r3, r2
 800244c:	009a      	lsls	r2, r3, #2
 800244e:	189b      	adds	r3, r3, r2
 8002450:	22c8      	movs	r2, #200	; 0xc8
 8002452:	00d2      	lsls	r2, r2, #3
 8002454:	4293      	cmp	r3, r2
 8002456:	dd06      	ble.n	8002466 <get_pos_goal_speed+0x52>
		return MAX_POS_SPEED;
 8002458:	23c8      	movs	r3, #200	; 0xc8
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	0018      	movs	r0, r3
 800245e:	f7fe feb9 	bl	80011d4 <__aeabi_i2f>
 8002462:	1c03      	adds	r3, r0, #0
 8002464:	e022      	b.n	80024ac <get_pos_goal_speed+0x98>
	if(delta_pos * 25< - MAX_POS_SPEED)
 8002466:	230e      	movs	r3, #14
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2200      	movs	r2, #0
 800246c:	5e9a      	ldrsh	r2, [r3, r2]
 800246e:	0013      	movs	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	189b      	adds	r3, r3, r2
 8002474:	009a      	lsls	r2, r3, #2
 8002476:	189a      	adds	r2, r3, r2
 8002478:	23c8      	movs	r3, #200	; 0xc8
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	425b      	negs	r3, r3
 800247e:	429a      	cmp	r2, r3
 8002480:	da07      	bge.n	8002492 <get_pos_goal_speed+0x7e>
		return -MAX_POS_SPEED;
 8002482:	23c8      	movs	r3, #200	; 0xc8
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	425b      	negs	r3, r3
 8002488:	0018      	movs	r0, r3
 800248a:	f7fe fea3 	bl	80011d4 <__aeabi_i2f>
 800248e:	1c03      	adds	r3, r0, #0
 8002490:	e00c      	b.n	80024ac <get_pos_goal_speed+0x98>
	return delta_pos * 25;
 8002492:	230e      	movs	r3, #14
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2200      	movs	r2, #0
 8002498:	5e9a      	ldrsh	r2, [r3, r2]
 800249a:	0013      	movs	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	189b      	adds	r3, r3, r2
 80024a0:	009a      	lsls	r2, r3, #2
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fe fe95 	bl	80011d4 <__aeabi_i2f>
 80024aa:	1c03      	adds	r3, r0, #0
}
 80024ac:	1c18      	adds	r0, r3, #0
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b004      	add	sp, #16
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <set_Motor_Speed>:

uint8_t set_Motor_Speed(CAN_HandleTypeDef* hcan,float goal)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	  int32_t goalspeed = (int32_t)(goal*100);
 80024be:	491a      	ldr	r1, [pc, #104]	; (8002528 <set_Motor_Speed+0x74>)
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7fe fb79 	bl	8000bb8 <__aeabi_fmul>
 80024c6:	1c03      	adds	r3, r0, #0
 80024c8:	1c18      	adds	r0, r3, #0
 80024ca:	f7fe fe63 	bl	8001194 <__aeabi_f2iz>
 80024ce:	0003      	movs	r3, r0
 80024d0:	60fb      	str	r3, [r7, #12]
	  can_t[0] = 0xA2;
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <set_Motor_Speed+0x78>)
 80024d4:	22a2      	movs	r2, #162	; 0xa2
 80024d6:	701a      	strb	r2, [r3, #0]
	  can_t[1] = 0x00;
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <set_Motor_Speed+0x78>)
 80024da:	2200      	movs	r2, #0
 80024dc:	705a      	strb	r2, [r3, #1]
	  can_t[2] = 0x00;
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <set_Motor_Speed+0x78>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]
	  can_t[3] = 0x00;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <set_Motor_Speed+0x78>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	70da      	strb	r2, [r3, #3]
	  can_t[4] = (goalspeed>>0)&0xff;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <set_Motor_Speed+0x78>)
 80024f0:	711a      	strb	r2, [r3, #4]
	  can_t[5] = (goalspeed>>8)&0xff;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	121b      	asrs	r3, r3, #8
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <set_Motor_Speed+0x78>)
 80024fa:	715a      	strb	r2, [r3, #5]
	  can_t[6] = (goalspeed>>16)&0xff;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	141b      	asrs	r3, r3, #16
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <set_Motor_Speed+0x78>)
 8002504:	719a      	strb	r2, [r3, #6]
	  can_t[7] = (goalspeed>>24)&0xff;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0e1b      	lsrs	r3, r3, #24
 800250a:	b2da      	uxtb	r2, r3
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <set_Motor_Speed+0x78>)
 800250e:	71da      	strb	r2, [r3, #7]

	  return CAN_Send_Msg(hcan,can_t);
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <set_Motor_Speed+0x78>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0011      	movs	r1, r2
 8002516:	0018      	movs	r0, r3
 8002518:	f000 f87a 	bl	8002610 <CAN_Send_Msg>
 800251c:	0003      	movs	r3, r0
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	42c80000 	.word	0x42c80000
 800252c:	20000218 	.word	0x20000218

08002530 <clear_can_t>:
	  can_t[7] = (pos>>24)&0xff;

	  return CAN_Send_Msg(hcan,can_t);
}
void clear_can_t()
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
	for(int i=0;i<8;i++)
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	e007      	b.n	800254c <clear_can_t+0x1c>
		can_t[i]=0x00;
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <clear_can_t+0x2c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	18d3      	adds	r3, r2, r3
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<8;i++)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3301      	adds	r3, #1
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b07      	cmp	r3, #7
 8002550:	ddf4      	ble.n	800253c <clear_can_t+0xc>
}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000218 	.word	0x20000218

08002560 <get_motor_info>:
uint8_t get_motor_info(CAN_HandleTypeDef* hcan)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	  clear_can_t();
 8002568:	f7ff ffe2 	bl	8002530 <clear_can_t>
	  can_t[0] = 0x9C;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <get_motor_info+0x28>)
 800256e:	229c      	movs	r2, #156	; 0x9c
 8002570:	701a      	strb	r2, [r3, #0]
	  return CAN_Send_Msg(hcan,can_t);
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <get_motor_info+0x28>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	0011      	movs	r1, r2
 8002578:	0018      	movs	r0, r3
 800257a:	f000 f849 	bl	8002610 <CAN_Send_Msg>
 800257e:	0003      	movs	r3, r0
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b002      	add	sp, #8
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000218 	.word	0x20000218

0800258c <stop_Motor>:
	clear_can_t();
	can_t[0] = 0x92;
	return CAN_Send_Msg(hcan,can_t);
}
uint8_t stop_Motor(CAN_HandleTypeDef* hcan)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	  clear_can_t();
 8002594:	f7ff ffcc 	bl	8002530 <clear_can_t>
	  can_t[0] = 0x81;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <stop_Motor+0x28>)
 800259a:	2281      	movs	r2, #129	; 0x81
 800259c:	701a      	strb	r2, [r3, #0]
	  return CAN_Send_Msg(hcan,can_t);
 800259e:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <stop_Motor+0x28>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0011      	movs	r1, r2
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 f833 	bl	8002610 <CAN_Send_Msg>
 80025aa:	0003      	movs	r3, r0
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000218 	.word	0x20000218

080025b8 <start_Motor>:
uint8_t start_Motor(CAN_HandleTypeDef* hcan)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	  clear_can_t();
 80025c0:	f7ff ffb6 	bl	8002530 <clear_can_t>
	  can_t[0] = 0x88;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <start_Motor+0x28>)
 80025c6:	2288      	movs	r2, #136	; 0x88
 80025c8:	701a      	strb	r2, [r3, #0]
	  return CAN_Send_Msg(hcan,can_t);
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <start_Motor+0x28>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0011      	movs	r1, r2
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 f81d 	bl	8002610 <CAN_Send_Msg>
 80025d6:	0003      	movs	r3, r0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000218 	.word	0x20000218

080025e4 <clear_error>:
uint8_t clear_error(CAN_HandleTypeDef* hcan)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	clear_can_t();
 80025ec:	f7ff ffa0 	bl	8002530 <clear_can_t>
	can_t[0] = 0x9B;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <clear_error+0x28>)
 80025f2:	229b      	movs	r2, #155	; 0x9b
 80025f4:	701a      	strb	r2, [r3, #0]
	return CAN_Send_Msg(hcan,can_t);
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <clear_error+0x28>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 f807 	bl	8002610 <CAN_Send_Msg>
 8002602:	0003      	movs	r3, r0
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000218 	.word	0x20000218

08002610 <CAN_Send_Msg>:
{
	clear_can_t();
	can_t[0] = 0x19;
	return CAN_Send_Msg(hcan,can_t);
}
uint8_t CAN_Send_Msg(CAN_HandleTypeDef* hcan,uint8_t *msg){
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
	TxHeader.StdId = 0x140 + 0x01;
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <CAN_Send_Msg+0x84>)
 800261c:	2242      	movs	r2, #66	; 0x42
 800261e:	32ff      	adds	r2, #255	; 0xff
 8002620:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x00;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <CAN_Send_Msg+0x84>)
 8002624:	2200      	movs	r2, #0
 8002626:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <CAN_Send_Msg+0x84>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <CAN_Send_Msg+0x84>)
 8002630:	2200      	movs	r2, #0
 8002632:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <CAN_Send_Msg+0x84>)
 8002636:	2208      	movs	r2, #8
 8002638:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <CAN_Send_Msg+0x84>)
 800263c:	2200      	movs	r2, #0
 800263e:	751a      	strb	r2, [r3, #20]
    int8_t ret = HAL_CAN_AddTxMessage(hcan, &TxHeader, msg, &TxMailbox);
 8002640:	4b15      	ldr	r3, [pc, #84]	; (8002698 <CAN_Send_Msg+0x88>)
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	4913      	ldr	r1, [pc, #76]	; (8002694 <CAN_Send_Msg+0x84>)
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f004 fff8 	bl	800763c <HAL_CAN_AddTxMessage>
 800264c:	0003      	movs	r3, r0
 800264e:	001a      	movs	r2, r3
 8002650:	210b      	movs	r1, #11
 8002652:	187b      	adds	r3, r7, r1
 8002654:	701a      	strb	r2, [r3, #0]
    if(ret != HAL_OK)
 8002656:	187b      	adds	r3, r7, r1
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b25b      	sxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <CAN_Send_Msg+0x54>
    	return 1;
 8002660:	2301      	movs	r3, #1
 8002662:	e012      	b.n	800268a <CAN_Send_Msg+0x7a>
    int failtime=0;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
    while(HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3)
 8002668:	e007      	b.n	800267a <CAN_Send_Msg+0x6a>
    {
    	failtime++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
    	if(failtime>100)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	dd01      	ble.n	800267a <CAN_Send_Msg+0x6a>
    		return 1;
 8002676:	2301      	movs	r3, #1
 8002678:	e007      	b.n	800268a <CAN_Send_Msg+0x7a>
    while(HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f005 f8af 	bl	80077e0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002682:	0003      	movs	r3, r0
 8002684:	2b03      	cmp	r3, #3
 8002686:	d1f0      	bne.n	800266a <CAN_Send_Msg+0x5a>
    }
    return 0;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	200001d8 	.word	0x200001d8
 8002698:	2000020c 	.word	0x2000020c

0800269c <CANFilter_init>:
void CANFilter_init(CAN_HandleTypeDef* hcan)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	// configure the CAN filter
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80026a4:	2108      	movs	r1, #8
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2201      	movs	r2, #1
 80026b0:	61da      	str	r2, [r3, #28]
//	sFilterConfig.FilterIdHigh = 0x140 << 5;
//	sFilterConfig.FilterIdLow = 0x0000;
//	sFilterConfig.FilterMaskIdHigh = 0xFC00;
//	sFilterConfig.FilterMaskIdLow = 0x0006;
	sFilterConfig.FilterIdHigh = 0x0000;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2200      	movs	r2, #0
 80026bc:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	2201      	movs	r2, #1
 80026d4:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterBank = 0;
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
	if(HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 80026dc:	187a      	adds	r2, r7, r1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0011      	movs	r1, r2
 80026e2:	0018      	movs	r0, r3
 80026e4:	f004 fe72 	bl	80073cc <HAL_CAN_ConfigFilter>
 80026e8:	1e03      	subs	r3, r0, #0
 80026ea:	d001      	beq.n	80026f0 <CANFilter_init+0x54>
	{
		Error_Handler();
 80026ec:	f001 f80e 	bl	800370c <Error_Handler>
	}

	if (HAL_CAN_Start(hcan) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f004 ff5c 	bl	80075b0 <HAL_CAN_Start>
 80026f8:	1e03      	subs	r3, r0, #0
 80026fa:	d001      	beq.n	8002700 <CANFilter_init+0x64>
	{
	    Error_Handler();
 80026fc:	f001 f806 	bl	800370c <Error_Handler>
	}
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2102      	movs	r1, #2
 8002704:	0018      	movs	r0, r3
 8002706:	f005 f9ce 	bl	8007aa6 <HAL_CAN_ActivateNotification>
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b00c      	add	sp, #48	; 0x30
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, can_r) != HAL_OK)
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800271e:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	2100      	movs	r1, #0
 8002724:	f005 f894 	bl	8007850 <HAL_CAN_GetRxMessage>
 8002728:	1e03      	subs	r3, r0, #0
 800272a:	d001      	beq.n	8002730 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
  {
	  /* Reception Error */
	  Error_Handler();
 800272c:	f000 ffee 	bl	800370c <Error_Handler>
  }
  if ((RxHeader.StdId == (0x140 + 0x01)) && (RxHeader.DLC == 8))
 8002730:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2342      	movs	r3, #66	; 0x42
 8002736:	33ff      	adds	r3, #255	; 0xff
 8002738:	429a      	cmp	r2, r3
 800273a:	d000      	beq.n	800273e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 800273c:	e085      	b.n	800284a <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
 800273e:	4b46      	ldr	r3, [pc, #280]	; (8002858 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b08      	cmp	r3, #8
 8002744:	d000      	beq.n	8002748 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8002746:	e080      	b.n	800284a <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
  {
	  /* get encoder value */
	  if(can_r[0]==motor_response_flag)
 8002748:	4b42      	ldr	r3, [pc, #264]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	001a      	movs	r2, r3
 800274e:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d102      	bne.n	800275c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		  motor_response_flag = 0;
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
	  if(can_r[0] == 0xA2 || can_r[0] == 0xA3 || can_r[0] == 0xA4 || can_r[0]==0x9C)
 800275c:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2ba2      	cmp	r3, #162	; 0xa2
 8002762:	d00b      	beq.n	800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2ba3      	cmp	r3, #163	; 0xa3
 800276a:	d007      	beq.n	800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 800276c:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2ba4      	cmp	r3, #164	; 0xa4
 8002772:	d003      	beq.n	800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
 8002774:	4b37      	ldr	r3, [pc, #220]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b9c      	cmp	r3, #156	; 0x9c
 800277a:	d166      	bne.n	800284a <HAL_CAN_RxFifo0MsgPendingCallback+0x136>
	  {
		  uint16_t current_data = (can_r[3] << 8) + can_r[2];
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800277e:	78db      	ldrb	r3, [r3, #3]
 8002780:	b29b      	uxth	r3, r3
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	b299      	uxth	r1, r3
 8002786:	4b33      	ldr	r3, [pc, #204]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8002788:	789b      	ldrb	r3, [r3, #2]
 800278a:	b29a      	uxth	r2, r3
 800278c:	2016      	movs	r0, #22
 800278e:	183b      	adds	r3, r7, r0
 8002790:	188a      	adds	r2, r1, r2
 8002792:	801a      	strh	r2, [r3, #0]
		  uint16_t speed_data = (can_r[5] << 8) + can_r[4];
 8002794:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8002796:	795b      	ldrb	r3, [r3, #5]
 8002798:	b29b      	uxth	r3, r3
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	b299      	uxth	r1, r3
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	2414      	movs	r4, #20
 80027a6:	193b      	adds	r3, r7, r4
 80027a8:	188a      	adds	r2, r1, r2
 80027aa:	801a      	strh	r2, [r3, #0]
		  uint32_t pos_data = (can_r[7] << 8) + can_r[6];
 80027ac:	4b29      	ldr	r3, [pc, #164]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80027ae:	79db      	ldrb	r3, [r3, #7]
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	4a28      	ldr	r2, [pc, #160]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80027b4:	7992      	ldrb	r2, [r2, #6]
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
		  now_speed = (int16_t)speed_data;
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	2200      	movs	r2, #0
 80027be:	5e9a      	ldrsh	r2, [r3, r2]
 80027c0:	4b27      	ldr	r3, [pc, #156]	; (8002860 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 80027c2:	801a      	strh	r2, [r3, #0]
		  now_current = ((int16_t)current_data)*16;
 80027c4:	183b      	adds	r3, r7, r0
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 80027d0:	801a      	strh	r2, [r3, #0]
		  uint16_t pre_now_pos = (uint16_t)(pos_data*1125 / 2048);
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	0013      	movs	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	011a      	lsls	r2, r3, #4
 80027dc:	1ad2      	subs	r2, r2, r3
 80027de:	0113      	lsls	r3, r2, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	0ada      	lsrs	r2, r3, #11
 80027e4:	210e      	movs	r1, #14
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	801a      	strh	r2, [r3, #0]
		  if(pre_now_pos> 20000 + now_tick)
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	881a      	ldrh	r2, [r3, #0]
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	491e      	ldr	r1, [pc, #120]	; (800286c <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 80027f4:	468c      	mov	ip, r1
 80027f6:	4463      	add	r3, ip
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dd05      	ble.n	8002808 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
			  now_r--;
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e00e      	b.n	8002826 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
		  else if(pre_now_pos+ 20000 < now_tick)
 8002808:	230e      	movs	r3, #14
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8002810:	4694      	mov	ip, r2
 8002812:	4463      	add	r3, ip
 8002814:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8002816:	8812      	ldrh	r2, [r2, #0]
 8002818:	4293      	cmp	r3, r2
 800281a:	da04      	bge.n	8002826 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
			  now_r++;
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 8002824:	601a      	str	r2, [r3, #0]
		  now_tick = pre_now_pos;
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8002828:	220e      	movs	r2, #14
 800282a:	18ba      	adds	r2, r7, r2
 800282c:	8812      	ldrh	r2, [r2, #0]
 800282e:	801a      	strh	r2, [r3, #0]
		  now_pos = (now_tick-pos0_r) + now_r*36000;
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	001a      	movs	r2, r3
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	1ad2      	subs	r2, r2, r3
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	490d      	ldr	r1, [pc, #52]	; (8002878 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8002842:	434b      	muls	r3, r1
 8002844:	18d2      	adds	r2, r2, r3
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8002848:	601a      	str	r2, [r3, #0]
//			  pos0_a_data +=can_r[i];
//		  }
//		  pos0_a = (int64_t)pos0_a_data;
//	  }
  }
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b007      	add	sp, #28
 8002850:	bd90      	pop	{r4, r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	20000210 	.word	0x20000210
 8002858:	200001f0 	.word	0x200001f0
 800285c:	20000250 	.word	0x20000250
 8002860:	20000222 	.word	0x20000222
 8002864:	20000220 	.word	0x20000220
 8002868:	20000228 	.word	0x20000228
 800286c:	00004e20 	.word	0x00004e20
 8002870:	2000022c 	.word	0x2000022c
 8002874:	2000022a 	.word	0x2000022a
 8002878:	00008ca0 	.word	0x00008ca0
 800287c:	20000224 	.word	0x20000224

08002880 <GetNowWeight>:
float lastx[3];
float lasty[3];
float zeropoint=29.0;
float weighttime=0.9099;//0.9099,0.6275
float GetNowWeight(ADC_HandleTypeDef* hadc)
{
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0018      	movs	r0, r3
 800288c:	f003 ffb4 	bl	80067f8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	210a      	movs	r1, #10
 8002894:	0018      	movs	r0, r3
 8002896:	f004 f843 	bl	8006920 <HAL_ADC_PollForConversion>
  int16_t ADC_value = (int16_t)HAL_ADC_GetValue(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	0018      	movs	r0, r3
 800289e:	f004 f8d7 	bl	8006a50 <HAL_ADC_GetValue>
 80028a2:	0002      	movs	r2, r0
 80028a4:	250e      	movs	r5, #14
 80028a6:	197b      	adds	r3, r7, r5
 80028a8:	801a      	strh	r2, [r3, #0]
  HAL_ADC_Stop(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f003 fff7 	bl	80068a0 <HAL_ADC_Stop>

  float y = b[0]*ADC_value;
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <GetNowWeight+0x120>)
 80028b4:	681c      	ldr	r4, [r3, #0]
 80028b6:	197b      	adds	r3, r7, r5
 80028b8:	2200      	movs	r2, #0
 80028ba:	5e9b      	ldrsh	r3, [r3, r2]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7fe fc89 	bl	80011d4 <__aeabi_i2f>
 80028c2:	1c03      	adds	r3, r0, #0
 80028c4:	1c19      	adds	r1, r3, #0
 80028c6:	1c20      	adds	r0, r4, #0
 80028c8:	f7fe f976 	bl	8000bb8 <__aeabi_fmul>
 80028cc:	1c03      	adds	r3, r0, #0
 80028ce:	617b      	str	r3, [r7, #20]
  for(int i=0;i<3;i++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e028      	b.n	8002928 <GetNowWeight+0xa8>
  {
	  y+=b[i+1]*lastx[i];
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <GetNowWeight+0x120>)
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	58d0      	ldr	r0, [r2, r3]
 80028e0:	4b30      	ldr	r3, [pc, #192]	; (80029a4 <GetNowWeight+0x124>)
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	0092      	lsls	r2, r2, #2
 80028e6:	58d3      	ldr	r3, [r2, r3]
 80028e8:	1c19      	adds	r1, r3, #0
 80028ea:	f7fe f965 	bl	8000bb8 <__aeabi_fmul>
 80028ee:	1c03      	adds	r3, r0, #0
 80028f0:	1c19      	adds	r1, r3, #0
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7fd fdf6 	bl	80004e4 <__aeabi_fadd>
 80028f8:	1c03      	adds	r3, r0, #0
 80028fa:	617b      	str	r3, [r7, #20]
	  y-=a[i+1]*lasty[i];
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <GetNowWeight+0x128>)
 8002902:	0092      	lsls	r2, r2, #2
 8002904:	58d0      	ldr	r0, [r2, r3]
 8002906:	4b29      	ldr	r3, [pc, #164]	; (80029ac <GetNowWeight+0x12c>)
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	58d3      	ldr	r3, [r2, r3]
 800290e:	1c19      	adds	r1, r3, #0
 8002910:	f7fe f952 	bl	8000bb8 <__aeabi_fmul>
 8002914:	1c03      	adds	r3, r0, #0
 8002916:	1c19      	adds	r1, r3, #0
 8002918:	6978      	ldr	r0, [r7, #20]
 800291a:	f7fe fa9b 	bl	8000e54 <__aeabi_fsub>
 800291e:	1c03      	adds	r3, r0, #0
 8002920:	617b      	str	r3, [r7, #20]
  for(int i=0;i<3;i++)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	3301      	adds	r3, #1
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b02      	cmp	r3, #2
 800292c:	ddd3      	ble.n	80028d6 <GetNowWeight+0x56>
  }
  lastx[2]=lastx[1];lastx[1]=lastx[0];lastx[0]=ADC_value*1.0;
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <GetNowWeight+0x124>)
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <GetNowWeight+0x124>)
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <GetNowWeight+0x124>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <GetNowWeight+0x124>)
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	230e      	movs	r3, #14
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	2200      	movs	r2, #0
 8002944:	5e9b      	ldrsh	r3, [r3, r2]
 8002946:	0018      	movs	r0, r3
 8002948:	f7ff fb9a 	bl	8002080 <__aeabi_i2d>
 800294c:	0002      	movs	r2, r0
 800294e:	000b      	movs	r3, r1
 8002950:	0010      	movs	r0, r2
 8002952:	0019      	movs	r1, r3
 8002954:	f7ff fc0c 	bl	8002170 <__aeabi_d2f>
 8002958:	1c02      	adds	r2, r0, #0
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <GetNowWeight+0x124>)
 800295c:	601a      	str	r2, [r3, #0]
  lasty[2]=lasty[1];lasty[1]=lasty[0];lasty[0]=y;
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <GetNowWeight+0x12c>)
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <GetNowWeight+0x12c>)
 8002964:	609a      	str	r2, [r3, #8]
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <GetNowWeight+0x12c>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <GetNowWeight+0x12c>)
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <GetNowWeight+0x12c>)
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	601a      	str	r2, [r3, #0]
//  float y=ADC_value*1.0;

  float nowforce = ((y-zeropoint)*weighttime);
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <GetNowWeight+0x130>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1c19      	adds	r1, r3, #0
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7fe fa6a 	bl	8000e54 <__aeabi_fsub>
 8002980:	1c03      	adds	r3, r0, #0
 8002982:	1c1a      	adds	r2, r3, #0
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <GetNowWeight+0x134>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	1c19      	adds	r1, r3, #0
 800298a:	1c10      	adds	r0, r2, #0
 800298c:	f7fe f914 	bl	8000bb8 <__aeabi_fmul>
 8002990:	1c03      	adds	r3, r0, #0
 8002992:	60bb      	str	r3, [r7, #8]
  return nowforce;
 8002994:	68bb      	ldr	r3, [r7, #8]
}
 8002996:	1c18      	adds	r0, r3, #0
 8002998:	46bd      	mov	sp, r7
 800299a:	b006      	add	sp, #24
 800299c:	bdb0      	pop	{r4, r5, r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	20000020 	.word	0x20000020
 80029a4:	20000230 	.word	0x20000230
 80029a8:	20000010 	.word	0x20000010
 80029ac:	2000023c 	.word	0x2000023c
 80029b0:	20000030 	.word	0x20000030
 80029b4:	20000034 	.word	0x20000034

080029b8 <IIC_Init>:
#include "io_i2c.h"


//��ʼ��IIC
void IIC_Init(void)
{					     
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	0018      	movs	r0, r3
 80029c2:	2314      	movs	r3, #20
 80029c4:	001a      	movs	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	f00b fa44 	bl	800de54 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <IIC_Init+0x58>)
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <IIC_Init+0x58>)
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	02c9      	lsls	r1, r1, #11
 80029d6:	430a      	orrs	r2, r1
 80029d8:	615a      	str	r2, [r3, #20]
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <IIC_Init+0x58>)
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	02db      	lsls	r3, r3, #11
 80029e2:	4013      	ands	r3, r2
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
	   
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	22c0      	movs	r2, #192	; 0xc0
 80029ec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2201      	movs	r2, #1
 80029f2:	605a      	str	r2, [r3, #4]
	//GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	2203      	movs	r2, #3
 80029f8:	60da      	str	r2, [r3, #12]
	//GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <IIC_Init+0x5c>)
 80029fe:	0019      	movs	r1, r3
 8002a00:	0010      	movs	r0, r2
 8002a02:	f005 fb6d 	bl	80080e0 <HAL_GPIO_Init>
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b006      	add	sp, #24
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000
 8002a14:	48000400 	.word	0x48000400

08002a18 <SDA_IN>:

//SDA����Ϊ����
void SDA_IN (void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	0018      	movs	r0, r3
 8002a22:	2314      	movs	r3, #20
 8002a24:	001a      	movs	r2, r3
 8002a26:	2100      	movs	r1, #0
 8002a28:	f00b fa14 	bl	800de54 <memset>
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <SDA_IN+0x58>)
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <SDA_IN+0x58>)
 8002a32:	2180      	movs	r1, #128	; 0x80
 8002a34:	02c9      	lsls	r1, r1, #11
 8002a36:	430a      	orrs	r2, r1
 8002a38:	615a      	str	r2, [r3, #20]
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <SDA_IN+0x58>)
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	02db      	lsls	r3, r3, #11
 8002a42:	4013      	ands	r3, r2
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
		
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	2203      	movs	r2, #3
 8002a58:	60da      	str	r2, [r3, #12]
		//	GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <SDA_IN+0x5c>)
 8002a5e:	0019      	movs	r1, r3
 8002a60:	0010      	movs	r0, r2
 8002a62:	f005 fb3d 	bl	80080e0 <HAL_GPIO_Init>
	
}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b006      	add	sp, #24
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	40021000 	.word	0x40021000
 8002a74:	48000400 	.word	0x48000400

08002a78 <SDA_OUT>:

//SDA����Ϊ���
void SDA_OUT(void)
{ 	
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	0018      	movs	r0, r3
 8002a82:	2314      	movs	r3, #20
 8002a84:	001a      	movs	r2, r3
 8002a86:	2100      	movs	r1, #0
 8002a88:	f00b f9e4 	bl	800de54 <memset>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <SDA_OUT+0x58>)
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <SDA_OUT+0x58>)
 8002a92:	2180      	movs	r1, #128	; 0x80
 8002a94:	02c9      	lsls	r1, r1, #11
 8002a96:	430a      	orrs	r2, r1
 8002a98:	615a      	str	r2, [r3, #20]
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <SDA_OUT+0x58>)
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	02db      	lsls	r3, r3, #11
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
		
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	605a      	str	r2, [r3, #4]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <SDA_OUT+0x5c>)
 8002abe:	0019      	movs	r1, r3
 8002ac0:	0010      	movs	r0, r2
 8002ac2:	f005 fb0d 	bl	80080e0 <HAL_GPIO_Init>
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b006      	add	sp, #24
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48000400 	.word	0x48000400

08002ad8 <IIC_Start>:
//����IIC��ʼ�ź�
void IIC_Start(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda������Ϊ���
 8002adc:	f7ff ffcc 	bl	8002a78 <SDA_OUT>
	IIC_SDA(1);	  	  
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <IIC_Start+0x4c>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f005 fc8f 	bl	800840a <HAL_GPIO_WritePin>
	IIC_SCL(1);
 8002aec:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <IIC_Start+0x4c>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	2140      	movs	r1, #64	; 0x40
 8002af2:	0018      	movs	r0, r3
 8002af4:	f005 fc89 	bl	800840a <HAL_GPIO_WritePin>
	delay_us(1);
 8002af8:	2001      	movs	r0, #1
 8002afa:	f000 fdf7 	bl	80036ec <delay_us>
 	IIC_SDA(0);     //START:when CLK is high,DATA change form high to low 
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <IIC_Start+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	2180      	movs	r1, #128	; 0x80
 8002b04:	0018      	movs	r0, r3
 8002b06:	f005 fc80 	bl	800840a <HAL_GPIO_WritePin>
	delay_us(1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f000 fdee 	bl	80036ec <delay_us>
	IIC_SCL(0);     //ǯסI2C���ߣ�׼�����ͻ�������� 
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <IIC_Start+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	2140      	movs	r1, #64	; 0x40
 8002b16:	0018      	movs	r0, r3
 8002b18:	f005 fc77 	bl	800840a <HAL_GPIO_WritePin>
}	  
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	48000400 	.word	0x48000400

08002b28 <IIC_Stop>:
//����IICֹͣ�ź�
void IIC_Stop(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	SDA_OUT();//sda�����
 8002b2c:	f7ff ffa4 	bl	8002a78 <SDA_OUT>
	IIC_SCL(0);
 8002b30:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <IIC_Stop+0x4c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	2140      	movs	r1, #64	; 0x40
 8002b36:	0018      	movs	r0, r3
 8002b38:	f005 fc67 	bl	800840a <HAL_GPIO_WritePin>
	IIC_SDA(0);//STOP:when CLK is high DATA change form low to high
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <IIC_Stop+0x4c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2180      	movs	r1, #128	; 0x80
 8002b42:	0018      	movs	r0, r3
 8002b44:	f005 fc61 	bl	800840a <HAL_GPIO_WritePin>
 	delay_us(3);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f000 fdcf 	bl	80036ec <delay_us>
	IIC_SCL(1); 
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <IIC_Stop+0x4c>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	2140      	movs	r1, #64	; 0x40
 8002b54:	0018      	movs	r0, r3
 8002b56:	f005 fc58 	bl	800840a <HAL_GPIO_WritePin>
	IIC_SDA(1);//����I2C���߽����ź�
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <IIC_Stop+0x4c>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	0018      	movs	r0, r3
 8002b62:	f005 fc52 	bl	800840a <HAL_GPIO_WritePin>
	delay_us(3);							   	
 8002b66:	2003      	movs	r0, #3
 8002b68:	f000 fdc0 	bl	80036ec <delay_us>
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	48000400 	.word	0x48000400

08002b78 <IIC_Wait_Ack>:
//�ȴ�Ӧ���źŵ���
//����ֵ��1������Ӧ��ʧ��
//        0������Ӧ��ɹ�
uint8_t IIC_Wait_Ack(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 8002b7e:	1dfb      	adds	r3, r7, #7
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
	SDA_IN();      //SDA����Ϊ����  
 8002b84:	f7ff ff48 	bl	8002a18 <SDA_IN>
	IIC_SDA(1);
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <IIC_Wait_Ack+0x74>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f005 fc3b 	bl	800840a <HAL_GPIO_WritePin>
	delay_us(2);	   
 8002b94:	2002      	movs	r0, #2
 8002b96:	f000 fda9 	bl	80036ec <delay_us>
	IIC_SCL(1);
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <IIC_Wait_Ack+0x74>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2140      	movs	r1, #64	; 0x40
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f005 fc32 	bl	800840a <HAL_GPIO_WritePin>
	delay_us(2);	 
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	f000 fda0 	bl	80036ec <delay_us>
	while(READ_SDA)
 8002bac:	e00c      	b.n	8002bc8 <IIC_Wait_Ack+0x50>
	{
		ucErrTime++;
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	1dfb      	adds	r3, r7, #7
 8002bb4:	3201      	adds	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
		if(ucErrTime>250)
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2bfa      	cmp	r3, #250	; 0xfa
 8002bbe:	d903      	bls.n	8002bc8 <IIC_Wait_Ack+0x50>
		{
			IIC_Stop();
 8002bc0:	f7ff ffb2 	bl	8002b28 <IIC_Stop>
			return 1;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e00d      	b.n	8002be4 <IIC_Wait_Ack+0x6c>
	while(READ_SDA)
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <IIC_Wait_Ack+0x74>)
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f005 fbff 	bl	80083d0 <HAL_GPIO_ReadPin>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d1eb      	bne.n	8002bae <IIC_Wait_Ack+0x36>
		}
	}
	IIC_SCL(0);//ʱ�����0 	   
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <IIC_Wait_Ack+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f005 fc14 	bl	800840a <HAL_GPIO_WritePin>
	return 0;  
 8002be2:	2300      	movs	r3, #0
} 
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b002      	add	sp, #8
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	48000400 	.word	0x48000400

08002bf0 <IIC_Send_Byte>:
//IIC����һ���ֽ�
//���شӻ�����Ӧ��
//1����Ӧ��
//0����Ӧ��			  
void IIC_Send_Byte(uint8_t txd)
{                        
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	701a      	strb	r2, [r3, #0]
    uint8_t t;   
	SDA_OUT(); 	    
 8002bfc:	f7ff ff3c 	bl	8002a78 <SDA_OUT>
    IIC_SCL(0);//����ʱ�ӿ�ʼ���ݴ���
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <IIC_Send_Byte+0xa0>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	0018      	movs	r0, r3
 8002c08:	f005 fbff 	bl	800840a <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)    //��ʼ׼���ź���
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e031      	b.n	8002c7a <IIC_Send_Byte+0x8a>
    {              
        //IIC_SDA=(txd&0x80)>>7;
		if((txd&0x80)>>7)
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	da06      	bge.n	8002c2e <IIC_Send_Byte+0x3e>
			IIC_SDA(1);
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <IIC_Send_Byte+0xa0>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0018      	movs	r0, r3
 8002c28:	f005 fbef 	bl	800840a <HAL_GPIO_WritePin>
 8002c2c:	e005      	b.n	8002c3a <IIC_Send_Byte+0x4a>
		else
			IIC_SDA(0);
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <IIC_Send_Byte+0xa0>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	2180      	movs	r1, #128	; 0x80
 8002c34:	0018      	movs	r0, r3
 8002c36:	f005 fbe8 	bl	800840a <HAL_GPIO_WritePin>
		txd<<=1; 	  
 8002c3a:	1dfa      	adds	r2, r7, #7
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	18db      	adds	r3, r3, r3
 8002c42:	7013      	strb	r3, [r2, #0]
		delay_us(1);   //��TEA5767��������ʱ���Ǳ����
 8002c44:	2001      	movs	r0, #1
 8002c46:	f000 fd51 	bl	80036ec <delay_us>
		IIC_SCL(1);
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <IIC_Send_Byte+0xa0>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2140      	movs	r1, #64	; 0x40
 8002c50:	0018      	movs	r0, r3
 8002c52:	f005 fbda 	bl	800840a <HAL_GPIO_WritePin>
		delay_us(1); 
 8002c56:	2001      	movs	r0, #1
 8002c58:	f000 fd48 	bl	80036ec <delay_us>
		IIC_SCL(0);	
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <IIC_Send_Byte+0xa0>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2140      	movs	r1, #64	; 0x40
 8002c62:	0018      	movs	r0, r3
 8002c64:	f005 fbd1 	bl	800840a <HAL_GPIO_WritePin>
		delay_us(1);
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f000 fd3f 	bl	80036ec <delay_us>
    for(t=0;t<8;t++)    //��ʼ׼���ź���
 8002c6e:	210f      	movs	r1, #15
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	3201      	adds	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
 8002c7a:	230f      	movs	r3, #15
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b07      	cmp	r3, #7
 8002c82:	d9c8      	bls.n	8002c16 <IIC_Send_Byte+0x26>
    }	 
} 	    
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	48000400 	.word	0x48000400

08002c94 <safe_check_func>:
static void MX_TIM3_Init(void);
static void MX_ADC_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
bool safe_check_func()
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
	  if(safe_counter >= 150 && (myabs(now_current)>2000 || now_force > 1500))
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <safe_check_func+0x40>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b95      	cmp	r3, #149	; 0x95
 8002c9e:	d915      	bls.n	8002ccc <safe_check_func+0x38>
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <safe_check_func+0x44>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca6:	17da      	asrs	r2, r3, #31
 8002ca8:	189b      	adds	r3, r3, r2
 8002caa:	4053      	eors	r3, r2
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	23fa      	movs	r3, #250	; 0xfa
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d805      	bhi.n	8002cc2 <safe_check_func+0x2e>
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <safe_check_func+0x48>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	5e9b      	ldrsh	r3, [r3, r2]
 8002cbc:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <safe_check_func+0x4c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	dd04      	ble.n	8002ccc <safe_check_func+0x38>
	  {
		  safe_counter=0;
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <safe_check_func+0x40>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
		  return false;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e000      	b.n	8002cce <safe_check_func+0x3a>
	  }
	  return true;
 8002ccc:	2301      	movs	r3, #1
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000255 	.word	0x20000255
 8002cd8:	20000220 	.word	0x20000220
 8002cdc:	20000256 	.word	0x20000256
 8002ce0:	000005dc 	.word	0x000005dc

08002ce4 <set_zero>:
void set_zero()
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
	  get_motor_info(&hcan);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <set_zero+0x34>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7ff fc38 	bl	8002560 <get_motor_info>
	  motor_response_flag = 0x9C;
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <set_zero+0x38>)
 8002cf2:	229c      	movs	r2, #156	; 0x9c
 8002cf4:	601a      	str	r2, [r3, #0]
	  while(motor_response_flag);
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <set_zero+0x38>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1fb      	bne.n	8002cf8 <set_zero+0x14>
	  now_r = 0;
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <set_zero+0x3c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
	  pos0_r = now_tick;
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <set_zero+0x40>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	5e9b      	ldrsh	r3, [r3, r2]
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <set_zero+0x44>)
 8002d10:	801a      	strh	r2, [r3, #0]
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200002b8 	.word	0x200002b8
 8002d1c:	20000250 	.word	0x20000250
 8002d20:	2000022c 	.word	0x2000022c
 8002d24:	20000228 	.word	0x20000228
 8002d28:	2000022a 	.word	0x2000022a

08002d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d32:	f003 fb99 	bl	8006468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d36:	f000 fa03 	bl	8003140 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d3a:	f000 fc1f 	bl	800357c <MX_GPIO_Init>
  MX_CAN_Init();
 8002d3e:	f000 fab7 	bl	80032b0 <MX_CAN_Init>
  MX_TIM2_Init();
 8002d42:	f000 fb47 	bl	80033d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d46:	f000 fbc3 	bl	80034d0 <MX_TIM3_Init>
  MX_ADC_Init();
 8002d4a:	f000 fa55 	bl	80031f8 <MX_ADC_Init>
  MX_TIM1_Init();
 8002d4e:	f000 fae9 	bl	8003324 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8002d52:	f000 feb3 	bl	8003abc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  IIC_Init();
 8002d56:	f7ff fe2f 	bl	80029b8 <IIC_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002d5a:	4be2      	ldr	r3, [pc, #904]	; (80030e4 <main+0x3b8>)
 8002d5c:	210c      	movs	r1, #12
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f008 f884 	bl	800ae6c <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc);
 8002d64:	4be0      	ldr	r3, [pc, #896]	; (80030e8 <main+0x3bc>)
 8002d66:	0018      	movs	r0, r3
 8002d68:	f004 f98a 	bl	8007080 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002d6c:	4bdf      	ldr	r3, [pc, #892]	; (80030ec <main+0x3c0>)
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f007 ffda 	bl	800ad28 <HAL_TIM_Base_Start_IT>
  MCP4725_WriteData_Voltage(160);
 8002d74:	20a0      	movs	r0, #160	; 0xa0
 8002d76:	f000 fc49 	bl	800360c <MCP4725_WriteData_Voltage>


  start_Motor(&hcan);
 8002d7a:	4bdd      	ldr	r3, [pc, #884]	; (80030f0 <main+0x3c4>)
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff fc1b 	bl	80025b8 <start_Motor>
  float zerosum=0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
  for(int i=0;i<50;i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	e010      	b.n	8002dae <main+0x82>
  {
	  zerosum+=GetNowWeight(&hadc);
 8002d8c:	4bd6      	ldr	r3, [pc, #856]	; (80030e8 <main+0x3bc>)
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7ff fd76 	bl	8002880 <GetNowWeight>
 8002d94:	1c03      	adds	r3, r0, #0
 8002d96:	1c19      	adds	r1, r3, #0
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7fd fba3 	bl	80004e4 <__aeabi_fadd>
 8002d9e:	1c03      	adds	r3, r0, #0
 8002da0:	60fb      	str	r3, [r7, #12]
	  HAL_Delay(1);
 8002da2:	2001      	movs	r0, #1
 8002da4:	f003 fbc4 	bl	8006530 <HAL_Delay>
  for(int i=0;i<50;i++)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	3301      	adds	r3, #1
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b31      	cmp	r3, #49	; 0x31
 8002db2:	ddeb      	ble.n	8002d8c <main+0x60>
  }
  zeropoint += zerosum/50/weighttime;
 8002db4:	49cf      	ldr	r1, [pc, #828]	; (80030f4 <main+0x3c8>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7fd fd34 	bl	8000824 <__aeabi_fdiv>
 8002dbc:	1c03      	adds	r3, r0, #0
 8002dbe:	1c1a      	adds	r2, r3, #0
 8002dc0:	4bcd      	ldr	r3, [pc, #820]	; (80030f8 <main+0x3cc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	1c19      	adds	r1, r3, #0
 8002dc6:	1c10      	adds	r0, r2, #0
 8002dc8:	f7fd fd2c 	bl	8000824 <__aeabi_fdiv>
 8002dcc:	1c03      	adds	r3, r0, #0
 8002dce:	1c1a      	adds	r2, r3, #0
 8002dd0:	4bca      	ldr	r3, [pc, #808]	; (80030fc <main+0x3d0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	1c19      	adds	r1, r3, #0
 8002dd6:	1c10      	adds	r0, r2, #0
 8002dd8:	f7fd fb84 	bl	80004e4 <__aeabi_fadd>
 8002ddc:	1c03      	adds	r3, r0, #0
 8002dde:	1c1a      	adds	r2, r3, #0
 8002de0:	4bc6      	ldr	r3, [pc, #792]	; (80030fc <main+0x3d0>)
 8002de2:	601a      	str	r2, [r3, #0]
  motor_task = SETZERO;
 8002de4:	4bc6      	ldr	r3, [pc, #792]	; (8003100 <main+0x3d4>)
 8002de6:	2204      	movs	r2, #4
 8002de8:	701a      	strb	r2, [r3, #0]
  motor_mode = SPEED;
 8002dea:	4bc6      	ldr	r3, [pc, #792]	; (8003104 <main+0x3d8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
  safe_counter=0;
 8002df0:	4bc5      	ldr	r3, [pc, #788]	; (8003108 <main+0x3dc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (motor_flag == true) {//1ms
 8002df6:	4bc5      	ldr	r3, [pc, #788]	; (800310c <main+0x3e0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d000      	beq.n	8002e00 <main+0xd4>
 8002dfe:	e12b      	b.n	8003058 <main+0x32c>
		  motor_flag=false;
 8002e00:	4bc2      	ldr	r3, [pc, #776]	; (800310c <main+0x3e0>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
		  now_force=GetNowWeight(&hadc);
 8002e06:	4bb8      	ldr	r3, [pc, #736]	; (80030e8 <main+0x3bc>)
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7ff fd39 	bl	8002880 <GetNowWeight>
 8002e0e:	1c03      	adds	r3, r0, #0
 8002e10:	1c18      	adds	r0, r3, #0
 8002e12:	f7fe f9bf 	bl	8001194 <__aeabi_f2iz>
 8002e16:	0003      	movs	r3, r0
 8002e18:	b21a      	sxth	r2, r3
 8002e1a:	4bbd      	ldr	r3, [pc, #756]	; (8003110 <main+0x3e4>)
 8002e1c:	801a      	strh	r2, [r3, #0]

		  switch(motor_task)
 8002e1e:	4bb8      	ldr	r3, [pc, #736]	; (8003100 <main+0x3d4>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d900      	bls.n	8002e28 <main+0xfc>
 8002e26:	e0c5      	b.n	8002fb4 <main+0x288>
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	4bba      	ldr	r3, [pc, #744]	; (8003114 <main+0x3e8>)
 8002e2c:	18d3      	adds	r3, r2, r3
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	469f      	mov	pc, r3
		  {
		  case STOP:
			  stop_Motor(&hcan);
 8002e32:	4baf      	ldr	r3, [pc, #700]	; (80030f0 <main+0x3c4>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7ff fba9 	bl	800258c <stop_Motor>
			  motor_task = NORMAL;
 8002e3a:	4bb1      	ldr	r3, [pc, #708]	; (8003100 <main+0x3d4>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
			  motor_mode = UNDEFINED;
 8002e40:	4bb0      	ldr	r3, [pc, #704]	; (8003104 <main+0x3d8>)
 8002e42:	2203      	movs	r2, #3
 8002e44:	701a      	strb	r2, [r3, #0]
			  break;
 8002e46:	e0b5      	b.n	8002fb4 <main+0x288>
		  case START:
			  clear_error(&hcan);
 8002e48:	4ba9      	ldr	r3, [pc, #676]	; (80030f0 <main+0x3c4>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7ff fbca 	bl	80025e4 <clear_error>
			  start_Motor(&hcan);
 8002e50:	4ba7      	ldr	r3, [pc, #668]	; (80030f0 <main+0x3c4>)
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7ff fbb0 	bl	80025b8 <start_Motor>
			  motor_task = NORMAL;
 8002e58:	4ba9      	ldr	r3, [pc, #676]	; (8003100 <main+0x3d4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
			  motor_mode = UNDEFINED;
 8002e5e:	4ba9      	ldr	r3, [pc, #676]	; (8003104 <main+0x3d8>)
 8002e60:	2203      	movs	r2, #3
 8002e62:	701a      	strb	r2, [r3, #0]
			  break;
 8002e64:	e0a6      	b.n	8002fb4 <main+0x288>
		  case SETZERO:
			  goal_speed = -300;
 8002e66:	4bac      	ldr	r3, [pc, #688]	; (8003118 <main+0x3ec>)
 8002e68:	4aac      	ldr	r2, [pc, #688]	; (800311c <main+0x3f0>)
 8002e6a:	601a      	str	r2, [r3, #0]
			  if(now_pos == keep_pos)
 8002e6c:	4bac      	ldr	r3, [pc, #688]	; (8003120 <main+0x3f4>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4bac      	ldr	r3, [pc, #688]	; (8003124 <main+0x3f8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <main+0x15a>
				  keep_goal_cnt++;
 8002e78:	4bab      	ldr	r3, [pc, #684]	; (8003128 <main+0x3fc>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	4ba9      	ldr	r3, [pc, #676]	; (8003128 <main+0x3fc>)
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e006      	b.n	8002e94 <main+0x168>
			  else
			  {
				  keep_goal_cnt=0;
 8002e86:	4ba8      	ldr	r3, [pc, #672]	; (8003128 <main+0x3fc>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
				  keep_pos=now_pos;
 8002e8c:	4ba4      	ldr	r3, [pc, #656]	; (8003120 <main+0x3f4>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4ba4      	ldr	r3, [pc, #656]	; (8003124 <main+0x3f8>)
 8002e92:	601a      	str	r2, [r3, #0]
			  }
			  if(safe_check_func()==false || keep_goal_cnt>=400)
 8002e94:	f7ff fefe 	bl	8002c94 <safe_check_func>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d000      	beq.n	8002e9e <main+0x172>
 8002e9c:	e085      	b.n	8002faa <main+0x27e>
			  {
				  keep_goal_cnt = 0;
 8002e9e:	4ba2      	ldr	r3, [pc, #648]	; (8003128 <main+0x3fc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
				  stop_Motor(&hcan);
 8002ea4:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <main+0x3c4>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff fb70 	bl	800258c <stop_Motor>
				  HAL_Delay(200);
 8002eac:	20c8      	movs	r0, #200	; 0xc8
 8002eae:	f003 fb3f 	bl	8006530 <HAL_Delay>
				  set_zero();
 8002eb2:	f7ff ff17 	bl	8002ce4 <set_zero>
				  start_Motor(&hcan);
 8002eb6:	4b8e      	ldr	r3, [pc, #568]	; (80030f0 <main+0x3c4>)
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff fb7d 	bl	80025b8 <start_Motor>
				  motor_task = NORMAL;
 8002ebe:	4b90      	ldr	r3, [pc, #576]	; (8003100 <main+0x3d4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
				  motor_mode = UNDEFINED;
 8002ec4:	4b8f      	ldr	r3, [pc, #572]	; (8003104 <main+0x3d8>)
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8002eca:	e06e      	b.n	8002faa <main+0x27e>
		  case CONTACT:
			  if(now_force>20)
 8002ecc:	4b90      	ldr	r3, [pc, #576]	; (8003110 <main+0x3e4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ed2:	2b14      	cmp	r3, #20
 8002ed4:	dd06      	ble.n	8002ee4 <main+0x1b8>
			  {
				  goal_speed = 0;
 8002ed6:	4b90      	ldr	r3, [pc, #576]	; (8003118 <main+0x3ec>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
				  motor_task = STOP;
 8002edc:	4b88      	ldr	r3, [pc, #544]	; (8003100 <main+0x3d4>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
			  }
			  else
				  goal_speed = 800;
			  break;
 8002ee2:	e067      	b.n	8002fb4 <main+0x288>
				  goal_speed = 800;
 8002ee4:	4b8c      	ldr	r3, [pc, #560]	; (8003118 <main+0x3ec>)
 8002ee6:	4a91      	ldr	r2, [pc, #580]	; (800312c <main+0x400>)
 8002ee8:	601a      	str	r2, [r3, #0]
			  break;
 8002eea:	e063      	b.n	8002fb4 <main+0x288>
		  case GOTO:
			  int16_t delta_pos = goal_pos - now_pos/100;
 8002eec:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <main+0x3f4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2264      	movs	r2, #100	; 0x64
 8002ef2:	4251      	negs	r1, r2
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7fd f991 	bl	800021c <__divsi3>
 8002efa:	0003      	movs	r3, r0
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	4b8c      	ldr	r3, [pc, #560]	; (8003130 <main+0x404>)
 8002f00:	2100      	movs	r1, #0
 8002f02:	5e5b      	ldrsh	r3, [r3, r1]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	18d3      	adds	r3, r2, r3
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	801a      	strh	r2, [r3, #0]
			  if(myabs(delta_pos) < 3)
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	2200      	movs	r2, #0
 8002f12:	5e9b      	ldrsh	r3, [r3, r2]
 8002f14:	17da      	asrs	r2, r3, #31
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	4053      	eors	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d813      	bhi.n	8002f48 <main+0x21c>
			  {
				  keep_goal_cnt++;
 8002f20:	4b81      	ldr	r3, [pc, #516]	; (8003128 <main+0x3fc>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b7f      	ldr	r3, [pc, #508]	; (8003128 <main+0x3fc>)
 8002f2a:	701a      	strb	r2, [r3, #0]
				  if(keep_goal_cnt >=10)
 8002f2c:	4b7e      	ldr	r3, [pc, #504]	; (8003128 <main+0x3fc>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d93c      	bls.n	8002fae <main+0x282>
				  {
					  keep_goal_cnt =0;
 8002f34:	4b7c      	ldr	r3, [pc, #496]	; (8003128 <main+0x3fc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
					  motor_task = NORMAL;
 8002f3a:	4b71      	ldr	r3, [pc, #452]	; (8003100 <main+0x3d4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
					  motor_mode = POS;
 8002f40:	4b70      	ldr	r3, [pc, #448]	; (8003104 <main+0x3d8>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  else
				  keep_goal_cnt=0;
			  break;
 8002f46:	e032      	b.n	8002fae <main+0x282>
				  keep_goal_cnt=0;
 8002f48:	4b77      	ldr	r3, [pc, #476]	; (8003128 <main+0x3fc>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
			  break;
 8002f4e:	e02e      	b.n	8002fae <main+0x282>
		  case SETFORCE:
			  int16_t delta_force = goal_force - now_force;
 8002f50:	4b78      	ldr	r3, [pc, #480]	; (8003134 <main+0x408>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	5e9b      	ldrsh	r3, [r3, r2]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <main+0x3e4>)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5e5b      	ldrsh	r3, [r3, r1]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	1dbb      	adds	r3, r7, #6
 8002f66:	801a      	strh	r2, [r3, #0]
			  if(myabs(delta_force)<5)
 8002f68:	1dbb      	adds	r3, r7, #6
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	5e9b      	ldrsh	r3, [r3, r2]
 8002f6e:	17da      	asrs	r2, r3, #31
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	4053      	eors	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d813      	bhi.n	8002fa2 <main+0x276>
			  {
				  keep_goal_cnt++;
 8002f7a:	4b6b      	ldr	r3, [pc, #428]	; (8003128 <main+0x3fc>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b69      	ldr	r3, [pc, #420]	; (8003128 <main+0x3fc>)
 8002f84:	701a      	strb	r2, [r3, #0]
				  if(keep_goal_cnt >=10)
 8002f86:	4b68      	ldr	r3, [pc, #416]	; (8003128 <main+0x3fc>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b09      	cmp	r3, #9
 8002f8c:	d911      	bls.n	8002fb2 <main+0x286>
				  {
					  keep_goal_cnt =0;
 8002f8e:	4b66      	ldr	r3, [pc, #408]	; (8003128 <main+0x3fc>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
					  motor_task = NORMAL;
 8002f94:	4b5a      	ldr	r3, [pc, #360]	; (8003100 <main+0x3d4>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
					  motor_mode = FORCE;
 8002f9a:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <main+0x3d8>)
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	701a      	strb	r2, [r3, #0]
				  }
			  }
			  else
				  keep_goal_cnt=0;

			  break;
 8002fa0:	e007      	b.n	8002fb2 <main+0x286>
				  keep_goal_cnt=0;
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <main+0x3fc>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
			  break;
 8002fa8:	e003      	b.n	8002fb2 <main+0x286>
			  break;
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	e002      	b.n	8002fb4 <main+0x288>
			  break;
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	e000      	b.n	8002fb4 <main+0x288>
			  break;
 8002fb2:	46c0      	nop			; (mov r8, r8)
		  case NORMAL:
		  }

		  switch(motor_mode)
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <main+0x3d8>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d039      	beq.n	8003030 <main+0x304>
 8002fbc:	dc3d      	bgt.n	800303a <main+0x30e>
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d021      	beq.n	8003006 <main+0x2da>
 8002fc2:	dc3a      	bgt.n	800303a <main+0x30e>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <main+0x2a2>
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d008      	beq.n	8002fde <main+0x2b2>
 8002fcc:	e035      	b.n	800303a <main+0x30e>
		  {
			  case SPEED:
				  set_Motor_Speed(&hcan,goal_speed);
 8002fce:	4b52      	ldr	r3, [pc, #328]	; (8003118 <main+0x3ec>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <main+0x3c4>)
 8002fd4:	1c11      	adds	r1, r2, #0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff fa6c 	bl	80024b4 <set_Motor_Speed>
				  break;
 8002fdc:	e02d      	b.n	800303a <main+0x30e>
			  case POS:
				  goal_speed =get_pos_goal_speed(now_pos,goal_pos);
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <main+0x3f4>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b53      	ldr	r3, [pc, #332]	; (8003130 <main+0x404>)
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	5e5b      	ldrsh	r3, [r3, r1]
 8002fe8:	0019      	movs	r1, r3
 8002fea:	0010      	movs	r0, r2
 8002fec:	f7ff fa12 	bl	8002414 <get_pos_goal_speed>
 8002ff0:	1c02      	adds	r2, r0, #0
 8002ff2:	4b49      	ldr	r3, [pc, #292]	; (8003118 <main+0x3ec>)
 8002ff4:	601a      	str	r2, [r3, #0]
				  set_Motor_Speed(&hcan,goal_speed);
 8002ff6:	4b48      	ldr	r3, [pc, #288]	; (8003118 <main+0x3ec>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <main+0x3c4>)
 8002ffc:	1c11      	adds	r1, r2, #0
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff fa58 	bl	80024b4 <set_Motor_Speed>
				  break;
 8003004:	e019      	b.n	800303a <main+0x30e>
			  case FORCE:
				  goal_speed = get_goal_velocity(now_force,goal_force);
 8003006:	4b42      	ldr	r3, [pc, #264]	; (8003110 <main+0x3e4>)
 8003008:	2200      	movs	r2, #0
 800300a:	5e9a      	ldrsh	r2, [r3, r2]
 800300c:	4b49      	ldr	r3, [pc, #292]	; (8003134 <main+0x408>)
 800300e:	2100      	movs	r1, #0
 8003010:	5e5b      	ldrsh	r3, [r3, r1]
 8003012:	0019      	movs	r1, r3
 8003014:	0010      	movs	r0, r2
 8003016:	f7ff f94f 	bl	80022b8 <get_goal_velocity>
 800301a:	1c02      	adds	r2, r0, #0
 800301c:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <main+0x3ec>)
 800301e:	601a      	str	r2, [r3, #0]
				  set_Motor_Speed(&hcan,goal_speed);
 8003020:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <main+0x3ec>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b32      	ldr	r3, [pc, #200]	; (80030f0 <main+0x3c4>)
 8003026:	1c11      	adds	r1, r2, #0
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff fa43 	bl	80024b4 <set_Motor_Speed>
				  break;
 800302e:	e004      	b.n	800303a <main+0x30e>
			  case UNDEFINED:
				  get_motor_info(&hcan);
 8003030:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <main+0x3c4>)
 8003032:	0018      	movs	r0, r3
 8003034:	f7ff fa94 	bl	8002560 <get_motor_info>
				  break;
 8003038:	46c0      	nop			; (mov r8, r8)
		  }

		  /*safety check*/
		  if(motor_task != SETZERO && safe_check_func()==false)
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <main+0x3d4>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d00a      	beq.n	8003058 <main+0x32c>
 8003042:	f7ff fe27 	bl	8002c94 <safe_check_func>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d106      	bne.n	8003058 <main+0x32c>
		  {
			  stop_Motor(&hcan);
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <main+0x3c4>)
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff fa9d 	bl	800258c <stop_Motor>
			  motor_task = STOP;
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <main+0x3d4>)
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if ((report_flag) == true) {//10ms
 8003058:	4b37      	ldr	r3, [pc, #220]	; (8003138 <main+0x40c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d000      	beq.n	8003062 <main+0x336>
 8003060:	e6c9      	b.n	8002df6 <main+0xca>
		  data_list[0]=motor_task;
 8003062:	4b27      	ldr	r3, [pc, #156]	; (8003100 <main+0x3d4>)
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	4b35      	ldr	r3, [pc, #212]	; (800313c <main+0x410>)
 8003068:	701a      	strb	r2, [r3, #0]
		  data_list[1]=(now_force)>>8;
 800306a:	4b29      	ldr	r3, [pc, #164]	; (8003110 <main+0x3e4>)
 800306c:	2200      	movs	r2, #0
 800306e:	5e9b      	ldrsh	r3, [r3, r2]
 8003070:	121b      	asrs	r3, r3, #8
 8003072:	b21b      	sxth	r3, r3
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <main+0x410>)
 8003078:	705a      	strb	r2, [r3, #1]
		  data_list[2]=(now_force)&0xff;
 800307a:	4b25      	ldr	r3, [pc, #148]	; (8003110 <main+0x3e4>)
 800307c:	2200      	movs	r2, #0
 800307e:	5e9b      	ldrsh	r3, [r3, r2]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b2e      	ldr	r3, [pc, #184]	; (800313c <main+0x410>)
 8003084:	709a      	strb	r2, [r3, #2]
		  data_list[3]=(goal_force)>>8;
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <main+0x408>)
 8003088:	2200      	movs	r2, #0
 800308a:	5e9b      	ldrsh	r3, [r3, r2]
 800308c:	121b      	asrs	r3, r3, #8
 800308e:	b21b      	sxth	r3, r3
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b2a      	ldr	r3, [pc, #168]	; (800313c <main+0x410>)
 8003094:	70da      	strb	r2, [r3, #3]
		  data_list[4]=(goal_force)&0xff;
 8003096:	4b27      	ldr	r3, [pc, #156]	; (8003134 <main+0x408>)
 8003098:	2200      	movs	r2, #0
 800309a:	5e9b      	ldrsh	r3, [r3, r2]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <main+0x410>)
 80030a0:	711a      	strb	r2, [r3, #4]
		  data_list[5]=(now_pos >>24) & 0xff;
 80030a2:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <main+0x3f4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0e1b      	lsrs	r3, r3, #24
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <main+0x410>)
 80030ac:	715a      	strb	r2, [r3, #5]
		  data_list[6]=(now_pos >>16) & 0xff;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <main+0x3f4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	141b      	asrs	r3, r3, #16
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <main+0x410>)
 80030b8:	719a      	strb	r2, [r3, #6]
		  data_list[7]=(now_pos >>8) & 0xff;
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <main+0x3f4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	121b      	asrs	r3, r3, #8
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <main+0x410>)
 80030c4:	71da      	strb	r2, [r3, #7]
		  data_list[8]=now_pos & 0xff;
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <main+0x3f4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <main+0x410>)
 80030ce:	721a      	strb	r2, [r3, #8]
		  CDC_Transmit_FS(data_list,9);
 80030d0:	4b1a      	ldr	r3, [pc, #104]	; (800313c <main+0x410>)
 80030d2:	2109      	movs	r1, #9
 80030d4:	0018      	movs	r0, r3
 80030d6:	f001 fae7 	bl	80046a8 <CDC_Transmit_FS>
		  report_flag = false;
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <main+0x40c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
	  if (motor_flag == true) {//1ms
 80030e0:	e689      	b.n	8002df6 <main+0xca>
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	20000328 	.word	0x20000328
 80030e8:	20000278 	.word	0x20000278
 80030ec:	20000370 	.word	0x20000370
 80030f0:	200002b8 	.word	0x200002b8
 80030f4:	42480000 	.word	0x42480000
 80030f8:	20000034 	.word	0x20000034
 80030fc:	20000030 	.word	0x20000030
 8003100:	20000254 	.word	0x20000254
 8003104:	20000038 	.word	0x20000038
 8003108:	20000255 	.word	0x20000255
 800310c:	2000024c 	.word	0x2000024c
 8003110:	20000256 	.word	0x20000256
 8003114:	0800dfcc 	.word	0x0800dfcc
 8003118:	20000270 	.word	0x20000270
 800311c:	c3960000 	.word	0xc3960000
 8003120:	20000224 	.word	0x20000224
 8003124:	20000258 	.word	0x20000258
 8003128:	2000025c 	.word	0x2000025c
 800312c:	44480000 	.word	0x44480000
 8003130:	20000274 	.word	0x20000274
 8003134:	2000026c 	.word	0x2000026c
 8003138:	2000024d 	.word	0x2000024d
 800313c:	20000260 	.word	0x20000260

08003140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b099      	sub	sp, #100	; 0x64
 8003144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003146:	242c      	movs	r4, #44	; 0x2c
 8003148:	193b      	adds	r3, r7, r4
 800314a:	0018      	movs	r0, r3
 800314c:	2334      	movs	r3, #52	; 0x34
 800314e:	001a      	movs	r2, r3
 8003150:	2100      	movs	r1, #0
 8003152:	f00a fe7f 	bl	800de54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003156:	231c      	movs	r3, #28
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	0018      	movs	r0, r3
 800315c:	2310      	movs	r3, #16
 800315e:	001a      	movs	r2, r3
 8003160:	2100      	movs	r1, #0
 8003162:	f00a fe77 	bl	800de54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003166:	003b      	movs	r3, r7
 8003168:	0018      	movs	r0, r3
 800316a:	231c      	movs	r3, #28
 800316c:	001a      	movs	r2, r3
 800316e:	2100      	movs	r1, #0
 8003170:	f00a fe70 	bl	800de54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8003174:	0021      	movs	r1, r4
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2230      	movs	r2, #48	; 0x30
 800317a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800317c:	187b      	adds	r3, r7, r1
 800317e:	2201      	movs	r2, #1
 8003180:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003182:	187b      	adds	r3, r7, r1
 8003184:	2201      	movs	r2, #1
 8003186:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2210      	movs	r2, #16
 800318c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800318e:	187b      	adds	r3, r7, r1
 8003190:	2200      	movs	r2, #0
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003194:	187b      	adds	r3, r7, r1
 8003196:	0018      	movs	r0, r3
 8003198:	f006 ffa6 	bl	800a0e8 <HAL_RCC_OscConfig>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80031a0:	f000 fab4 	bl	800370c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031a4:	211c      	movs	r1, #28
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	2203      	movs	r2, #3
 80031b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031be:	187b      	adds	r3, r7, r1
 80031c0:	2101      	movs	r1, #1
 80031c2:	0018      	movs	r0, r3
 80031c4:	f007 fb16 	bl	800a7f4 <HAL_RCC_ClockConfig>
 80031c8:	1e03      	subs	r3, r0, #0
 80031ca:	d001      	beq.n	80031d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80031cc:	f000 fa9e 	bl	800370c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80031d0:	003b      	movs	r3, r7
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	0292      	lsls	r2, r2, #10
 80031d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80031d8:	003b      	movs	r3, r7
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031de:	003b      	movs	r3, r7
 80031e0:	0018      	movs	r0, r3
 80031e2:	f007 fc53 	bl	800aa8c <HAL_RCCEx_PeriphCLKConfig>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d001      	beq.n	80031ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80031ea:	f000 fa8f 	bl	800370c <Error_Handler>
  }
}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b019      	add	sp, #100	; 0x64
 80031f4:	bd90      	pop	{r4, r7, pc}
	...

080031f8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	0018      	movs	r0, r3
 8003202:	230c      	movs	r3, #12
 8003204:	001a      	movs	r2, r3
 8003206:	2100      	movs	r1, #0
 8003208:	f00a fe24 	bl	800de54 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800320c:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <MX_ADC_Init+0xb0>)
 800320e:	4a27      	ldr	r2, [pc, #156]	; (80032ac <MX_ADC_Init+0xb4>)
 8003210:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003212:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003214:	2200      	movs	r2, #0
 8003216:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003218:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <MX_ADC_Init+0xb0>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003220:	2200      	movs	r2, #0
 8003222:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003226:	2201      	movs	r2, #1
 8003228:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800322a:	4b1f      	ldr	r3, [pc, #124]	; (80032a8 <MX_ADC_Init+0xb0>)
 800322c:	2204      	movs	r2, #4
 800322e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003232:	2200      	movs	r2, #0
 8003234:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003238:	2200      	movs	r2, #0
 800323a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <MX_ADC_Init+0xb0>)
 800323e:	2200      	movs	r2, #0
 8003240:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003242:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003244:	2200      	movs	r2, #0
 8003246:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <MX_ADC_Init+0xb0>)
 800324a:	22c2      	movs	r2, #194	; 0xc2
 800324c:	32ff      	adds	r2, #255	; 0xff
 800324e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003252:	2200      	movs	r2, #0
 8003254:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003258:	2224      	movs	r2, #36	; 0x24
 800325a:	2100      	movs	r1, #0
 800325c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003260:	2201      	movs	r2, #1
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <MX_ADC_Init+0xb0>)
 8003266:	0018      	movs	r0, r3
 8003268:	f003 f986 	bl	8006578 <HAL_ADC_Init>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d001      	beq.n	8003274 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003270:	f000 fa4c 	bl	800370c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003274:	1d3b      	adds	r3, r7, #4
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	0152      	lsls	r2, r2, #5
 8003280:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	0552      	lsls	r2, r2, #21
 8003288:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800328a:	1d3a      	adds	r2, r7, #4
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <MX_ADC_Init+0xb0>)
 800328e:	0011      	movs	r1, r2
 8003290:	0018      	movs	r0, r3
 8003292:	f003 fca5 	bl	8006be0 <HAL_ADC_ConfigChannel>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800329a:	f000 fa37 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b004      	add	sp, #16
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	20000278 	.word	0x20000278
 80032ac:	40012400 	.word	0x40012400

080032b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <MX_CAN_Init+0x6c>)
 80032b6:	4a1a      	ldr	r2, [pc, #104]	; (8003320 <MX_CAN_Init+0x70>)
 80032b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <MX_CAN_Init+0x6c>)
 80032bc:	220c      	movs	r2, #12
 80032be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <MX_CAN_Init+0x6c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <MX_CAN_Init+0x6c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <MX_CAN_Init+0x6c>)
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	0252      	lsls	r2, r2, #9
 80032d2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <MX_CAN_Init+0x6c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <MX_CAN_Init+0x6c>)
 80032dc:	2200      	movs	r2, #0
 80032de:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80032e0:	4b0e      	ldr	r3, [pc, #56]	; (800331c <MX_CAN_Init+0x6c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <MX_CAN_Init+0x6c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <MX_CAN_Init+0x6c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	; (800331c <MX_CAN_Init+0x6c>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80032f8:	4b08      	ldr	r3, [pc, #32]	; (800331c <MX_CAN_Init+0x6c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <MX_CAN_Init+0x6c>)
 8003300:	0018      	movs	r0, r3
 8003302:	f003 ff65 	bl	80071d0 <HAL_CAN_Init>
 8003306:	1e03      	subs	r3, r0, #0
 8003308:	d001      	beq.n	800330e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800330a:	f000 f9ff 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CANFilter_init(&hcan);
 800330e:	4b03      	ldr	r3, [pc, #12]	; (800331c <MX_CAN_Init+0x6c>)
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff f9c3 	bl	800269c <CANFilter_init>
  /* USER CODE END CAN_Init 2 */

}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200002b8 	.word	0x200002b8
 8003320:	40006400 	.word	0x40006400

08003324 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800332a:	2308      	movs	r3, #8
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	0018      	movs	r0, r3
 8003330:	2310      	movs	r3, #16
 8003332:	001a      	movs	r2, r3
 8003334:	2100      	movs	r1, #0
 8003336:	f00a fd8d 	bl	800de54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800333a:	003b      	movs	r3, r7
 800333c:	0018      	movs	r0, r3
 800333e:	2308      	movs	r3, #8
 8003340:	001a      	movs	r2, r3
 8003342:	2100      	movs	r1, #0
 8003344:	f00a fd86 	bl	800de54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <MX_TIM1_Init+0xa4>)
 800334a:	4a20      	ldr	r2, [pc, #128]	; (80033cc <MX_TIM1_Init+0xa8>)
 800334c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 800334e:	4b1e      	ldr	r3, [pc, #120]	; (80033c8 <MX_TIM1_Init+0xa4>)
 8003350:	222f      	movs	r2, #47	; 0x2f
 8003352:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003354:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <MX_TIM1_Init+0xa4>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800335a:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <MX_TIM1_Init+0xa4>)
 800335c:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <MX_TIM1_Init+0xac>)
 800335e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <MX_TIM1_Init+0xa4>)
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <MX_TIM1_Init+0xa4>)
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800336c:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <MX_TIM1_Init+0xa4>)
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <MX_TIM1_Init+0xa4>)
 8003374:	0018      	movs	r0, r3
 8003376:	f007 fc87 	bl	800ac88 <HAL_TIM_Base_Init>
 800337a:	1e03      	subs	r3, r0, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800337e:	f000 f9c5 	bl	800370c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003382:	2108      	movs	r1, #8
 8003384:	187b      	adds	r3, r7, r1
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	0152      	lsls	r2, r2, #5
 800338a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800338c:	187a      	adds	r2, r7, r1
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <MX_TIM1_Init+0xa4>)
 8003390:	0011      	movs	r1, r2
 8003392:	0018      	movs	r0, r3
 8003394:	f007 fffe 	bl	800b394 <HAL_TIM_ConfigClockSource>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800339c:	f000 f9b6 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a0:	003b      	movs	r3, r7
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a6:	003b      	movs	r3, r7
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033ac:	003a      	movs	r2, r7
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_TIM1_Init+0xa4>)
 80033b0:	0011      	movs	r1, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f008 fc1c 	bl	800bbf0 <HAL_TIMEx_MasterConfigSynchronization>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80033bc:	f000 f9a6 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b006      	add	sp, #24
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200002e0 	.word	0x200002e0
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	0000ffff 	.word	0x0000ffff

080033d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033da:	2320      	movs	r3, #32
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	0018      	movs	r0, r3
 80033e0:	2308      	movs	r3, #8
 80033e2:	001a      	movs	r2, r3
 80033e4:	2100      	movs	r1, #0
 80033e6:	f00a fd35 	bl	800de54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	0018      	movs	r0, r3
 80033ee:	231c      	movs	r3, #28
 80033f0:	001a      	movs	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	f00a fd2e 	bl	800de54 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <MX_TIM2_Init+0xf8>)
 80033fa:	2280      	movs	r2, #128	; 0x80
 80033fc:	05d2      	lsls	r2, r2, #23
 80033fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003400:	4b32      	ldr	r3, [pc, #200]	; (80034cc <MX_TIM2_Init+0xf8>)
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003406:	4b31      	ldr	r3, [pc, #196]	; (80034cc <MX_TIM2_Init+0xf8>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <MX_TIM2_Init+0xf8>)
 800340e:	2201      	movs	r2, #1
 8003410:	4252      	negs	r2, r2
 8003412:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003414:	4b2d      	ldr	r3, [pc, #180]	; (80034cc <MX_TIM2_Init+0xf8>)
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800341a:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <MX_TIM2_Init+0xf8>)
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <MX_TIM2_Init+0xf8>)
 8003422:	0018      	movs	r0, r3
 8003424:	f007 fcd2 	bl	800adcc <HAL_TIM_PWM_Init>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800342c:	f000 f96e 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003430:	2120      	movs	r1, #32
 8003432:	187b      	adds	r3, r7, r1
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2200      	movs	r2, #0
 800343c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800343e:	187a      	adds	r2, r7, r1
 8003440:	4b22      	ldr	r3, [pc, #136]	; (80034cc <MX_TIM2_Init+0xf8>)
 8003442:	0011      	movs	r1, r2
 8003444:	0018      	movs	r0, r3
 8003446:	f008 fbd3 	bl	800bbf0 <HAL_TIMEx_MasterConfigSynchronization>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800344e:	f000 f95d 	bl	800370c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	2260      	movs	r2, #96	; 0x60
 8003456:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	2200      	movs	r2, #0
 800345c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003464:	1d3b      	adds	r3, r7, #4
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800346a:	1d39      	adds	r1, r7, #4
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <MX_TIM2_Init+0xf8>)
 800346e:	2200      	movs	r2, #0
 8003470:	0018      	movs	r0, r3
 8003472:	f007 fec9 	bl	800b208 <HAL_TIM_PWM_ConfigChannel>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d001      	beq.n	800347e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800347a:	f000 f947 	bl	800370c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800347e:	1d39      	adds	r1, r7, #4
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <MX_TIM2_Init+0xf8>)
 8003482:	2204      	movs	r2, #4
 8003484:	0018      	movs	r0, r3
 8003486:	f007 febf 	bl	800b208 <HAL_TIM_PWM_ConfigChannel>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 800348e:	f000 f93d 	bl	800370c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003492:	1d39      	adds	r1, r7, #4
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <MX_TIM2_Init+0xf8>)
 8003496:	2208      	movs	r2, #8
 8003498:	0018      	movs	r0, r3
 800349a:	f007 feb5 	bl	800b208 <HAL_TIM_PWM_ConfigChannel>
 800349e:	1e03      	subs	r3, r0, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80034a2:	f000 f933 	bl	800370c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034a6:	1d39      	adds	r1, r7, #4
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <MX_TIM2_Init+0xf8>)
 80034aa:	220c      	movs	r2, #12
 80034ac:	0018      	movs	r0, r3
 80034ae:	f007 feab 	bl	800b208 <HAL_TIM_PWM_ConfigChannel>
 80034b2:	1e03      	subs	r3, r0, #0
 80034b4:	d001      	beq.n	80034ba <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80034b6:	f000 f929 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <MX_TIM2_Init+0xf8>)
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 fa4b 	bl	8003958 <HAL_TIM_MspPostInit>

}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b00a      	add	sp, #40	; 0x28
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	20000328 	.word	0x20000328

080034d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034d6:	2308      	movs	r3, #8
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	0018      	movs	r0, r3
 80034dc:	2310      	movs	r3, #16
 80034de:	001a      	movs	r2, r3
 80034e0:	2100      	movs	r1, #0
 80034e2:	f00a fcb7 	bl	800de54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e6:	003b      	movs	r3, r7
 80034e8:	0018      	movs	r0, r3
 80034ea:	2308      	movs	r3, #8
 80034ec:	001a      	movs	r2, r3
 80034ee:	2100      	movs	r1, #0
 80034f0:	f00a fcb0 	bl	800de54 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034f4:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <MX_TIM3_Init+0xa0>)
 80034f6:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <MX_TIM3_Init+0xa4>)
 80034f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48 - 1;
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <MX_TIM3_Init+0xa0>)
 80034fc:	222f      	movs	r2, #47	; 0x2f
 80034fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <MX_TIM3_Init+0xa0>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <MX_TIM3_Init+0xa0>)
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <MX_TIM3_Init+0xa8>)
 800350a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <MX_TIM3_Init+0xa0>)
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <MX_TIM3_Init+0xa0>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <MX_TIM3_Init+0xa0>)
 800351a:	0018      	movs	r0, r3
 800351c:	f007 fbb4 	bl	800ac88 <HAL_TIM_Base_Init>
 8003520:	1e03      	subs	r3, r0, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003524:	f000 f8f2 	bl	800370c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003528:	2108      	movs	r1, #8
 800352a:	187b      	adds	r3, r7, r1
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	0152      	lsls	r2, r2, #5
 8003530:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003532:	187a      	adds	r2, r7, r1
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <MX_TIM3_Init+0xa0>)
 8003536:	0011      	movs	r1, r2
 8003538:	0018      	movs	r0, r3
 800353a:	f007 ff2b 	bl	800b394 <HAL_TIM_ConfigClockSource>
 800353e:	1e03      	subs	r3, r0, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003542:	f000 f8e3 	bl	800370c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003546:	003b      	movs	r3, r7
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354c:	003b      	movs	r3, r7
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003552:	003a      	movs	r2, r7
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <MX_TIM3_Init+0xa0>)
 8003556:	0011      	movs	r1, r2
 8003558:	0018      	movs	r0, r3
 800355a:	f008 fb49 	bl	800bbf0 <HAL_TIMEx_MasterConfigSynchronization>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003562:	f000 f8d3 	bl	800370c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b006      	add	sp, #24
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	20000370 	.word	0x20000370
 8003574:	40000400 	.word	0x40000400
 8003578:	000003e7 	.word	0x000003e7

0800357c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003582:	240c      	movs	r4, #12
 8003584:	193b      	adds	r3, r7, r4
 8003586:	0018      	movs	r0, r3
 8003588:	2314      	movs	r3, #20
 800358a:	001a      	movs	r2, r3
 800358c:	2100      	movs	r1, #0
 800358e:	f00a fc61 	bl	800de54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <MX_GPIO_Init+0x88>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <MX_GPIO_Init+0x88>)
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	0289      	lsls	r1, r1, #10
 800359c:	430a      	orrs	r2, r1
 800359e:	615a      	str	r2, [r3, #20]
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <MX_GPIO_Init+0x88>)
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	4013      	ands	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <MX_GPIO_Init+0x88>)
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <MX_GPIO_Init+0x88>)
 80035b4:	2180      	movs	r1, #128	; 0x80
 80035b6:	02c9      	lsls	r1, r1, #11
 80035b8:	430a      	orrs	r2, r1
 80035ba:	615a      	str	r2, [r3, #20]
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <MX_GPIO_Init+0x88>)
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	02db      	lsls	r3, r3, #11
 80035c4:	4013      	ands	r3, r2
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <MX_GPIO_Init+0x8c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	21c0      	movs	r1, #192	; 0xc0
 80035d0:	0018      	movs	r0, r3
 80035d2:	f004 ff1a 	bl	800840a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035d6:	0021      	movs	r1, r4
 80035d8:	187b      	adds	r3, r7, r1
 80035da:	22c0      	movs	r2, #192	; 0xc0
 80035dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	2201      	movs	r2, #1
 80035e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	187b      	adds	r3, r7, r1
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2203      	movs	r2, #3
 80035ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <MX_GPIO_Init+0x8c>)
 80035f4:	0019      	movs	r1, r3
 80035f6:	0010      	movs	r0, r2
 80035f8:	f004 fd72 	bl	80080e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b009      	add	sp, #36	; 0x24
 8003602:	bd90      	pop	{r4, r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	48000400 	.word	0x48000400

0800360c <MCP4725_WriteData_Voltage>:




uint8_t MCP4725_WriteData_Voltage(uint16_t Vout)
{
 800360c:	b5b0      	push	{r4, r5, r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	0002      	movs	r2, r0
 8003614:	1dbb      	adds	r3, r7, #6
 8003616:	801a      	strh	r2, [r3, #0]
	uint8_t temp;
	uint16_t Dn = (4096 * Vout) / 5000;
 8003618:	1dbb      	adds	r3, r7, #6
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	031b      	lsls	r3, r3, #12
 800361e:	4918      	ldr	r1, [pc, #96]	; (8003680 <MCP4725_WriteData_Voltage+0x74>)
 8003620:	0018      	movs	r0, r3
 8003622:	f7fc fdfb 	bl	800021c <__divsi3>
 8003626:	0003      	movs	r3, r0
 8003628:	001a      	movs	r2, r3
 800362a:	240e      	movs	r4, #14
 800362c:	193b      	adds	r3, r7, r4
 800362e:	801a      	strh	r2, [r3, #0]
	temp = (0x0F00 & Dn) >> 8;
 8003630:	193b      	adds	r3, r7, r4
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	b29b      	uxth	r3, r3
 8003638:	b2da      	uxtb	r2, r3
 800363a:	250d      	movs	r5, #13
 800363c:	197b      	adds	r3, r7, r5
 800363e:	210f      	movs	r1, #15
 8003640:	400a      	ands	r2, r1
 8003642:	701a      	strb	r2, [r3, #0]
	IIC_Start();
 8003644:	f7ff fa48 	bl	8002ad8 <IIC_Start>
	IIC_Send_Byte(0XC0);
 8003648:	20c0      	movs	r0, #192	; 0xc0
 800364a:	f7ff fad1 	bl	8002bf0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800364e:	f7ff fa93 	bl	8002b78 <IIC_Wait_Ack>
	IIC_Send_Byte(temp);
 8003652:	197b      	adds	r3, r7, r5
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	0018      	movs	r0, r3
 8003658:	f7ff faca 	bl	8002bf0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800365c:	f7ff fa8c 	bl	8002b78 <IIC_Wait_Ack>
	IIC_Send_Byte(Dn);
 8003660:	193b      	adds	r3, r7, r4
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b2db      	uxtb	r3, r3
 8003666:	0018      	movs	r0, r3
 8003668:	f7ff fac2 	bl	8002bf0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800366c:	f7ff fa84 	bl	8002b78 <IIC_Wait_Ack>
	IIC_Stop();
 8003670:	f7ff fa5a 	bl	8002b28 <IIC_Stop>
	return 0;
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bdb0      	pop	{r4, r5, r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	00001388 	.word	0x00001388

08003684 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d11b      	bne.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    if (safe_counter<150)
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b95      	cmp	r3, #149	; 0x95
 800369c:	d805      	bhi.n	80036aa <HAL_TIM_PeriodElapsedCallback+0x26>
	    safe_counter++;
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80036a8:	701a      	strb	r2, [r3, #0]
	motor_flag = true;
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
	mtime_now++;
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80036b8:	601a      	str	r2, [r3, #0]
	if(mtime_now == 10)
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b0a      	cmp	r3, #10
 80036c0:	d105      	bne.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x4a>
	{
		report_flag = true;
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
		mtime_now=0;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
	}
  }
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40000400 	.word	0x40000400
 80036dc:	20000255 	.word	0x20000255
 80036e0:	2000024c 	.word	0x2000024c
 80036e4:	20000248 	.word	0x20000248
 80036e8:	2000024d 	.word	0x2000024d

080036ec <delay_us>:


void delay_us(uint32_t nus)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	/* Go to clock cycles */
	// 48MHz / 1MHz / 6clk = 8
	uint32_t cnt = nus * 8 - 4;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	3b04      	subs	r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]
	/* Wait till done */
	__asm volatile(
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1c18      	adds	r0, r3, #0
 8003700:	3801      	subs	r0, #1
 8003702:	d8fd      	bhi.n	8003700 <delay_us+0x14>
		"  bhi   1b \n\t"     // 4 clk
		:
		: [cnt] "r" (cnt)
		: "r0"
	);
}
 8003704:	46c0      	nop			; (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b004      	add	sp, #16
 800370a:	bd80      	pop	{r7, pc}

0800370c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003710:	b672      	cpsid	i
}
 8003712:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003714:	e7fe      	b.n	8003714 <Error_Handler+0x8>
	...

08003718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_MspInit+0x44>)
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HAL_MspInit+0x44>)
 8003724:	2101      	movs	r1, #1
 8003726:	430a      	orrs	r2, r1
 8003728:	619a      	str	r2, [r3, #24]
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_MspInit+0x44>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2201      	movs	r2, #1
 8003730:	4013      	ands	r3, r2
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_MspInit+0x44>)
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_MspInit+0x44>)
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	0549      	lsls	r1, r1, #21
 8003740:	430a      	orrs	r2, r1
 8003742:	61da      	str	r2, [r3, #28]
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_MspInit+0x44>)
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	055b      	lsls	r3, r3, #21
 800374c:	4013      	ands	r3, r2
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b08b      	sub	sp, #44	; 0x2c
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003768:	2414      	movs	r4, #20
 800376a:	193b      	adds	r3, r7, r4
 800376c:	0018      	movs	r0, r3
 800376e:	2314      	movs	r3, #20
 8003770:	001a      	movs	r2, r3
 8003772:	2100      	movs	r1, #0
 8003774:	f00a fb6e 	bl	800de54 <memset>
  if(hadc->Instance==ADC1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_ADC_MspInit+0x94>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d133      	bne.n	80037ea <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_ADC_MspInit+0x98>)
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <HAL_ADC_MspInit+0x98>)
 8003788:	2180      	movs	r1, #128	; 0x80
 800378a:	0089      	lsls	r1, r1, #2
 800378c:	430a      	orrs	r2, r1
 800378e:	619a      	str	r2, [r3, #24]
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_ADC_MspInit+0x98>)
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <HAL_ADC_MspInit+0x98>)
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_ADC_MspInit+0x98>)
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	0289      	lsls	r1, r1, #10
 80037a8:	430a      	orrs	r2, r1
 80037aa:	615a      	str	r2, [r3, #20]
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_ADC_MspInit+0x98>)
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	2380      	movs	r3, #128	; 0x80
 80037b2:	029b      	lsls	r3, r3, #10
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80037ba:	193b      	adds	r3, r7, r4
 80037bc:	220f      	movs	r2, #15
 80037be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037c0:	193b      	adds	r3, r7, r4
 80037c2:	2203      	movs	r2, #3
 80037c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037cc:	193a      	adds	r2, r7, r4
 80037ce:	2390      	movs	r3, #144	; 0x90
 80037d0:	05db      	lsls	r3, r3, #23
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f004 fc83 	bl	80080e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	200c      	movs	r0, #12
 80037e0:	f004 fc4c 	bl	800807c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80037e4:	200c      	movs	r0, #12
 80037e6:	f004 fc5e 	bl	80080a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b00b      	add	sp, #44	; 0x2c
 80037f0:	bd90      	pop	{r4, r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	40012400 	.word	0x40012400
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b08b      	sub	sp, #44	; 0x2c
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	2414      	movs	r4, #20
 8003806:	193b      	adds	r3, r7, r4
 8003808:	0018      	movs	r0, r3
 800380a:	2314      	movs	r3, #20
 800380c:	001a      	movs	r2, r3
 800380e:	2100      	movs	r1, #0
 8003810:	f00a fb20 	bl	800de54 <memset>
  if(hcan->Instance==CAN)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <HAL_CAN_MspInit+0xa0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d13a      	bne.n	8003894 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_CAN_MspInit+0xa4>)
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_CAN_MspInit+0xa4>)
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	0489      	lsls	r1, r1, #18
 8003828:	430a      	orrs	r2, r1
 800382a:	61da      	str	r2, [r3, #28]
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_CAN_MspInit+0xa4>)
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	049b      	lsls	r3, r3, #18
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_CAN_MspInit+0xa4>)
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_CAN_MspInit+0xa4>)
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	02c9      	lsls	r1, r1, #11
 8003844:	430a      	orrs	r2, r1
 8003846:	615a      	str	r2, [r3, #20]
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_CAN_MspInit+0xa4>)
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	02db      	lsls	r3, r3, #11
 8003850:	4013      	ands	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003856:	193b      	adds	r3, r7, r4
 8003858:	22c0      	movs	r2, #192	; 0xc0
 800385a:	0092      	lsls	r2, r2, #2
 800385c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	0021      	movs	r1, r4
 8003860:	187b      	adds	r3, r7, r1
 8003862:	2202      	movs	r2, #2
 8003864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	187b      	adds	r3, r7, r1
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800386c:	187b      	adds	r3, r7, r1
 800386e:	2203      	movs	r2, #3
 8003870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8003872:	187b      	adds	r3, r7, r1
 8003874:	2204      	movs	r2, #4
 8003876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003878:	187b      	adds	r3, r7, r1
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_CAN_MspInit+0xa8>)
 800387c:	0019      	movs	r1, r3
 800387e:	0010      	movs	r0, r2
 8003880:	f004 fc2e 	bl	80080e0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	201e      	movs	r0, #30
 800388a:	f004 fbf7 	bl	800807c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800388e:	201e      	movs	r0, #30
 8003890:	f004 fc09 	bl	80080a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b00b      	add	sp, #44	; 0x2c
 800389a:	bd90      	pop	{r4, r7, pc}
 800389c:	40006400 	.word	0x40006400
 80038a0:	40021000 	.word	0x40021000
 80038a4:	48000400 	.word	0x48000400

080038a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_TIM_Base_MspInit+0x6c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038ba:	4b17      	ldr	r3, [pc, #92]	; (8003918 <HAL_TIM_Base_MspInit+0x70>)
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_TIM_Base_MspInit+0x70>)
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	0109      	lsls	r1, r1, #4
 80038c4:	430a      	orrs	r2, r1
 80038c6:	619a      	str	r2, [r3, #24]
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_TIM_Base_MspInit+0x70>)
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038d6:	e018      	b.n	800390a <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <HAL_TIM_Base_MspInit+0x74>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d113      	bne.n	800390a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_TIM_Base_MspInit+0x70>)
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <HAL_TIM_Base_MspInit+0x70>)
 80038e8:	2102      	movs	r1, #2
 80038ea:	430a      	orrs	r2, r1
 80038ec:	61da      	str	r2, [r3, #28]
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_TIM_Base_MspInit+0x70>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	2202      	movs	r2, #2
 80038f4:	4013      	ands	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2100      	movs	r1, #0
 80038fe:	2010      	movs	r0, #16
 8003900:	f004 fbbc 	bl	800807c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003904:	2010      	movs	r0, #16
 8003906:	f004 fbce 	bl	80080a6 <HAL_NVIC_EnableIRQ>
}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40021000 	.word	0x40021000
 800391c:	40000400 	.word	0x40000400

08003920 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	05db      	lsls	r3, r3, #23
 8003930:	429a      	cmp	r2, r3
 8003932:	d10b      	bne.n	800394c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003934:	4b07      	ldr	r3, [pc, #28]	; (8003954 <HAL_TIM_PWM_MspInit+0x34>)
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_TIM_PWM_MspInit+0x34>)
 800393a:	2101      	movs	r1, #1
 800393c:	430a      	orrs	r2, r1
 800393e:	61da      	str	r2, [r3, #28]
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <HAL_TIM_PWM_MspInit+0x34>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	2201      	movs	r2, #1
 8003946:	4013      	ands	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	b004      	add	sp, #16
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b08b      	sub	sp, #44	; 0x2c
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	2414      	movs	r4, #20
 8003962:	193b      	adds	r3, r7, r4
 8003964:	0018      	movs	r0, r3
 8003966:	2314      	movs	r3, #20
 8003968:	001a      	movs	r2, r3
 800396a:	2100      	movs	r1, #0
 800396c:	f00a fa72 	bl	800de54 <memset>
  if(htim->Instance==TIM2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	05db      	lsls	r3, r3, #23
 8003978:	429a      	cmp	r2, r3
 800397a:	d147      	bne.n	8003a0c <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800397c:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_TIM_MspPostInit+0xbc>)
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_TIM_MspPostInit+0xbc>)
 8003982:	2180      	movs	r1, #128	; 0x80
 8003984:	0289      	lsls	r1, r1, #10
 8003986:	430a      	orrs	r2, r1
 8003988:	615a      	str	r2, [r3, #20]
 800398a:	4b22      	ldr	r3, [pc, #136]	; (8003a14 <HAL_TIM_MspPostInit+0xbc>)
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	029b      	lsls	r3, r3, #10
 8003992:	4013      	ands	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003998:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_TIM_MspPostInit+0xbc>)
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_TIM_MspPostInit+0xbc>)
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	02c9      	lsls	r1, r1, #11
 80039a2:	430a      	orrs	r2, r1
 80039a4:	615a      	str	r2, [r3, #20]
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_TIM_MspPostInit+0xbc>)
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	02db      	lsls	r3, r3, #11
 80039ae:	4013      	ands	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80039b4:	193b      	adds	r3, r7, r4
 80039b6:	2220      	movs	r2, #32
 80039b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	193b      	adds	r3, r7, r4
 80039bc:	2202      	movs	r2, #2
 80039be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c6:	193b      	adds	r3, r7, r4
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80039cc:	193b      	adds	r3, r7, r4
 80039ce:	2202      	movs	r2, #2
 80039d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d2:	193a      	adds	r2, r7, r4
 80039d4:	2390      	movs	r3, #144	; 0x90
 80039d6:	05db      	lsls	r3, r3, #23
 80039d8:	0011      	movs	r1, r2
 80039da:	0018      	movs	r0, r3
 80039dc:	f004 fb80 	bl	80080e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80039e0:	0021      	movs	r1, r4
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <HAL_TIM_MspPostInit+0xc0>)
 80039e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2202      	movs	r2, #2
 80039ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	2202      	movs	r2, #2
 80039fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	4a06      	ldr	r2, [pc, #24]	; (8003a1c <HAL_TIM_MspPostInit+0xc4>)
 8003a04:	0019      	movs	r1, r3
 8003a06:	0010      	movs	r0, r2
 8003a08:	f004 fb6a 	bl	80080e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b00b      	add	sp, #44	; 0x2c
 8003a12:	bd90      	pop	{r4, r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	00000c08 	.word	0x00000c08
 8003a1c:	48000400 	.word	0x48000400

08003a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a24:	e7fe      	b.n	8003a24 <NMI_Handler+0x4>

08003a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2a:	e7fe      	b.n	8003a2a <HardFault_Handler+0x4>

08003a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a44:	f002 fd58 	bl	80064f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <ADC1_COMP_IRQHandler+0x14>)
 8003a56:	0018      	movs	r0, r3
 8003a58:	f003 f806 	bl	8006a68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003a5c:	46c0      	nop			; (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	20000278 	.word	0x20000278

08003a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <TIM3_IRQHandler+0x14>)
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f007 fab4 	bl	800afdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	20000370 	.word	0x20000370

08003a80 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <CEC_CAN_IRQHandler+0x14>)
 8003a86:	0018      	movs	r0, r3
 8003a88:	f004 f837 	bl	8007afa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	200002b8 	.word	0x200002b8

08003a98 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <USB_IRQHandler+0x14>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f004 fdf6 	bl	8008690 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	20001098 	.word	0x20001098

08003ab0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003ac0:	4914      	ldr	r1, [pc, #80]	; (8003b14 <MX_USB_DEVICE_Init+0x58>)
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <MX_USB_DEVICE_Init+0x5c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f001 f967 	bl	8004d9a <USBD_Init>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8003ad0:	f7ff fe1c 	bl	800370c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003ad4:	4a11      	ldr	r2, [pc, #68]	; (8003b1c <MX_USB_DEVICE_Init+0x60>)
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <MX_USB_DEVICE_Init+0x5c>)
 8003ad8:	0011      	movs	r1, r2
 8003ada:	0018      	movs	r0, r3
 8003adc:	f001 f98e 	bl	8004dfc <USBD_RegisterClass>
 8003ae0:	1e03      	subs	r3, r0, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8003ae4:	f7ff fe12 	bl	800370c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <MX_USB_DEVICE_Init+0x64>)
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <MX_USB_DEVICE_Init+0x5c>)
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 faa0 	bl	8004034 <USBD_CDC_RegisterInterface>
 8003af4:	1e03      	subs	r3, r0, #0
 8003af6:	d001      	beq.n	8003afc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8003af8:	f7ff fe08 	bl	800370c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <MX_USB_DEVICE_Init+0x5c>)
 8003afe:	0018      	movs	r0, r3
 8003b00:	f001 f99c 	bl	8004e3c <USBD_Start>
 8003b04:	1e03      	subs	r3, r0, #0
 8003b06:	d001      	beq.n	8003b0c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8003b08:	f7ff fe00 	bl	800370c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	20000160 	.word	0x20000160
 8003b18:	200003b8 	.word	0x200003b8
 8003b1c:	2000004c 	.word	0x2000004c
 8003b20:	20000150 	.word	0x20000150

08003b24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	000a      	movs	r2, r1
 8003b2e:	1cfb      	adds	r3, r7, #3
 8003b30:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8003b32:	230f      	movs	r3, #15
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	7c1b      	ldrb	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	2181      	movs	r1, #129	; 0x81
 8003b4c:	f000 ff4f 	bl	80049ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	2101      	movs	r1, #1
 8003b60:	f000 ff45 	bl	80049ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	23b6      	movs	r3, #182	; 0xb6
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	50d1      	str	r1, [r2, r3]
 8003b6e:	e013      	b.n	8003b98 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	2340      	movs	r3, #64	; 0x40
 8003b74:	2202      	movs	r2, #2
 8003b76:	2181      	movs	r1, #129	; 0x81
 8003b78:	f000 ff39 	bl	80049ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	2340      	movs	r3, #64	; 0x40
 8003b86:	2202      	movs	r2, #2
 8003b88:	2101      	movs	r1, #1
 8003b8a:	f000 ff30 	bl	80049ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	23b6      	movs	r3, #182	; 0xb6
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2101      	movs	r1, #1
 8003b96:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	2182      	movs	r1, #130	; 0x82
 8003ba0:	f000 ff25 	bl	80049ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40

  //pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
  static USBD_CDC_HandleTypeDef usbd;
  pdev->pClassData = (void*)&usbd;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	23ae      	movs	r3, #174	; 0xae
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4920      	ldr	r1, [pc, #128]	; (8003c34 <USBD_CDC_Init+0x110>)
 8003bb2:	50d1      	str	r1, [r2, r3]
  if (pdev->pClassData == NULL)
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	23ae      	movs	r3, #174	; 0xae
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	58d3      	ldr	r3, [r2, r3]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d104      	bne.n	8003bca <USBD_CDC_Init+0xa6>
  {
    ret = 1U;
 8003bc0:	230f      	movs	r3, #15
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e02c      	b.n	8003c24 <USBD_CDC_Init+0x100>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	23ae      	movs	r3, #174	; 0xae
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	58d3      	ldr	r3, [r2, r3]
 8003bd2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	23af      	movs	r3, #175	; 0xaf
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	58d3      	ldr	r3, [r2, r3]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	2385      	movs	r3, #133	; 0x85
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	2100      	movs	r1, #0
 8003be8:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	2386      	movs	r3, #134	; 0x86
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	7c1b      	ldrb	r3, [r3, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <USBD_CDC_Init+0xee>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	2381      	movs	r3, #129	; 0x81
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	58d2      	ldr	r2, [r2, r3]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	f001 f83a 	bl	8004c84 <USBD_LL_PrepareReceive>
 8003c10:	e008      	b.n	8003c24 <USBD_CDC_Init+0x100>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	2381      	movs	r3, #129	; 0x81
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	58d2      	ldr	r2, [r2, r3]
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	2340      	movs	r3, #64	; 0x40
 8003c1e:	2101      	movs	r1, #1
 8003c20:	f001 f830 	bl	8004c84 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003c24:	230f      	movs	r3, #15
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	781b      	ldrb	r3, [r3, #0]
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b004      	add	sp, #16
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	2000067c 	.word	0x2000067c

08003c38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	000a      	movs	r2, r1
 8003c42:	1cfb      	adds	r3, r7, #3
 8003c44:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8003c46:	230f      	movs	r3, #15
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2181      	movs	r1, #129	; 0x81
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 ff02 	bl	8004a5c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2101      	movs	r1, #1
 8003c62:	0018      	movs	r0, r3
 8003c64:	f000 fefa 	bl	8004a5c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	23b6      	movs	r3, #182	; 0xb6
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2100      	movs	r1, #0
 8003c70:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2182      	movs	r1, #130	; 0x82
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 fef0 	bl	8004a5c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	23ae      	movs	r3, #174	; 0xae
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	58d3      	ldr	r3, [r2, r3]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <USBD_CDC_DeInit+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	23af      	movs	r3, #175	; 0xaf
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	58d3      	ldr	r3, [r2, r3]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4798      	blx	r3
    //USBD_free(pdev->pClassData);
    pdev->pClassData = NULL;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	23ae      	movs	r3, #174	; 0xae
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8003ca4:	230f      	movs	r3, #15
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	781b      	ldrb	r3, [r3, #0]
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b004      	add	sp, #16
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	23ae      	movs	r3, #174	; 0xae
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	58d3      	ldr	r3, [r2, r3]
 8003cc6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003cc8:	230f      	movs	r3, #15
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8003cd8:	2317      	movs	r3, #23
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	2360      	movs	r3, #96	; 0x60
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d03d      	beq.n	8003d68 <USBD_CDC_Setup+0xb4>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d000      	beq.n	8003cf2 <USBD_CDC_Setup+0x3e>
 8003cf0:	e094      	b.n	8003e1c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	88db      	ldrh	r3, [r3, #6]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d02b      	beq.n	8003d52 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b25b      	sxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	da12      	bge.n	8003d2a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	23af      	movs	r3, #175	; 0xaf
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	58d3      	ldr	r3, [r2, r3]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003d12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	88d2      	ldrh	r2, [r2, #6]
 8003d18:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d1a:	6939      	ldr	r1, [r7, #16]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	88da      	ldrh	r2, [r3, #6]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f002 fae3 	bl	80062ee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003d28:	e083      	b.n	8003e32 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	7859      	ldrb	r1, [r3, #1]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	88db      	ldrh	r3, [r3, #6]
 8003d3a:	b2d9      	uxtb	r1, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4a40      	ldr	r2, [pc, #256]	; (8003e40 <USBD_CDC_Setup+0x18c>)
 8003d40:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d42:	6939      	ldr	r1, [r7, #16]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	88da      	ldrh	r2, [r3, #6]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f002 fb02 	bl	8006354 <USBD_CtlPrepareRx>
      break;
 8003d50:	e06f      	b.n	8003e32 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	23af      	movs	r3, #175	; 0xaf
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	58d3      	ldr	r3, [r2, r3]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	7850      	ldrb	r0, [r2, #1]
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	4798      	blx	r3
      break;
 8003d66:	e064      	b.n	8003e32 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b0b      	cmp	r3, #11
 8003d6e:	d037      	beq.n	8003de0 <USBD_CDC_Setup+0x12c>
 8003d70:	dc47      	bgt.n	8003e02 <USBD_CDC_Setup+0x14e>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <USBD_CDC_Setup+0xc8>
 8003d76:	2b0a      	cmp	r3, #10
 8003d78:	d019      	beq.n	8003dae <USBD_CDC_Setup+0xfa>
 8003d7a:	e042      	b.n	8003e02 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	23a7      	movs	r3, #167	; 0xa7
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d107      	bne.n	8003d98 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003d88:	230c      	movs	r3, #12
 8003d8a:	18f9      	adds	r1, r7, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f002 faac 	bl	80062ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003d96:	e040      	b.n	8003e1a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0011      	movs	r1, r2
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f002 f8fa 	bl	8005f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8003da4:	2317      	movs	r3, #23
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	2202      	movs	r2, #2
 8003daa:	701a      	strb	r2, [r3, #0]
          break;
 8003dac:	e035      	b.n	8003e1a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	23a7      	movs	r3, #167	; 0xa7
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d107      	bne.n	8003dca <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003dba:	230f      	movs	r3, #15
 8003dbc:	18f9      	adds	r1, r7, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f002 fa93 	bl	80062ee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003dc8:	e027      	b.n	8003e1a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f002 f8e1 	bl	8005f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8003dd6:	2317      	movs	r3, #23
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	2202      	movs	r2, #2
 8003ddc:	701a      	strb	r2, [r3, #0]
          break;
 8003dde:	e01c      	b.n	8003e1a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	23a7      	movs	r3, #167	; 0xa7
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d015      	beq.n	8003e18 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0011      	movs	r1, r2
 8003df2:	0018      	movs	r0, r3
 8003df4:	f002 f8d0 	bl	8005f98 <USBD_CtlError>
            ret = USBD_FAIL;
 8003df8:	2317      	movs	r3, #23
 8003dfa:	18fb      	adds	r3, r7, r3
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	701a      	strb	r2, [r3, #0]
          }
          break;
 8003e00:	e00a      	b.n	8003e18 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0011      	movs	r1, r2
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f002 f8c5 	bl	8005f98 <USBD_CtlError>
          ret = USBD_FAIL;
 8003e0e:	2317      	movs	r3, #23
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	2202      	movs	r2, #2
 8003e14:	701a      	strb	r2, [r3, #0]
          break;
 8003e16:	e000      	b.n	8003e1a <USBD_CDC_Setup+0x166>
          break;
 8003e18:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8003e1a:	e00a      	b.n	8003e32 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f002 f8b8 	bl	8005f98 <USBD_CtlError>
      ret = USBD_FAIL;
 8003e28:	2317      	movs	r3, #23
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	701a      	strb	r2, [r3, #0]
      break;
 8003e30:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8003e32:	2317      	movs	r3, #23
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	781b      	ldrb	r3, [r3, #0]
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b006      	add	sp, #24
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	00000201 	.word	0x00000201

08003e44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	000a      	movs	r2, r1
 8003e4e:	1cfb      	adds	r3, r7, #3
 8003e50:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	23ae      	movs	r3, #174	; 0xae
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	58d3      	ldr	r3, [r2, r3]
 8003e5a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	23b0      	movs	r3, #176	; 0xb0
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	58d3      	ldr	r3, [r2, r3]
 8003e64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	23ae      	movs	r3, #174	; 0xae
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	58d3      	ldr	r3, [r2, r3]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03e      	beq.n	8003ef0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003e72:	1cfb      	adds	r3, r7, #3
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	0013      	movs	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	18cb      	adds	r3, r1, r3
 8003e82:	331c      	adds	r3, #28
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d02b      	beq.n	8003ee2 <USBD_CDC_DataIn+0x9e>
 8003e8a:	1cfb      	adds	r3, r7, #3
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	0013      	movs	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	18cb      	adds	r3, r1, r3
 8003e9a:	331c      	adds	r3, #28
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	1cfb      	adds	r3, r7, #3
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	18cb      	adds	r3, r1, r3
 8003eae:	3338      	adds	r3, #56	; 0x38
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	f7fc f9ae 	bl	8000214 <__aeabi_uidivmod>
 8003eb8:	1e0b      	subs	r3, r1, #0
 8003eba:	d112      	bne.n	8003ee2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003ebc:	1cfb      	adds	r3, r7, #3
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	0013      	movs	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	18cb      	adds	r3, r1, r3
 8003ecc:	331c      	adds	r3, #28
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003ed2:	1cfb      	adds	r3, r7, #3
 8003ed4:	7819      	ldrb	r1, [r3, #0]
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2200      	movs	r2, #0
 8003edc:	f000 fe9b 	bl	8004c16 <USBD_LL_Transmit>
 8003ee0:	e004      	b.n	8003eec <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	2385      	movs	r3, #133	; 0x85
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	2100      	movs	r1, #0
 8003eea:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	000a      	movs	r2, r1
 8003f04:	1cfb      	adds	r3, r7, #3
 8003f06:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	23ae      	movs	r3, #174	; 0xae
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	58d3      	ldr	r3, [r2, r3]
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003f12:	1cfb      	adds	r3, r7, #3
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0011      	movs	r1, r2
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 fee9 	bl	8004cf2 <USBD_LL_GetRxDataSize>
 8003f20:	0001      	movs	r1, r0
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	2383      	movs	r3, #131	; 0x83
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	23ae      	movs	r3, #174	; 0xae
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	58d3      	ldr	r3, [r2, r3]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d011      	beq.n	8003f5a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	23af      	movs	r3, #175	; 0xaf
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	58d3      	ldr	r3, [r2, r3]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	2381      	movs	r3, #129	; 0x81
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	58c8      	ldr	r0, [r1, r3]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2183      	movs	r1, #131	; 0x83
 8003f4c:	0089      	lsls	r1, r1, #2
 8003f4e:	468c      	mov	ip, r1
 8003f50:	4463      	add	r3, ip
 8003f52:	0019      	movs	r1, r3
 8003f54:	4790      	blx	r2

    return USBD_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b004      	add	sp, #16
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	23ae      	movs	r3, #174	; 0xae
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	58d3      	ldr	r3, [r2, r3]
 8003f74:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	23af      	movs	r3, #175	; 0xaf
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	58d3      	ldr	r3, [r2, r3]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d019      	beq.n	8003fb6 <USBD_CDC_EP0_RxReady+0x52>
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	5cd3      	ldrb	r3, [r2, r3]
 8003f8a:	2bff      	cmp	r3, #255	; 0xff
 8003f8c:	d013      	beq.n	8003fb6 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	23af      	movs	r3, #175	; 0xaf
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	58d3      	ldr	r3, [r2, r3]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	68f9      	ldr	r1, [r7, #12]
 8003f9a:	2280      	movs	r2, #128	; 0x80
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8003fa0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4c06      	ldr	r4, [pc, #24]	; (8003fc0 <USBD_CDC_EP0_RxReady+0x5c>)
 8003fa6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	21ff      	movs	r1, #255	; 0xff
 8003fb4:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b005      	add	sp, #20
 8003fbe:	bd90      	pop	{r4, r7, pc}
 8003fc0:	00000201 	.word	0x00000201

08003fc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2243      	movs	r2, #67	; 0x43
 8003fd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003fd2:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	200000c8 	.word	0x200000c8

08003fe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2243      	movs	r2, #67	; 0x43
 8003fec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003fee:	4b02      	ldr	r3, [pc, #8]	; (8003ff8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000084 	.word	0x20000084

08003ffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2243      	movs	r2, #67	; 0x43
 8004008:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800400a:	4b02      	ldr	r3, [pc, #8]	; (8004014 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b002      	add	sp, #8
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2000010c 	.word	0x2000010c

08004018 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	220a      	movs	r2, #10
 8004024:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004026:	4b02      	ldr	r3, [pc, #8]	; (8004030 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	b002      	add	sp, #8
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20000040 	.word	0x20000040

08004034 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800403e:	200f      	movs	r0, #15
 8004040:	183b      	adds	r3, r7, r0
 8004042:	2202      	movs	r2, #2
 8004044:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	23af      	movs	r3, #175	; 0xaf
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	6839      	ldr	r1, [r7, #0]
 8004054:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8004056:	183b      	adds	r3, r7, r0
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800405c:	230f      	movs	r3, #15
 800405e:	18fb      	adds	r3, r7, r3
 8004060:	781b      	ldrb	r3, [r3, #0]
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}

0800406a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b086      	sub	sp, #24
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	1dbb      	adds	r3, r7, #6
 8004076:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	23ae      	movs	r3, #174	; 0xae
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	58d3      	ldr	r3, [r2, r3]
 8004080:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	2382      	movs	r3, #130	; 0x82
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800408c:	1dbb      	adds	r3, r7, #6
 800408e:	8819      	ldrh	r1, [r3, #0]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	2384      	movs	r3, #132	; 0x84
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b006      	add	sp, #24
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	23ae      	movs	r3, #174	; 0xae
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	58d3      	ldr	r3, [r2, r3]
 80040b4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	2381      	movs	r3, #129	; 0x81
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b004      	add	sp, #16
 80040c8:	bd80      	pop	{r7, pc}

080040ca <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	23ae      	movs	r3, #174	; 0xae
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	58d3      	ldr	r3, [r2, r3]
 80040da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	23ae      	movs	r3, #174	; 0xae
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	58d3      	ldr	r3, [r2, r3]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d022      	beq.n	800412e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	2385      	movs	r3, #133	; 0x85
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	58d3      	ldr	r3, [r2, r3]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d11a      	bne.n	800412a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	2385      	movs	r3, #133	; 0x85
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	2101      	movs	r1, #1
 80040fc:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	2384      	movs	r3, #132	; 0x84
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	58d2      	ldr	r2, [r2, r3]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	2382      	movs	r3, #130	; 0x82
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	2384      	movs	r3, #132	; 0x84
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800411a:	b29b      	uxth	r3, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	000a      	movs	r2, r1
 8004120:	2181      	movs	r1, #129	; 0x81
 8004122:	f000 fd78 	bl	8004c16 <USBD_LL_Transmit>

      return USBD_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e002      	b.n	8004130 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bd80      	pop	{r7, pc}

08004138 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	23ae      	movs	r3, #174	; 0xae
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	58d3      	ldr	r3, [r2, r3]
 8004148:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	23ae      	movs	r3, #174	; 0xae
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	58d3      	ldr	r3, [r2, r3]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d019      	beq.n	800418a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	7c1b      	ldrb	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	2381      	movs	r3, #129	; 0x81
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	58d2      	ldr	r2, [r2, r3]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	2101      	movs	r1, #1
 800416e:	f000 fd89 	bl	8004c84 <USBD_LL_PrepareReceive>
 8004172:	e008      	b.n	8004186 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	2381      	movs	r3, #129	; 0x81
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	58d2      	ldr	r2, [r2, r3]
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	2340      	movs	r3, #64	; 0x40
 8004180:	2101      	movs	r1, #1
 8004182:	f000 fd7f 	bl	8004c84 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b004      	add	sp, #16
 8004192:	bd80      	pop	{r7, pc}

08004194 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004198:	4907      	ldr	r1, [pc, #28]	; (80041b8 <CDC_Init_FS+0x24>)
 800419a:	4b08      	ldr	r3, [pc, #32]	; (80041bc <CDC_Init_FS+0x28>)
 800419c:	2200      	movs	r2, #0
 800419e:	0018      	movs	r0, r3
 80041a0:	f7ff ff63 	bl	800406a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80041a4:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <CDC_Init_FS+0x2c>)
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <CDC_Init_FS+0x28>)
 80041a8:	0011      	movs	r1, r2
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7ff ff79 	bl	80040a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80041b0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000c98 	.word	0x20000c98
 80041bc:	200003b8 	.word	0x200003b8
 80041c0:	20000898 	.word	0x20000898

080041c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80041c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6039      	str	r1, [r7, #0]
 80041d8:	0011      	movs	r1, r2
 80041da:	1dfb      	adds	r3, r7, #7
 80041dc:	1c02      	adds	r2, r0, #0
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	1d3b      	adds	r3, r7, #4
 80041e2:	1c0a      	adds	r2, r1, #0
 80041e4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80041e6:	1dfb      	adds	r3, r7, #7
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b23      	cmp	r3, #35	; 0x23
 80041ec:	d804      	bhi.n	80041f8 <CDC_Control_FS+0x28>
 80041ee:	009a      	lsls	r2, r3, #2
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <CDC_Control_FS+0x34>)
 80041f2:	18d3      	adds	r3, r2, r3
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80041f8:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80041fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}
 8004204:	0800dff8 	.word	0x0800dff8

08004208 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if(Buf[0]==0x00)//stop
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <CDC_Receive_FS+0x2a>
  {
	  if(*Len==1)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d103      	bne.n	800422a <CDC_Receive_FS+0x22>
		  motor_task = STOP;
 8004222:	4bda      	ldr	r3, [pc, #872]	; (800458c <CDC_Receive_FS+0x384>)
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	e21d      	b.n	8004666 <CDC_Receive_FS+0x45e>
	  else
		  motor_task = START;
 800422a:	4bd8      	ldr	r3, [pc, #864]	; (800458c <CDC_Receive_FS+0x384>)
 800422c:	2202      	movs	r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e219      	b.n	8004666 <CDC_Receive_FS+0x45e>
  }
  else if(Buf[0]==0x01 && *Len==3)//speed forward
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d152      	bne.n	80042e0 <CDC_Receive_FS+0xd8>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d14e      	bne.n	80042e0 <CDC_Receive_FS+0xd8>
  {
	  float newspeed = (Buf[1]<<8)+Buf[2];
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3301      	adds	r3, #1
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	3202      	adds	r2, #2
 800424e:	7812      	ldrb	r2, [r2, #0]
 8004250:	189b      	adds	r3, r3, r2
 8004252:	0018      	movs	r0, r3
 8004254:	f7fc ffbe 	bl	80011d4 <__aeabi_i2f>
 8004258:	1c03      	adds	r3, r0, #0
 800425a:	617b      	str	r3, [r7, #20]
	  if(myabs(newspeed-goal_speed)>100)
 800425c:	4bcc      	ldr	r3, [pc, #816]	; (8004590 <CDC_Receive_FS+0x388>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	1c19      	adds	r1, r3, #0
 8004262:	6978      	ldr	r0, [r7, #20]
 8004264:	f7fc fdf6 	bl	8000e54 <__aeabi_fsub>
 8004268:	1c03      	adds	r3, r0, #0
 800426a:	2100      	movs	r1, #0
 800426c:	1c18      	adds	r0, r3, #0
 800426e:	f7fc f925 	bl	80004bc <__aeabi_fcmpgt>
 8004272:	1e03      	subs	r3, r0, #0
 8004274:	d012      	beq.n	800429c <CDC_Receive_FS+0x94>
 8004276:	4bc6      	ldr	r3, [pc, #792]	; (8004590 <CDC_Receive_FS+0x388>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	1c19      	adds	r1, r3, #0
 800427c:	6978      	ldr	r0, [r7, #20]
 800427e:	f7fc fde9 	bl	8000e54 <__aeabi_fsub>
 8004282:	1c03      	adds	r3, r0, #0
 8004284:	2201      	movs	r2, #1
 8004286:	1c14      	adds	r4, r2, #0
 8004288:	49c2      	ldr	r1, [pc, #776]	; (8004594 <CDC_Receive_FS+0x38c>)
 800428a:	1c18      	adds	r0, r3, #0
 800428c:	f7fc f916 	bl	80004bc <__aeabi_fcmpgt>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d101      	bne.n	8004298 <CDC_Receive_FS+0x90>
 8004294:	2300      	movs	r3, #0
 8004296:	1c1c      	adds	r4, r3, #0
 8004298:	b2e3      	uxtb	r3, r4
 800429a:	e015      	b.n	80042c8 <CDC_Receive_FS+0xc0>
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	0612      	lsls	r2, r2, #24
 80042a2:	405a      	eors	r2, r3
 80042a4:	4bba      	ldr	r3, [pc, #744]	; (8004590 <CDC_Receive_FS+0x388>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	1c19      	adds	r1, r3, #0
 80042aa:	1c10      	adds	r0, r2, #0
 80042ac:	f7fc fdd2 	bl	8000e54 <__aeabi_fsub>
 80042b0:	1c03      	adds	r3, r0, #0
 80042b2:	2201      	movs	r2, #1
 80042b4:	1c14      	adds	r4, r2, #0
 80042b6:	49b7      	ldr	r1, [pc, #732]	; (8004594 <CDC_Receive_FS+0x38c>)
 80042b8:	1c18      	adds	r0, r3, #0
 80042ba:	f7fc f8ff 	bl	80004bc <__aeabi_fcmpgt>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d101      	bne.n	80042c6 <CDC_Receive_FS+0xbe>
 80042c2:	2300      	movs	r3, #0
 80042c4:	1c1c      	adds	r4, r3, #0
 80042c6:	b2e3      	uxtb	r3, r4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <CDC_Receive_FS+0xca>
		  safe_counter = 0;
 80042cc:	4bb2      	ldr	r3, [pc, #712]	; (8004598 <CDC_Receive_FS+0x390>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
	  goal_speed = newspeed;
 80042d2:	4baf      	ldr	r3, [pc, #700]	; (8004590 <CDC_Receive_FS+0x388>)
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	601a      	str	r2, [r3, #0]
	  motor_mode = SPEED;
 80042d8:	4bb0      	ldr	r3, [pc, #704]	; (800459c <CDC_Receive_FS+0x394>)
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
  {
 80042de:	e1c2      	b.n	8004666 <CDC_Receive_FS+0x45e>
  }
  else if(Buf[0]==0x02 && *Len==3)//speed backward
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d153      	bne.n	8004390 <CDC_Receive_FS+0x188>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d14f      	bne.n	8004390 <CDC_Receive_FS+0x188>
  {
	  float newspeed = -((Buf[1]<<8)+Buf[2]);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3301      	adds	r3, #1
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	3202      	adds	r2, #2
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	189b      	adds	r3, r3, r2
 8004300:	425b      	negs	r3, r3
 8004302:	0018      	movs	r0, r3
 8004304:	f7fc ff66 	bl	80011d4 <__aeabi_i2f>
 8004308:	1c03      	adds	r3, r0, #0
 800430a:	613b      	str	r3, [r7, #16]
	  if(myabs(newspeed-goal_speed)>100)
 800430c:	4ba0      	ldr	r3, [pc, #640]	; (8004590 <CDC_Receive_FS+0x388>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1c19      	adds	r1, r3, #0
 8004312:	6938      	ldr	r0, [r7, #16]
 8004314:	f7fc fd9e 	bl	8000e54 <__aeabi_fsub>
 8004318:	1c03      	adds	r3, r0, #0
 800431a:	2100      	movs	r1, #0
 800431c:	1c18      	adds	r0, r3, #0
 800431e:	f7fc f8cd 	bl	80004bc <__aeabi_fcmpgt>
 8004322:	1e03      	subs	r3, r0, #0
 8004324:	d012      	beq.n	800434c <CDC_Receive_FS+0x144>
 8004326:	4b9a      	ldr	r3, [pc, #616]	; (8004590 <CDC_Receive_FS+0x388>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	1c19      	adds	r1, r3, #0
 800432c:	6938      	ldr	r0, [r7, #16]
 800432e:	f7fc fd91 	bl	8000e54 <__aeabi_fsub>
 8004332:	1c03      	adds	r3, r0, #0
 8004334:	2201      	movs	r2, #1
 8004336:	1c14      	adds	r4, r2, #0
 8004338:	4996      	ldr	r1, [pc, #600]	; (8004594 <CDC_Receive_FS+0x38c>)
 800433a:	1c18      	adds	r0, r3, #0
 800433c:	f7fc f8be 	bl	80004bc <__aeabi_fcmpgt>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d101      	bne.n	8004348 <CDC_Receive_FS+0x140>
 8004344:	2300      	movs	r3, #0
 8004346:	1c1c      	adds	r4, r3, #0
 8004348:	b2e3      	uxtb	r3, r4
 800434a:	e015      	b.n	8004378 <CDC_Receive_FS+0x170>
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2280      	movs	r2, #128	; 0x80
 8004350:	0612      	lsls	r2, r2, #24
 8004352:	405a      	eors	r2, r3
 8004354:	4b8e      	ldr	r3, [pc, #568]	; (8004590 <CDC_Receive_FS+0x388>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	1c19      	adds	r1, r3, #0
 800435a:	1c10      	adds	r0, r2, #0
 800435c:	f7fc fd7a 	bl	8000e54 <__aeabi_fsub>
 8004360:	1c03      	adds	r3, r0, #0
 8004362:	2201      	movs	r2, #1
 8004364:	1c14      	adds	r4, r2, #0
 8004366:	498b      	ldr	r1, [pc, #556]	; (8004594 <CDC_Receive_FS+0x38c>)
 8004368:	1c18      	adds	r0, r3, #0
 800436a:	f7fc f8a7 	bl	80004bc <__aeabi_fcmpgt>
 800436e:	1e03      	subs	r3, r0, #0
 8004370:	d101      	bne.n	8004376 <CDC_Receive_FS+0x16e>
 8004372:	2300      	movs	r3, #0
 8004374:	1c1c      	adds	r4, r3, #0
 8004376:	b2e3      	uxtb	r3, r4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <CDC_Receive_FS+0x17a>
		  safe_counter = 0;
 800437c:	4b86      	ldr	r3, [pc, #536]	; (8004598 <CDC_Receive_FS+0x390>)
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
	  goal_speed = newspeed;
 8004382:	4b83      	ldr	r3, [pc, #524]	; (8004590 <CDC_Receive_FS+0x388>)
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	601a      	str	r2, [r3, #0]
	  motor_mode = SPEED;
 8004388:	4b84      	ldr	r3, [pc, #528]	; (800459c <CDC_Receive_FS+0x394>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
  {
 800438e:	e16a      	b.n	8004666 <CDC_Receive_FS+0x45e>
  }
  else if(Buf[0]==0x03)// set motor zeropoint
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d109      	bne.n	80043ac <CDC_Receive_FS+0x1a4>
  {
	  motor_task = SETZERO;
 8004398:	4b7c      	ldr	r3, [pc, #496]	; (800458c <CDC_Receive_FS+0x384>)
 800439a:	2204      	movs	r2, #4
 800439c:	701a      	strb	r2, [r3, #0]
	  motor_mode = SPEED;
 800439e:	4b7f      	ldr	r3, [pc, #508]	; (800459c <CDC_Receive_FS+0x394>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
	  safe_counter=0;
 80043a4:	4b7c      	ldr	r3, [pc, #496]	; (8004598 <CDC_Receive_FS+0x390>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e15c      	b.n	8004666 <CDC_Receive_FS+0x45e>
  }
  else if(Buf[0]==0x04 && *Len>=3)//goto position
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d129      	bne.n	8004408 <CDC_Receive_FS+0x200>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d925      	bls.n	8004408 <CDC_Receive_FS+0x200>
  {
	  int16_t new_goal_pos = (Buf[1]<<8)+Buf[2];
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3301      	adds	r3, #1
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3302      	adds	r3, #2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	18d3      	adds	r3, r2, r3
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	210e      	movs	r1, #14
 80043d6:	187b      	adds	r3, r7, r1
 80043d8:	801a      	strh	r2, [r3, #0]
	  safe_counter = 0;
 80043da:	4b6f      	ldr	r3, [pc, #444]	; (8004598 <CDC_Receive_FS+0x390>)
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
	  motor_mode = POS;
 80043e0:	4b6e      	ldr	r3, [pc, #440]	; (800459c <CDC_Receive_FS+0x394>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
	  goal_pos = new_goal_pos;
 80043e6:	4b6e      	ldr	r3, [pc, #440]	; (80045a0 <CDC_Receive_FS+0x398>)
 80043e8:	187a      	adds	r2, r7, r1
 80043ea:	8812      	ldrh	r2, [r2, #0]
 80043ec:	801a      	strh	r2, [r3, #0]
	  if(Buf[3]==0x01)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3303      	adds	r3, #3
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d103      	bne.n	8004400 <CDC_Receive_FS+0x1f8>
		  motor_task = NORMAL;
 80043f8:	4b64      	ldr	r3, [pc, #400]	; (800458c <CDC_Receive_FS+0x384>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
  {
 80043fe:	e132      	b.n	8004666 <CDC_Receive_FS+0x45e>
	  else
		  motor_task = GOTO;
 8004400:	4b62      	ldr	r3, [pc, #392]	; (800458c <CDC_Receive_FS+0x384>)
 8004402:	2205      	movs	r2, #5
 8004404:	701a      	strb	r2, [r3, #0]
  {
 8004406:	e12e      	b.n	8004666 <CDC_Receive_FS+0x45e>
  }
  else if(Buf[0]==0x05)//set weight zero point
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b05      	cmp	r3, #5
 800440e:	d12f      	bne.n	8004470 <CDC_Receive_FS+0x268>
  {
	  weighttime = ((Buf[1]<<8)+Buf[2])/10000.0;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	3202      	adds	r2, #2
 800441c:	7812      	ldrb	r2, [r2, #0]
 800441e:	189b      	adds	r3, r3, r2
 8004420:	0018      	movs	r0, r3
 8004422:	f7fd fe2d 	bl	8002080 <__aeabi_i2d>
 8004426:	2200      	movs	r2, #0
 8004428:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <CDC_Receive_FS+0x39c>)
 800442a:	f7fc ff6d 	bl	8001308 <__aeabi_ddiv>
 800442e:	0002      	movs	r2, r0
 8004430:	000b      	movs	r3, r1
 8004432:	0010      	movs	r0, r2
 8004434:	0019      	movs	r1, r3
 8004436:	f7fd fe9b 	bl	8002170 <__aeabi_d2f>
 800443a:	1c02      	adds	r2, r0, #0
 800443c:	4b5a      	ldr	r3, [pc, #360]	; (80045a8 <CDC_Receive_FS+0x3a0>)
 800443e:	601a      	str	r2, [r3, #0]
	  zeropoint += GetNowWeight(&hadc)/weighttime;
 8004440:	4b5a      	ldr	r3, [pc, #360]	; (80045ac <CDC_Receive_FS+0x3a4>)
 8004442:	0018      	movs	r0, r3
 8004444:	f7fe fa1c 	bl	8002880 <GetNowWeight>
 8004448:	1c02      	adds	r2, r0, #0
 800444a:	4b57      	ldr	r3, [pc, #348]	; (80045a8 <CDC_Receive_FS+0x3a0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1c19      	adds	r1, r3, #0
 8004450:	1c10      	adds	r0, r2, #0
 8004452:	f7fc f9e7 	bl	8000824 <__aeabi_fdiv>
 8004456:	1c03      	adds	r3, r0, #0
 8004458:	1c1a      	adds	r2, r3, #0
 800445a:	4b55      	ldr	r3, [pc, #340]	; (80045b0 <CDC_Receive_FS+0x3a8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	1c19      	adds	r1, r3, #0
 8004460:	1c10      	adds	r0, r2, #0
 8004462:	f7fc f83f 	bl	80004e4 <__aeabi_fadd>
 8004466:	1c03      	adds	r3, r0, #0
 8004468:	1c1a      	adds	r2, r3, #0
 800446a:	4b51      	ldr	r3, [pc, #324]	; (80045b0 <CDC_Receive_FS+0x3a8>)
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e0fa      	b.n	8004666 <CDC_Receive_FS+0x45e>
  }
  else if(Buf[0]==0x06 && *Len>=4)//force control
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b06      	cmp	r3, #6
 8004476:	d000      	beq.n	800447a <CDC_Receive_FS+0x272>
 8004478:	e0a6      	b.n	80045c8 <CDC_Receive_FS+0x3c0>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d800      	bhi.n	8004484 <CDC_Receive_FS+0x27c>
 8004482:	e0a1      	b.n	80045c8 <CDC_Receive_FS+0x3c0>
  {
	  float newforce = (Buf[1]<<8)+Buf[2];
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3301      	adds	r3, #1
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	3202      	adds	r2, #2
 8004490:	7812      	ldrb	r2, [r2, #0]
 8004492:	189b      	adds	r3, r3, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f7fc fe9d 	bl	80011d4 <__aeabi_i2f>
 800449a:	1c03      	adds	r3, r0, #0
 800449c:	60bb      	str	r3, [r7, #8]
	  if(myabs(newforce-goal_force)>50)
 800449e:	4b45      	ldr	r3, [pc, #276]	; (80045b4 <CDC_Receive_FS+0x3ac>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	5e9b      	ldrsh	r3, [r3, r2]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f7fc fe95 	bl	80011d4 <__aeabi_i2f>
 80044aa:	1c03      	adds	r3, r0, #0
 80044ac:	1c19      	adds	r1, r3, #0
 80044ae:	68b8      	ldr	r0, [r7, #8]
 80044b0:	f7fc fcd0 	bl	8000e54 <__aeabi_fsub>
 80044b4:	1c03      	adds	r3, r0, #0
 80044b6:	2100      	movs	r1, #0
 80044b8:	1c18      	adds	r0, r3, #0
 80044ba:	f7fb ffff 	bl	80004bc <__aeabi_fcmpgt>
 80044be:	1e03      	subs	r3, r0, #0
 80044c0:	d017      	beq.n	80044f2 <CDC_Receive_FS+0x2ea>
 80044c2:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <CDC_Receive_FS+0x3ac>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	5e9b      	ldrsh	r3, [r3, r2]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f7fc fe83 	bl	80011d4 <__aeabi_i2f>
 80044ce:	1c03      	adds	r3, r0, #0
 80044d0:	1c19      	adds	r1, r3, #0
 80044d2:	68b8      	ldr	r0, [r7, #8]
 80044d4:	f7fc fcbe 	bl	8000e54 <__aeabi_fsub>
 80044d8:	1c03      	adds	r3, r0, #0
 80044da:	2201      	movs	r2, #1
 80044dc:	1c14      	adds	r4, r2, #0
 80044de:	4936      	ldr	r1, [pc, #216]	; (80045b8 <CDC_Receive_FS+0x3b0>)
 80044e0:	1c18      	adds	r0, r3, #0
 80044e2:	f7fb ffeb 	bl	80004bc <__aeabi_fcmpgt>
 80044e6:	1e03      	subs	r3, r0, #0
 80044e8:	d101      	bne.n	80044ee <CDC_Receive_FS+0x2e6>
 80044ea:	2300      	movs	r3, #0
 80044ec:	1c1c      	adds	r4, r3, #0
 80044ee:	b2e3      	uxtb	r3, r4
 80044f0:	e01b      	b.n	800452a <CDC_Receive_FS+0x322>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2280      	movs	r2, #128	; 0x80
 80044f6:	0612      	lsls	r2, r2, #24
 80044f8:	405a      	eors	r2, r3
 80044fa:	0014      	movs	r4, r2
 80044fc:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <CDC_Receive_FS+0x3ac>)
 80044fe:	2200      	movs	r2, #0
 8004500:	5e9b      	ldrsh	r3, [r3, r2]
 8004502:	0018      	movs	r0, r3
 8004504:	f7fc fe66 	bl	80011d4 <__aeabi_i2f>
 8004508:	1c03      	adds	r3, r0, #0
 800450a:	1c19      	adds	r1, r3, #0
 800450c:	1c20      	adds	r0, r4, #0
 800450e:	f7fc fca1 	bl	8000e54 <__aeabi_fsub>
 8004512:	1c03      	adds	r3, r0, #0
 8004514:	2201      	movs	r2, #1
 8004516:	1c14      	adds	r4, r2, #0
 8004518:	4927      	ldr	r1, [pc, #156]	; (80045b8 <CDC_Receive_FS+0x3b0>)
 800451a:	1c18      	adds	r0, r3, #0
 800451c:	f7fb ffce 	bl	80004bc <__aeabi_fcmpgt>
 8004520:	1e03      	subs	r3, r0, #0
 8004522:	d101      	bne.n	8004528 <CDC_Receive_FS+0x320>
 8004524:	2300      	movs	r3, #0
 8004526:	1c1c      	adds	r4, r3, #0
 8004528:	b2e3      	uxtb	r3, r4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <CDC_Receive_FS+0x32c>
		  safe_counter = 0;
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <CDC_Receive_FS+0x390>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
	  goal_force = newforce;
 8004534:	68b8      	ldr	r0, [r7, #8]
 8004536:	f7fc fe2d 	bl	8001194 <__aeabi_f2iz>
 800453a:	0003      	movs	r3, r0
 800453c:	b21a      	sxth	r2, r3
 800453e:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <CDC_Receive_FS+0x3ac>)
 8004540:	801a      	strh	r2, [r3, #0]
	  motor_mode = FORCE;
 8004542:	4b16      	ldr	r3, [pc, #88]	; (800459c <CDC_Receive_FS+0x394>)
 8004544:	2202      	movs	r2, #2
 8004546:	701a      	strb	r2, [r3, #0]
	  if(Buf[3]==0x01)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3303      	adds	r3, #3
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d136      	bne.n	80045c0 <CDC_Receive_FS+0x3b8>
	  {
		  motor_task = NORMAL;
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <CDC_Receive_FS+0x384>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
	  	  k_coff = ((Buf[4]<<8) + Buf[5])/10000.0;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	3205      	adds	r2, #5
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	189b      	adds	r3, r3, r2
 8004568:	0018      	movs	r0, r3
 800456a:	f7fd fd89 	bl	8002080 <__aeabi_i2d>
 800456e:	2200      	movs	r2, #0
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <CDC_Receive_FS+0x39c>)
 8004572:	f7fc fec9 	bl	8001308 <__aeabi_ddiv>
 8004576:	0002      	movs	r2, r0
 8004578:	000b      	movs	r3, r1
 800457a:	0010      	movs	r0, r2
 800457c:	0019      	movs	r1, r3
 800457e:	f7fd fdf7 	bl	8002170 <__aeabi_d2f>
 8004582:	1c02      	adds	r2, r0, #0
 8004584:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <CDC_Receive_FS+0x3b4>)
 8004586:	601a      	str	r2, [r3, #0]
  {
 8004588:	e06d      	b.n	8004666 <CDC_Receive_FS+0x45e>
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	20000254 	.word	0x20000254
 8004590:	20000270 	.word	0x20000270
 8004594:	42c80000 	.word	0x42c80000
 8004598:	20000255 	.word	0x20000255
 800459c:	20000038 	.word	0x20000038
 80045a0:	20000274 	.word	0x20000274
 80045a4:	40c38800 	.word	0x40c38800
 80045a8:	20000034 	.word	0x20000034
 80045ac:	20000278 	.word	0x20000278
 80045b0:	20000030 	.word	0x20000030
 80045b4:	2000026c 	.word	0x2000026c
 80045b8:	42480000 	.word	0x42480000
 80045bc:	2000000c 	.word	0x2000000c
	  }
	  else
		  motor_task = SETFORCE;
 80045c0:	4b30      	ldr	r3, [pc, #192]	; (8004684 <CDC_Receive_FS+0x47c>)
 80045c2:	2206      	movs	r2, #6
 80045c4:	701a      	strb	r2, [r3, #0]
  {
 80045c6:	e04e      	b.n	8004666 <CDC_Receive_FS+0x45e>
  }
  else if(Buf[0]==0x07 && *Len==6)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b07      	cmp	r3, #7
 80045ce:	d13d      	bne.n	800464c <CDC_Receive_FS+0x444>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b06      	cmp	r3, #6
 80045d6:	d139      	bne.n	800464c <CDC_Receive_FS+0x444>
  {
	  Kp=((Buf[1]<<8)+Buf[2])/100.0;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3301      	adds	r3, #1
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	3202      	adds	r2, #2
 80045e4:	7812      	ldrb	r2, [r2, #0]
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7fd fd49 	bl	8002080 <__aeabi_i2d>
 80045ee:	2200      	movs	r2, #0
 80045f0:	4b25      	ldr	r3, [pc, #148]	; (8004688 <CDC_Receive_FS+0x480>)
 80045f2:	f7fc fe89 	bl	8001308 <__aeabi_ddiv>
 80045f6:	0002      	movs	r2, r0
 80045f8:	000b      	movs	r3, r1
 80045fa:	0010      	movs	r0, r2
 80045fc:	0019      	movs	r1, r3
 80045fe:	f7fd fdb7 	bl	8002170 <__aeabi_d2f>
 8004602:	1c02      	adds	r2, r0, #0
 8004604:	4b21      	ldr	r3, [pc, #132]	; (800468c <CDC_Receive_FS+0x484>)
 8004606:	601a      	str	r2, [r3, #0]
	  Ki=((Buf[3]<<8)+Buf[4])/10000.0;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3303      	adds	r3, #3
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	3204      	adds	r2, #4
 8004614:	7812      	ldrb	r2, [r2, #0]
 8004616:	189b      	adds	r3, r3, r2
 8004618:	0018      	movs	r0, r3
 800461a:	f7fd fd31 	bl	8002080 <__aeabi_i2d>
 800461e:	2200      	movs	r2, #0
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <CDC_Receive_FS+0x488>)
 8004622:	f7fc fe71 	bl	8001308 <__aeabi_ddiv>
 8004626:	0002      	movs	r2, r0
 8004628:	000b      	movs	r3, r1
 800462a:	0010      	movs	r0, r2
 800462c:	0019      	movs	r1, r3
 800462e:	f7fd fd9f 	bl	8002170 <__aeabi_d2f>
 8004632:	1c02      	adds	r2, r0, #0
 8004634:	4b17      	ldr	r3, [pc, #92]	; (8004694 <CDC_Receive_FS+0x48c>)
 8004636:	601a      	str	r2, [r3, #0]
	  max_int = Buf[5];
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3305      	adds	r3, #5
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	0018      	movs	r0, r3
 8004640:	f7fc fe1a 	bl	8001278 <__aeabi_ui2f>
 8004644:	1c02      	adds	r2, r0, #0
 8004646:	4b14      	ldr	r3, [pc, #80]	; (8004698 <CDC_Receive_FS+0x490>)
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e00c      	b.n	8004666 <CDC_Receive_FS+0x45e>
  }
  else if(Buf[0]==0x08)//approching
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d108      	bne.n	8004666 <CDC_Receive_FS+0x45e>
  {
	  safe_counter = 0;
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <CDC_Receive_FS+0x494>)
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
	  motor_task = CONTACT;
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <CDC_Receive_FS+0x47c>)
 800465c:	2203      	movs	r2, #3
 800465e:	701a      	strb	r2, [r3, #0]
	  motor_mode = SPEED;
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <CDC_Receive_FS+0x498>)
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <CDC_Receive_FS+0x49c>)
 800466a:	0011      	movs	r1, r2
 800466c:	0018      	movs	r0, r3
 800466e:	f7ff fd18 	bl	80040a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <CDC_Receive_FS+0x49c>)
 8004674:	0018      	movs	r0, r3
 8004676:	f7ff fd5f 	bl	8004138 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800467a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800467c:	0018      	movs	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	b007      	add	sp, #28
 8004682:	bd90      	pop	{r4, r7, pc}
 8004684:	20000254 	.word	0x20000254
 8004688:	40590000 	.word	0x40590000
 800468c:	20000000 	.word	0x20000000
 8004690:	40c38800 	.word	0x40c38800
 8004694:	20000004 	.word	0x20000004
 8004698:	20000008 	.word	0x20000008
 800469c:	20000255 	.word	0x20000255
 80046a0:	20000038 	.word	0x20000038
 80046a4:	200003b8 	.word	0x200003b8

080046a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80046a8:	b5b0      	push	{r4, r5, r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	000a      	movs	r2, r1
 80046b2:	1cbb      	adds	r3, r7, #2
 80046b4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80046b6:	230f      	movs	r3, #15
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80046be:	4a11      	ldr	r2, [pc, #68]	; (8004704 <CDC_Transmit_FS+0x5c>)
 80046c0:	23ae      	movs	r3, #174	; 0xae
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	58d3      	ldr	r3, [r2, r3]
 80046c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	2385      	movs	r3, #133	; 0x85
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	58d3      	ldr	r3, [r2, r3]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e010      	b.n	80046fa <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80046d8:	1cbb      	adds	r3, r7, #2
 80046da:	881a      	ldrh	r2, [r3, #0]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <CDC_Transmit_FS+0x5c>)
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7ff fcc2 	bl	800406a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80046e6:	250f      	movs	r5, #15
 80046e8:	197c      	adds	r4, r7, r5
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <CDC_Transmit_FS+0x5c>)
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff fcec 	bl	80040ca <USBD_CDC_TransmitPacket>
 80046f2:	0003      	movs	r3, r0
 80046f4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 80046f6:	197b      	adds	r3, r7, r5
 80046f8:	781b      	ldrb	r3, [r3, #0]
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b004      	add	sp, #16
 8004700:	bdb0      	pop	{r4, r5, r7, pc}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	200003b8 	.word	0x200003b8

08004708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0e      	ldr	r2, [pc, #56]	; (8004750 <HAL_PCD_MspInit+0x48>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d115      	bne.n	8004746 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_PCD_MspInit+0x4c>)
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <HAL_PCD_MspInit+0x4c>)
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	0409      	lsls	r1, r1, #16
 8004724:	430a      	orrs	r2, r1
 8004726:	61da      	str	r2, [r3, #28]
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_PCD_MspInit+0x4c>)
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004736:	2200      	movs	r2, #0
 8004738:	2100      	movs	r1, #0
 800473a:	201f      	movs	r0, #31
 800473c:	f003 fc9e 	bl	800807c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004740:	201f      	movs	r0, #31
 8004742:	f003 fcb0 	bl	80080a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	46bd      	mov	sp, r7
 800474a:	b004      	add	sp, #16
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	40005c00 	.word	0x40005c00
 8004754:	40021000 	.word	0x40021000

08004758 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	23bc      	movs	r3, #188	; 0xbc
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	58d2      	ldr	r2, [r2, r3]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	21ac      	movs	r1, #172	; 0xac
 800476c:	0089      	lsls	r1, r1, #2
 800476e:	468c      	mov	ip, r1
 8004770:	4463      	add	r3, ip
 8004772:	0019      	movs	r1, r3
 8004774:	0010      	movs	r0, r2
 8004776:	f000 fbb5 	bl	8004ee4 <USBD_LL_SetupStage>
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004782:	b590      	push	{r4, r7, lr}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	000a      	movs	r2, r1
 800478c:	1cfb      	adds	r3, r7, #3
 800478e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	23bc      	movs	r3, #188	; 0xbc
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	58d4      	ldr	r4, [r2, r3]
 8004798:	1cfb      	adds	r3, r7, #3
 800479a:	781a      	ldrb	r2, [r3, #0]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	23be      	movs	r3, #190	; 0xbe
 80047a0:	0059      	lsls	r1, r3, #1
 80047a2:	0013      	movs	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	18c3      	adds	r3, r0, r3
 80047ac:	185b      	adds	r3, r3, r1
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	1cfb      	adds	r3, r7, #3
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	0019      	movs	r1, r3
 80047b6:	0020      	movs	r0, r4
 80047b8:	f000 fbf2 	bl	8004fa0 <USBD_LL_DataOutStage>
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b003      	add	sp, #12
 80047c2:	bd90      	pop	{r4, r7, pc}

080047c4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	000a      	movs	r2, r1
 80047ce:	1cfb      	adds	r3, r7, #3
 80047d0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	23bc      	movs	r3, #188	; 0xbc
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	58d0      	ldr	r0, [r2, r3]
 80047da:	1cfb      	adds	r3, r7, #3
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	0013      	movs	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	18cb      	adds	r3, r1, r3
 80047ea:	333c      	adds	r3, #60	; 0x3c
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	1cfb      	adds	r3, r7, #3
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	0019      	movs	r1, r3
 80047f4:	f000 fc56 	bl	80050a4 <USBD_LL_DataInStage>
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	23bc      	movs	r3, #188	; 0xbc
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	58d3      	ldr	r3, [r2, r3]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 fd8d 	bl	8005330 <USBD_LL_SOF>
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	46bd      	mov	sp, r7
 800481a:	b002      	add	sp, #8
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004826:	230f      	movs	r3, #15
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d001      	beq.n	800483a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8004836:	f7fe ff69 	bl	800370c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	23bc      	movs	r3, #188	; 0xbc
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	58d2      	ldr	r2, [r2, r3]
 8004842:	230f      	movs	r3, #15
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	0019      	movs	r1, r3
 800484a:	0010      	movs	r0, r2
 800484c:	f000 fd2f 	bl	80052ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	23bc      	movs	r3, #188	; 0xbc
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	58d3      	ldr	r3, [r2, r3]
 8004858:	0018      	movs	r0, r3
 800485a:	f000 fce0 	bl	800521e <USBD_LL_Reset>
}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	b004      	add	sp, #16
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	23bc      	movs	r3, #188	; 0xbc
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	58d3      	ldr	r3, [r2, r3]
 8004878:	0018      	movs	r0, r3
 800487a:	f000 fd29 	bl	80052d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_PCD_SuspendCallback+0x34>)
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	4b04      	ldr	r3, [pc, #16]	; (800489c <HAL_PCD_SuspendCallback+0x34>)
 800488c:	2106      	movs	r1, #6
 800488e:	430a      	orrs	r2, r1
 8004890:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b002      	add	sp, #8
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_PCD_ResumeCallback+0x38>)
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	4b08      	ldr	r3, [pc, #32]	; (80048d8 <HAL_PCD_ResumeCallback+0x38>)
 80048b6:	2106      	movs	r1, #6
 80048b8:	438a      	bics	r2, r1
 80048ba:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80048bc:	f000 fa2f 	bl	8004d1e <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	23bc      	movs	r3, #188	; 0xbc
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	58d3      	ldr	r3, [r2, r3]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f000 fd19 	bl	8005300 <USBD_LL_Resume>
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b002      	add	sp, #8
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80048e4:	4a2d      	ldr	r2, [pc, #180]	; (800499c <USBD_LL_Init+0xc0>)
 80048e6:	23bc      	movs	r3, #188	; 0xbc
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	23b0      	movs	r3, #176	; 0xb0
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4929      	ldr	r1, [pc, #164]	; (800499c <USBD_LL_Init+0xc0>)
 80048f6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80048f8:	4b28      	ldr	r3, [pc, #160]	; (800499c <USBD_LL_Init+0xc0>)
 80048fa:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <USBD_LL_Init+0xc4>)
 80048fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80048fe:	4b27      	ldr	r3, [pc, #156]	; (800499c <USBD_LL_Init+0xc0>)
 8004900:	2208      	movs	r2, #8
 8004902:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004904:	4b25      	ldr	r3, [pc, #148]	; (800499c <USBD_LL_Init+0xc0>)
 8004906:	2202      	movs	r2, #2
 8004908:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <USBD_LL_Init+0xc0>)
 800490c:	2202      	movs	r2, #2
 800490e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004910:	4b22      	ldr	r3, [pc, #136]	; (800499c <USBD_LL_Init+0xc0>)
 8004912:	2200      	movs	r2, #0
 8004914:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004916:	4b21      	ldr	r3, [pc, #132]	; (800499c <USBD_LL_Init+0xc0>)
 8004918:	2200      	movs	r2, #0
 800491a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800491c:	4b1f      	ldr	r3, [pc, #124]	; (800499c <USBD_LL_Init+0xc0>)
 800491e:	2200      	movs	r2, #0
 8004920:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <USBD_LL_Init+0xc0>)
 8004924:	0018      	movs	r0, r3
 8004926:	f003 fd8d 	bl	8008444 <HAL_PCD_Init>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800492e:	f7fe feed 	bl	800370c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	23b0      	movs	r3, #176	; 0xb0
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	58d0      	ldr	r0, [r2, r3]
 800493a:	2318      	movs	r3, #24
 800493c:	2200      	movs	r2, #0
 800493e:	2100      	movs	r1, #0
 8004940:	f005 fb4e 	bl	8009fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	23b0      	movs	r3, #176	; 0xb0
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	58d0      	ldr	r0, [r2, r3]
 800494c:	2358      	movs	r3, #88	; 0x58
 800494e:	2200      	movs	r2, #0
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	f005 fb45 	bl	8009fe0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	23b0      	movs	r3, #176	; 0xb0
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	58d0      	ldr	r0, [r2, r3]
 800495e:	23c0      	movs	r3, #192	; 0xc0
 8004960:	2200      	movs	r2, #0
 8004962:	2181      	movs	r1, #129	; 0x81
 8004964:	f005 fb3c 	bl	8009fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	23b0      	movs	r3, #176	; 0xb0
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	58d0      	ldr	r0, [r2, r3]
 8004970:	2388      	movs	r3, #136	; 0x88
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	2200      	movs	r2, #0
 8004976:	2101      	movs	r1, #1
 8004978:	f005 fb32 	bl	8009fe0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	23b0      	movs	r3, #176	; 0xb0
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	58d0      	ldr	r0, [r2, r3]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	2200      	movs	r2, #0
 800498a:	2182      	movs	r1, #130	; 0x82
 800498c:	f005 fb28 	bl	8009fe0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	20001098 	.word	0x20001098
 80049a0:	40005c00 	.word	0x40005c00

080049a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80049a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80049ac:	210f      	movs	r1, #15
 80049ae:	187b      	adds	r3, r7, r1
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80049b4:	260e      	movs	r6, #14
 80049b6:	19bb      	adds	r3, r7, r6
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	23b0      	movs	r3, #176	; 0xb0
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	58d3      	ldr	r3, [r2, r3]
 80049c4:	000d      	movs	r5, r1
 80049c6:	187c      	adds	r4, r7, r1
 80049c8:	0018      	movs	r0, r3
 80049ca:	f003 fe3b 	bl	8008644 <HAL_PCD_Start>
 80049ce:	0003      	movs	r3, r0
 80049d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80049d2:	19bc      	adds	r4, r7, r6
 80049d4:	197b      	adds	r3, r7, r5
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 f9a7 	bl	8004d2c <USBD_Get_USB_Status>
 80049de:	0003      	movs	r3, r0
 80049e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80049e2:	19bb      	adds	r3, r7, r6
 80049e4:	781b      	ldrb	r3, [r3, #0]
}
 80049e6:	0018      	movs	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b005      	add	sp, #20
 80049ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80049ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	000c      	movs	r4, r1
 80049f8:	0010      	movs	r0, r2
 80049fa:	0019      	movs	r1, r3
 80049fc:	1cfb      	adds	r3, r7, #3
 80049fe:	1c22      	adds	r2, r4, #0
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	1cbb      	adds	r3, r7, #2
 8004a04:	1c02      	adds	r2, r0, #0
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	003b      	movs	r3, r7
 8004a0a:	1c0a      	adds	r2, r1, #0
 8004a0c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a0e:	260f      	movs	r6, #15
 8004a10:	19bb      	adds	r3, r7, r6
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004a16:	250e      	movs	r5, #14
 8004a18:	197b      	adds	r3, r7, r5
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	23b0      	movs	r3, #176	; 0xb0
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	58d0      	ldr	r0, [r2, r3]
 8004a26:	19bc      	adds	r4, r7, r6
 8004a28:	1cbb      	adds	r3, r7, #2
 8004a2a:	781d      	ldrb	r5, [r3, #0]
 8004a2c:	003b      	movs	r3, r7
 8004a2e:	881a      	ldrh	r2, [r3, #0]
 8004a30:	1cfb      	adds	r3, r7, #3
 8004a32:	7819      	ldrb	r1, [r3, #0]
 8004a34:	002b      	movs	r3, r5
 8004a36:	f003 ff9a 	bl	800896e <HAL_PCD_EP_Open>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a3e:	250e      	movs	r5, #14
 8004a40:	197c      	adds	r4, r7, r5
 8004a42:	19bb      	adds	r3, r7, r6
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 f970 	bl	8004d2c <USBD_Get_USB_Status>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8004a50:	197b      	adds	r3, r7, r5
 8004a52:	781b      	ldrb	r3, [r3, #0]
}
 8004a54:	0018      	movs	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b005      	add	sp, #20
 8004a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a5c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	000a      	movs	r2, r1
 8004a66:	1cfb      	adds	r3, r7, #3
 8004a68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004a6a:	210f      	movs	r1, #15
 8004a6c:	187b      	adds	r3, r7, r1
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004a72:	260e      	movs	r6, #14
 8004a74:	19bb      	adds	r3, r7, r6
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	23b0      	movs	r3, #176	; 0xb0
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	58d2      	ldr	r2, [r2, r3]
 8004a82:	000d      	movs	r5, r1
 8004a84:	187c      	adds	r4, r7, r1
 8004a86:	1cfb      	adds	r3, r7, #3
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	0010      	movs	r0, r2
 8004a8e:	f003 ffdd 	bl	8008a4c <HAL_PCD_EP_Close>
 8004a92:	0003      	movs	r3, r0
 8004a94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004a96:	19bc      	adds	r4, r7, r6
 8004a98:	197b      	adds	r3, r7, r5
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f000 f945 	bl	8004d2c <USBD_Get_USB_Status>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8004aa6:	19bb      	adds	r3, r7, r6
 8004aa8:	781b      	ldrb	r3, [r3, #0]
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b005      	add	sp, #20
 8004ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ab2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	000a      	movs	r2, r1
 8004abc:	1cfb      	adds	r3, r7, #3
 8004abe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ac0:	210f      	movs	r1, #15
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004ac8:	260e      	movs	r6, #14
 8004aca:	19bb      	adds	r3, r7, r6
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	23b0      	movs	r3, #176	; 0xb0
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	58d2      	ldr	r2, [r2, r3]
 8004ad8:	000d      	movs	r5, r1
 8004ada:	187c      	adds	r4, r7, r1
 8004adc:	1cfb      	adds	r3, r7, #3
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	0010      	movs	r0, r2
 8004ae4:	f004 f88f 	bl	8008c06 <HAL_PCD_EP_SetStall>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004aec:	19bc      	adds	r4, r7, r6
 8004aee:	197b      	adds	r3, r7, r5
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	0018      	movs	r0, r3
 8004af4:	f000 f91a 	bl	8004d2c <USBD_Get_USB_Status>
 8004af8:	0003      	movs	r3, r0
 8004afa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8004afc:	19bb      	adds	r3, r7, r6
 8004afe:	781b      	ldrb	r3, [r3, #0]
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b005      	add	sp, #20
 8004b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b08 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	000a      	movs	r2, r1
 8004b12:	1cfb      	adds	r3, r7, #3
 8004b14:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004b16:	210f      	movs	r1, #15
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004b1e:	260e      	movs	r6, #14
 8004b20:	19bb      	adds	r3, r7, r6
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	23b0      	movs	r3, #176	; 0xb0
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	58d2      	ldr	r2, [r2, r3]
 8004b2e:	000d      	movs	r5, r1
 8004b30:	187c      	adds	r4, r7, r1
 8004b32:	1cfb      	adds	r3, r7, #3
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	0019      	movs	r1, r3
 8004b38:	0010      	movs	r0, r2
 8004b3a:	f004 f8c0 	bl	8008cbe <HAL_PCD_EP_ClrStall>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004b42:	19bc      	adds	r4, r7, r6
 8004b44:	197b      	adds	r3, r7, r5
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 f8ef 	bl	8004d2c <USBD_Get_USB_Status>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8004b52:	19bb      	adds	r3, r7, r6
 8004b54:	781b      	ldrb	r3, [r3, #0]
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b005      	add	sp, #20
 8004b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b5e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	000a      	movs	r2, r1
 8004b68:	1cfb      	adds	r3, r7, #3
 8004b6a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	23b0      	movs	r3, #176	; 0xb0
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	58d3      	ldr	r3, [r2, r3]
 8004b74:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8004b76:	1cfb      	adds	r3, r7, #3
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da0d      	bge.n	8004b9c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004b80:	1cfb      	adds	r3, r7, #3
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	227f      	movs	r2, #127	; 0x7f
 8004b86:	4013      	ands	r3, r2
 8004b88:	68f9      	ldr	r1, [r7, #12]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	0013      	movs	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	189b      	adds	r3, r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	18cb      	adds	r3, r1, r3
 8004b96:	3302      	adds	r3, #2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	e00d      	b.n	8004bb8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004b9c:	1cfb      	adds	r3, r7, #3
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	227f      	movs	r2, #127	; 0x7f
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	23b5      	movs	r3, #181	; 0xb5
 8004ba8:	0059      	lsls	r1, r3, #1
 8004baa:	0013      	movs	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	189b      	adds	r3, r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	18c3      	adds	r3, r0, r3
 8004bb4:	185b      	adds	r3, r3, r1
 8004bb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004bb8:	0018      	movs	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b004      	add	sp, #16
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	000a      	movs	r2, r1
 8004bca:	1cfb      	adds	r3, r7, #3
 8004bcc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004bce:	210f      	movs	r1, #15
 8004bd0:	187b      	adds	r3, r7, r1
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004bd6:	260e      	movs	r6, #14
 8004bd8:	19bb      	adds	r3, r7, r6
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	23b0      	movs	r3, #176	; 0xb0
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	58d2      	ldr	r2, [r2, r3]
 8004be6:	000d      	movs	r5, r1
 8004be8:	187c      	adds	r4, r7, r1
 8004bea:	1cfb      	adds	r3, r7, #3
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	0019      	movs	r1, r3
 8004bf0:	0010      	movs	r0, r2
 8004bf2:	f003 fe91 	bl	8008918 <HAL_PCD_SetAddress>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004bfa:	19bc      	adds	r4, r7, r6
 8004bfc:	197b      	adds	r3, r7, r5
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f000 f893 	bl	8004d2c <USBD_Get_USB_Status>
 8004c06:	0003      	movs	r3, r0
 8004c08:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8004c0a:	19bb      	adds	r3, r7, r6
 8004c0c:	781b      	ldrb	r3, [r3, #0]
}
 8004c0e:	0018      	movs	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b005      	add	sp, #20
 8004c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c18:	b087      	sub	sp, #28
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	0008      	movs	r0, r1
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	0019      	movs	r1, r3
 8004c24:	230b      	movs	r3, #11
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	1c02      	adds	r2, r0, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	2408      	movs	r4, #8
 8004c2e:	193b      	adds	r3, r7, r4
 8004c30:	1c0a      	adds	r2, r1, #0
 8004c32:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c34:	2117      	movs	r1, #23
 8004c36:	187b      	adds	r3, r7, r1
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004c3c:	2516      	movs	r5, #22
 8004c3e:	197b      	adds	r3, r7, r5
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	23b0      	movs	r3, #176	; 0xb0
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	58d0      	ldr	r0, [r2, r3]
 8004c4c:	193b      	adds	r3, r7, r4
 8004c4e:	881d      	ldrh	r5, [r3, #0]
 8004c50:	000e      	movs	r6, r1
 8004c52:	187c      	adds	r4, r7, r1
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	230b      	movs	r3, #11
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	7819      	ldrb	r1, [r3, #0]
 8004c5c:	002b      	movs	r3, r5
 8004c5e:	f003 ff96 	bl	8008b8e <HAL_PCD_EP_Transmit>
 8004c62:	0003      	movs	r3, r0
 8004c64:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004c66:	2516      	movs	r5, #22
 8004c68:	197c      	adds	r4, r7, r5
 8004c6a:	19bb      	adds	r3, r7, r6
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 f85c 	bl	8004d2c <USBD_Get_USB_Status>
 8004c74:	0003      	movs	r3, r0
 8004c76:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8004c78:	197b      	adds	r3, r7, r5
 8004c7a:	781b      	ldrb	r3, [r3, #0]
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b007      	add	sp, #28
 8004c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	0008      	movs	r0, r1
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	0019      	movs	r1, r3
 8004c92:	230b      	movs	r3, #11
 8004c94:	18fb      	adds	r3, r7, r3
 8004c96:	1c02      	adds	r2, r0, #0
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	2408      	movs	r4, #8
 8004c9c:	193b      	adds	r3, r7, r4
 8004c9e:	1c0a      	adds	r2, r1, #0
 8004ca0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004ca2:	2117      	movs	r1, #23
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004caa:	2516      	movs	r5, #22
 8004cac:	197b      	adds	r3, r7, r5
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	23b0      	movs	r3, #176	; 0xb0
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	58d0      	ldr	r0, [r2, r3]
 8004cba:	193b      	adds	r3, r7, r4
 8004cbc:	881d      	ldrh	r5, [r3, #0]
 8004cbe:	000e      	movs	r6, r1
 8004cc0:	187c      	adds	r4, r7, r1
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	230b      	movs	r3, #11
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	7819      	ldrb	r1, [r3, #0]
 8004cca:	002b      	movs	r3, r5
 8004ccc:	f003 ff0f 	bl	8008aee <HAL_PCD_EP_Receive>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004cd4:	2516      	movs	r5, #22
 8004cd6:	197c      	adds	r4, r7, r5
 8004cd8:	19bb      	adds	r3, r7, r6
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f000 f825 	bl	8004d2c <USBD_Get_USB_Status>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8004ce6:	197b      	adds	r3, r7, r5
 8004ce8:	781b      	ldrb	r3, [r3, #0]
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b007      	add	sp, #28
 8004cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cf2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	000a      	movs	r2, r1
 8004cfc:	1cfb      	adds	r3, r7, #3
 8004cfe:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	23b0      	movs	r3, #176	; 0xb0
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	58d2      	ldr	r2, [r2, r3]
 8004d08:	1cfb      	adds	r3, r7, #3
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	0010      	movs	r0, r2
 8004d10:	f003 ff24 	bl	8008b5c <HAL_PCD_EP_GetRxCount>
 8004d14:	0003      	movs	r3, r0
}
 8004d16:	0018      	movs	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b002      	add	sp, #8
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8004d22:	f7fe fa0d 	bl	8003140 <SystemClock_Config>
}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	0002      	movs	r2, r0
 8004d34:	1dfb      	adds	r3, r7, #7
 8004d36:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8004d40:	1dfb      	adds	r3, r7, #7
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d017      	beq.n	8004d78 <USBD_Get_USB_Status+0x4c>
 8004d48:	dc1b      	bgt.n	8004d82 <USBD_Get_USB_Status+0x56>
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d00f      	beq.n	8004d6e <USBD_Get_USB_Status+0x42>
 8004d4e:	dc18      	bgt.n	8004d82 <USBD_Get_USB_Status+0x56>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <USBD_Get_USB_Status+0x2e>
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d005      	beq.n	8004d64 <USBD_Get_USB_Status+0x38>
 8004d58:	e013      	b.n	8004d82 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004d5a:	230f      	movs	r3, #15
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
    break;
 8004d62:	e013      	b.n	8004d8c <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004d64:	230f      	movs	r3, #15
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	2202      	movs	r2, #2
 8004d6a:	701a      	strb	r2, [r3, #0]
    break;
 8004d6c:	e00e      	b.n	8004d8c <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004d6e:	230f      	movs	r3, #15
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
    break;
 8004d76:	e009      	b.n	8004d8c <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004d78:	230f      	movs	r3, #15
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	701a      	strb	r2, [r3, #0]
    break;
 8004d80:	e004      	b.n	8004d8c <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8004d82:	230f      	movs	r3, #15
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	2202      	movs	r2, #2
 8004d88:	701a      	strb	r2, [r3, #0]
    break;
 8004d8a:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8004d8c:	230f      	movs	r3, #15
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	781b      	ldrb	r3, [r3, #0]
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b004      	add	sp, #16
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	1dfb      	adds	r3, r7, #7
 8004da6:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004dae:	2302      	movs	r3, #2
 8004db0:	e020      	b.n	8004df4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	23ad      	movs	r3, #173	; 0xad
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	58d3      	ldr	r3, [r2, r3]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	23ad      	movs	r3, #173	; 0xad
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	23ac      	movs	r3, #172	; 0xac
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	23a7      	movs	r3, #167	; 0xa7
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	2101      	movs	r1, #1
 8004de0:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1dfa      	adds	r2, r7, #7
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff fd75 	bl	80048dc <USBD_LL_Init>

  return USBD_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	0018      	movs	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b004      	add	sp, #16
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004e06:	200f      	movs	r0, #15
 8004e08:	183b      	adds	r3, r7, r0
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	23ad      	movs	r3, #173	; 0xad
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e003      	b.n	8004e2e <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004e26:	230f      	movs	r3, #15
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004e2e:	230f      	movs	r3, #15
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	781b      	ldrb	r3, [r3, #0]
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b004      	add	sp, #16
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	0018      	movs	r0, r3
 8004e48:	f7ff fdac 	bl	80049a4 <USBD_LL_Start>

  return USBD_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	0018      	movs	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b002      	add	sp, #8
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b082      	sub	sp, #8
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	0018      	movs	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b002      	add	sp, #8
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	000a      	movs	r2, r1
 8004e72:	1cfb      	adds	r3, r7, #3
 8004e74:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004e76:	240f      	movs	r4, #15
 8004e78:	193b      	adds	r3, r7, r4
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	23ad      	movs	r3, #173	; 0xad
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	58d3      	ldr	r3, [r2, r3]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00e      	beq.n	8004ea8 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	23ad      	movs	r3, #173	; 0xad
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	58d3      	ldr	r3, [r2, r3]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	1cfa      	adds	r2, r7, #3
 8004e96:	7811      	ldrb	r1, [r2, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	0010      	movs	r0, r2
 8004e9c:	4798      	blx	r3
 8004e9e:	1e03      	subs	r3, r0, #0
 8004ea0:	d102      	bne.n	8004ea8 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8004ea2:	193b      	adds	r3, r7, r4
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8004ea8:	230f      	movs	r3, #15
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	781b      	ldrb	r3, [r3, #0]
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b005      	add	sp, #20
 8004eb4:	bd90      	pop	{r4, r7, pc}

08004eb6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b082      	sub	sp, #8
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	000a      	movs	r2, r1
 8004ec0:	1cfb      	adds	r3, r7, #3
 8004ec2:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	23ad      	movs	r3, #173	; 0xad
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	58d3      	ldr	r3, [r2, r3]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	1cfa      	adds	r2, r7, #3
 8004ed0:	7811      	ldrb	r1, [r2, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	0010      	movs	r0, r2
 8004ed6:	4798      	blx	r3

  return USBD_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	22aa      	movs	r2, #170	; 0xaa
 8004ef2:	0092      	lsls	r2, r2, #2
 8004ef4:	4694      	mov	ip, r2
 8004ef6:	4463      	add	r3, ip
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	0011      	movs	r1, r2
 8004efc:	0018      	movs	r0, r3
 8004efe:	f001 f810 	bl	8005f22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	23a5      	movs	r3, #165	; 0xa5
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	2101      	movs	r1, #1
 8004f0a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a23      	ldr	r2, [pc, #140]	; (8004f9c <USBD_LL_SetupStage+0xb8>)
 8004f10:	5a9b      	ldrh	r3, [r3, r2]
 8004f12:	0019      	movs	r1, r3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	23a6      	movs	r3, #166	; 0xa6
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	23aa      	movs	r3, #170	; 0xaa
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	001a      	movs	r2, r3
 8004f26:	231f      	movs	r3, #31
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d019      	beq.n	8004f62 <USBD_LL_SetupStage+0x7e>
 8004f2e:	d822      	bhi.n	8004f76 <USBD_LL_SetupStage+0x92>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <USBD_LL_SetupStage+0x56>
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d00a      	beq.n	8004f4e <USBD_LL_SetupStage+0x6a>
 8004f38:	e01d      	b.n	8004f76 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	22aa      	movs	r2, #170	; 0xaa
 8004f3e:	0092      	lsls	r2, r2, #2
 8004f40:	189a      	adds	r2, r3, r2
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0011      	movs	r1, r2
 8004f46:	0018      	movs	r0, r3
 8004f48:	f000 fa10 	bl	800536c <USBD_StdDevReq>
      break;
 8004f4c:	e020      	b.n	8004f90 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	22aa      	movs	r2, #170	; 0xaa
 8004f52:	0092      	lsls	r2, r2, #2
 8004f54:	189a      	adds	r2, r3, r2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	0011      	movs	r1, r2
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 fa78 	bl	8005450 <USBD_StdItfReq>
      break;
 8004f60:	e016      	b.n	8004f90 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	22aa      	movs	r2, #170	; 0xaa
 8004f66:	0092      	lsls	r2, r2, #2
 8004f68:	189a      	adds	r2, r3, r2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	0011      	movs	r1, r2
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 fac5 	bl	80054fe <USBD_StdEPReq>
      break;
 8004f74:	e00c      	b.n	8004f90 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	23aa      	movs	r3, #170	; 0xaa
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	5cd3      	ldrb	r3, [r2, r3]
 8004f7e:	227f      	movs	r2, #127	; 0x7f
 8004f80:	4393      	bics	r3, r2
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	0011      	movs	r1, r2
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7ff fd92 	bl	8004ab2 <USBD_LL_StallEP>
      break;
 8004f8e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b002      	add	sp, #8
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	000002ae 	.word	0x000002ae

08004fa0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	200b      	movs	r0, #11
 8004fac:	183b      	adds	r3, r7, r0
 8004fae:	1c0a      	adds	r2, r1, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004fb2:	183b      	adds	r3, r7, r0
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d154      	bne.n	8005064 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3355      	adds	r3, #85	; 0x55
 8004fbe:	33ff      	adds	r3, #255	; 0xff
 8004fc0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	23a5      	movs	r3, #165	; 0xa5
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	58d3      	ldr	r3, [r2, r3]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d139      	bne.n	8005042 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d919      	bls.n	800500e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	1ad2      	subs	r2, r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d203      	bcs.n	8004ffc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	e002      	b.n	8005002 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005000:	b29b      	uxth	r3, r3
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	001a      	movs	r2, r3
 8005008:	f001 f9c8 	bl	800639c <USBD_CtlContinueRx>
 800500c:	e045      	b.n	800509a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	23ad      	movs	r3, #173	; 0xad
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	58d3      	ldr	r3, [r2, r3]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00d      	beq.n	8005038 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	23a7      	movs	r3, #167	; 0xa7
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005024:	2b03      	cmp	r3, #3
 8005026:	d107      	bne.n	8005038 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	23ad      	movs	r3, #173	; 0xad
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	58d3      	ldr	r3, [r2, r3]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	0010      	movs	r0, r2
 8005036:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	0018      	movs	r0, r3
 800503c:	f001 f9c1 	bl	80063c2 <USBD_CtlSendStatus>
 8005040:	e02b      	b.n	800509a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	23a5      	movs	r3, #165	; 0xa5
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	58d3      	ldr	r3, [r2, r3]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d125      	bne.n	800509a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	23a5      	movs	r3, #165	; 0xa5
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	2100      	movs	r1, #0
 8005056:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2100      	movs	r1, #0
 800505c:	0018      	movs	r0, r3
 800505e:	f7ff fd28 	bl	8004ab2 <USBD_LL_StallEP>
 8005062:	e01a      	b.n	800509a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	23ad      	movs	r3, #173	; 0xad
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	58d3      	ldr	r3, [r2, r3]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d011      	beq.n	8005096 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	23a7      	movs	r3, #167	; 0xa7
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800507a:	2b03      	cmp	r3, #3
 800507c:	d10b      	bne.n	8005096 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	23ad      	movs	r3, #173	; 0xad
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	58d3      	ldr	r3, [r2, r3]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	220b      	movs	r2, #11
 800508a:	18ba      	adds	r2, r7, r2
 800508c:	7811      	ldrb	r1, [r2, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	0010      	movs	r0, r2
 8005092:	4798      	blx	r3
 8005094:	e001      	b.n	800509a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005096:	2302      	movs	r3, #2
 8005098:	e000      	b.n	800509c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	0018      	movs	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	b006      	add	sp, #24
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	200b      	movs	r0, #11
 80050b0:	183b      	adds	r3, r7, r0
 80050b2:	1c0a      	adds	r2, r1, #0
 80050b4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80050b6:	183b      	adds	r3, r7, r0
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d000      	beq.n	80050c0 <USBD_LL_DataInStage+0x1c>
 80050be:	e08e      	b.n	80051de <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3314      	adds	r3, #20
 80050c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	23a5      	movs	r3, #165	; 0xa5
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	58d3      	ldr	r3, [r2, r3]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d164      	bne.n	800519c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d915      	bls.n	800510a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	1ad2      	subs	r2, r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	0018      	movs	r0, r3
 80050f8:	f001 f919 	bl	800632e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	2300      	movs	r3, #0
 8005100:	2200      	movs	r2, #0
 8005102:	2100      	movs	r1, #0
 8005104:	f7ff fdbe 	bl	8004c84 <USBD_LL_PrepareReceive>
 8005108:	e059      	b.n	80051be <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	0019      	movs	r1, r3
 8005114:	0010      	movs	r0, r2
 8005116:	f7fb f87d 	bl	8000214 <__aeabi_uidivmod>
 800511a:	1e0b      	subs	r3, r1, #0
 800511c:	d11f      	bne.n	800515e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005126:	429a      	cmp	r2, r3
 8005128:	d319      	bcc.n	800515e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	23a6      	movs	r3, #166	; 0xa6
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8005136:	429a      	cmp	r2, r3
 8005138:	d211      	bcs.n	800515e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	2100      	movs	r1, #0
 8005140:	0018      	movs	r0, r3
 8005142:	f001 f8f4 	bl	800632e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	23a6      	movs	r3, #166	; 0xa6
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	2100      	movs	r1, #0
 800514e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	2300      	movs	r3, #0
 8005154:	2200      	movs	r2, #0
 8005156:	2100      	movs	r1, #0
 8005158:	f7ff fd94 	bl	8004c84 <USBD_LL_PrepareReceive>
 800515c:	e02f      	b.n	80051be <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	23ad      	movs	r3, #173	; 0xad
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	58d3      	ldr	r3, [r2, r3]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00d      	beq.n	8005188 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	23a7      	movs	r3, #167	; 0xa7
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005174:	2b03      	cmp	r3, #3
 8005176:	d107      	bne.n	8005188 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	23ad      	movs	r3, #173	; 0xad
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	58d3      	ldr	r3, [r2, r3]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	0010      	movs	r0, r2
 8005186:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2180      	movs	r1, #128	; 0x80
 800518c:	0018      	movs	r0, r3
 800518e:	f7ff fc90 	bl	8004ab2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	0018      	movs	r0, r3
 8005196:	f001 f928 	bl	80063ea <USBD_CtlReceiveStatus>
 800519a:	e010      	b.n	80051be <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	23a5      	movs	r3, #165	; 0xa5
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	58d3      	ldr	r3, [r2, r3]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d005      	beq.n	80051b4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	23a5      	movs	r3, #165	; 0xa5
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	0018      	movs	r0, r3
 80051ba:	f7ff fc7a 	bl	8004ab2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	23a8      	movs	r3, #168	; 0xa8
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	5cd3      	ldrb	r3, [r2, r3]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d124      	bne.n	8005214 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	0018      	movs	r0, r3
 80051ce:	f7ff fe42 	bl	8004e56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	23a8      	movs	r3, #168	; 0xa8
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	2100      	movs	r1, #0
 80051da:	54d1      	strb	r1, [r2, r3]
 80051dc:	e01a      	b.n	8005214 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	23ad      	movs	r3, #173	; 0xad
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	58d3      	ldr	r3, [r2, r3]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d011      	beq.n	8005210 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	23a7      	movs	r3, #167	; 0xa7
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d10b      	bne.n	8005210 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	23ad      	movs	r3, #173	; 0xad
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	58d3      	ldr	r3, [r2, r3]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	220b      	movs	r2, #11
 8005204:	18ba      	adds	r2, r7, r2
 8005206:	7811      	ldrb	r1, [r2, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	0010      	movs	r0, r2
 800520c:	4798      	blx	r3
 800520e:	e001      	b.n	8005214 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005210:	2302      	movs	r3, #2
 8005212:	e000      	b.n	8005216 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b006      	add	sp, #24
 800521c:	bd80      	pop	{r7, pc}

0800521e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	2340      	movs	r3, #64	; 0x40
 800522a:	2200      	movs	r2, #0
 800522c:	2100      	movs	r1, #0
 800522e:	f7ff fbde 	bl	80049ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	23ac      	movs	r3, #172	; 0xac
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2101      	movs	r1, #1
 800523a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	23b2      	movs	r3, #178	; 0xb2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	2140      	movs	r1, #64	; 0x40
 8005244:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	2340      	movs	r3, #64	; 0x40
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	f7ff fbce 	bl	80049ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2240      	movs	r2, #64	; 0x40
 800525c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	23a7      	movs	r3, #167	; 0xa7
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	2101      	movs	r1, #1
 8005266:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	23a5      	movs	r3, #165	; 0xa5
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	2100      	movs	r1, #0
 8005270:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	23a9      	movs	r3, #169	; 0xa9
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	2100      	movs	r1, #0
 8005280:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	23ae      	movs	r3, #174	; 0xae
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	58d3      	ldr	r3, [r2, r3]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	23ad      	movs	r3, #173	; 0xad
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	58d3      	ldr	r3, [r2, r3]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	b2d9      	uxtb	r1, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0018      	movs	r0, r3
 80052a2:	4790      	blx	r2
  }

  return USBD_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	0018      	movs	r0, r3
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b002      	add	sp, #8
 80052ac:	bd80      	pop	{r7, pc}

080052ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	000a      	movs	r2, r1
 80052b8:	1cfb      	adds	r3, r7, #3
 80052ba:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	1cfa      	adds	r2, r7, #3
 80052c0:	7812      	ldrb	r2, [r2, #0]
 80052c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	0018      	movs	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b002      	add	sp, #8
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	23a7      	movs	r3, #167	; 0xa7
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	5cd1      	ldrb	r1, [r2, r3]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a06      	ldr	r2, [pc, #24]	; (80052fc <USBD_LL_Suspend+0x2c>)
 80052e4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	23a7      	movs	r3, #167	; 0xa7
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	2104      	movs	r1, #4
 80052ee:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	0018      	movs	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b002      	add	sp, #8
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	0000029d 	.word	0x0000029d

08005300 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	23a7      	movs	r3, #167	; 0xa7
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	5cd3      	ldrb	r3, [r2, r3]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d106      	bne.n	8005322 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a05      	ldr	r2, [pc, #20]	; (800532c <USBD_LL_Resume+0x2c>)
 8005318:	5c99      	ldrb	r1, [r3, r2]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	23a7      	movs	r3, #167	; 0xa7
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	0018      	movs	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}
 800532c:	0000029d 	.word	0x0000029d

08005330 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	23a7      	movs	r3, #167	; 0xa7
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d10e      	bne.n	8005362 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	23ad      	movs	r3, #173	; 0xad
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	58d3      	ldr	r3, [r2, r3]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	23ad      	movs	r3, #173	; 0xad
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	58d3      	ldr	r3, [r2, r3]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	0010      	movs	r0, r2
 8005360:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005376:	230f      	movs	r3, #15
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	001a      	movs	r2, r3
 8005384:	2360      	movs	r3, #96	; 0x60
 8005386:	4013      	ands	r3, r2
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d004      	beq.n	8005396 <USBD_StdDevReq+0x2a>
 800538c:	d84f      	bhi.n	800542e <USBD_StdDevReq+0xc2>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <USBD_StdDevReq+0x3e>
 8005392:	2b20      	cmp	r3, #32
 8005394:	d14b      	bne.n	800542e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	23ad      	movs	r3, #173	; 0xad
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	58d3      	ldr	r3, [r2, r3]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	0010      	movs	r0, r2
 80053a6:	4798      	blx	r3
      break;
 80053a8:	e048      	b.n	800543c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	2b09      	cmp	r3, #9
 80053b0:	d835      	bhi.n	800541e <USBD_StdDevReq+0xb2>
 80053b2:	009a      	lsls	r2, r3, #2
 80053b4:	4b25      	ldr	r3, [pc, #148]	; (800544c <USBD_StdDevReq+0xe0>)
 80053b6:	18d3      	adds	r3, r2, r3
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	0011      	movs	r1, r2
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 fa52 	bl	800586c <USBD_GetDescriptor>
          break;
 80053c8:	e030      	b.n	800542c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	0011      	movs	r1, r2
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 fbfd 	bl	8005bd0 <USBD_SetAddress>
          break;
 80053d6:	e029      	b.n	800542c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	0011      	movs	r1, r2
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 fc4a 	bl	8005c78 <USBD_SetConfig>
          break;
 80053e4:	e022      	b.n	800542c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	0011      	movs	r1, r2
 80053ec:	0018      	movs	r0, r3
 80053ee:	f000 fce7 	bl	8005dc0 <USBD_GetConfig>
          break;
 80053f2:	e01b      	b.n	800542c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	0011      	movs	r1, r2
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 fd1b 	bl	8005e36 <USBD_GetStatus>
          break;
 8005400:	e014      	b.n	800542c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	0011      	movs	r1, r2
 8005408:	0018      	movs	r0, r3
 800540a:	f000 fd4e 	bl	8005eaa <USBD_SetFeature>
          break;
 800540e:	e00d      	b.n	800542c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0011      	movs	r1, r2
 8005416:	0018      	movs	r0, r3
 8005418:	f000 fd5d 	bl	8005ed6 <USBD_ClrFeature>
          break;
 800541c:	e006      	b.n	800542c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0011      	movs	r1, r2
 8005424:	0018      	movs	r0, r3
 8005426:	f000 fdb7 	bl	8005f98 <USBD_CtlError>
          break;
 800542a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800542c:	e006      	b.n	800543c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	0011      	movs	r1, r2
 8005434:	0018      	movs	r0, r3
 8005436:	f000 fdaf 	bl	8005f98 <USBD_CtlError>
      break;
 800543a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800543c:	230f      	movs	r3, #15
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	781b      	ldrb	r3, [r3, #0]
}
 8005442:	0018      	movs	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	b004      	add	sp, #16
 8005448:	bd80      	pop	{r7, pc}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	0800e088 	.word	0x0800e088

08005450 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005450:	b5b0      	push	{r4, r5, r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800545a:	230f      	movs	r3, #15
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	001a      	movs	r2, r3
 8005468:	2360      	movs	r3, #96	; 0x60
 800546a:	4013      	ands	r3, r2
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d004      	beq.n	800547a <USBD_StdItfReq+0x2a>
 8005470:	d839      	bhi.n	80054e6 <USBD_StdItfReq+0x96>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <USBD_StdItfReq+0x2a>
 8005476:	2b20      	cmp	r3, #32
 8005478:	d135      	bne.n	80054e6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	23a7      	movs	r3, #167	; 0xa7
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	5cd3      	ldrb	r3, [r2, r3]
 8005482:	3b01      	subs	r3, #1
 8005484:	2b02      	cmp	r3, #2
 8005486:	d825      	bhi.n	80054d4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	889b      	ldrh	r3, [r3, #4]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d819      	bhi.n	80054c6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	23ad      	movs	r3, #173	; 0xad
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	58d3      	ldr	r3, [r2, r3]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	250f      	movs	r5, #15
 800549e:	197c      	adds	r4, r7, r5
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	0010      	movs	r0, r2
 80054a6:	4798      	blx	r3
 80054a8:	0003      	movs	r3, r0
 80054aa:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	88db      	ldrh	r3, [r3, #6]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d116      	bne.n	80054e2 <USBD_StdItfReq+0x92>
 80054b4:	197b      	adds	r3, r7, r5
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d112      	bne.n	80054e2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	0018      	movs	r0, r3
 80054c0:	f000 ff7f 	bl	80063c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80054c4:	e00d      	b.n	80054e2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	0011      	movs	r1, r2
 80054cc:	0018      	movs	r0, r3
 80054ce:	f000 fd63 	bl	8005f98 <USBD_CtlError>
          break;
 80054d2:	e006      	b.n	80054e2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0011      	movs	r1, r2
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 fd5c 	bl	8005f98 <USBD_CtlError>
          break;
 80054e0:	e000      	b.n	80054e4 <USBD_StdItfReq+0x94>
          break;
 80054e2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80054e4:	e006      	b.n	80054f4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 fd53 	bl	8005f98 <USBD_CtlError>
      break;
 80054f2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	0018      	movs	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b004      	add	sp, #16
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}

080054fe <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80054fe:	b5b0      	push	{r4, r5, r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005508:	230f      	movs	r3, #15
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	889a      	ldrh	r2, [r3, #4]
 8005514:	230e      	movs	r3, #14
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	001a      	movs	r2, r3
 8005520:	2360      	movs	r3, #96	; 0x60
 8005522:	4013      	ands	r3, r2
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d006      	beq.n	8005536 <USBD_StdEPReq+0x38>
 8005528:	d900      	bls.n	800552c <USBD_StdEPReq+0x2e>
 800552a:	e190      	b.n	800584e <USBD_StdEPReq+0x350>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00c      	beq.n	800554a <USBD_StdEPReq+0x4c>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d000      	beq.n	8005536 <USBD_StdEPReq+0x38>
 8005534:	e18b      	b.n	800584e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	23ad      	movs	r3, #173	; 0xad
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	58d3      	ldr	r3, [r2, r3]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	0010      	movs	r0, r2
 8005546:	4798      	blx	r3
      break;
 8005548:	e188      	b.n	800585c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	001a      	movs	r2, r3
 8005550:	2360      	movs	r3, #96	; 0x60
 8005552:	4013      	ands	r3, r2
 8005554:	2b20      	cmp	r3, #32
 8005556:	d10f      	bne.n	8005578 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	23ad      	movs	r3, #173	; 0xad
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	58d3      	ldr	r3, [r2, r3]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	250f      	movs	r5, #15
 8005564:	197c      	adds	r4, r7, r5
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	0010      	movs	r0, r2
 800556c:	4798      	blx	r3
 800556e:	0003      	movs	r3, r0
 8005570:	7023      	strb	r3, [r4, #0]

        return ret;
 8005572:	197b      	adds	r3, r7, r5
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	e174      	b.n	8005862 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	2b03      	cmp	r3, #3
 800557e:	d007      	beq.n	8005590 <USBD_StdEPReq+0x92>
 8005580:	dd00      	ble.n	8005584 <USBD_StdEPReq+0x86>
 8005582:	e15c      	b.n	800583e <USBD_StdEPReq+0x340>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d100      	bne.n	800558a <USBD_StdEPReq+0x8c>
 8005588:	e092      	b.n	80056b0 <USBD_StdEPReq+0x1b2>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d04b      	beq.n	8005626 <USBD_StdEPReq+0x128>
 800558e:	e156      	b.n	800583e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	23a7      	movs	r3, #167	; 0xa7
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	5cd3      	ldrb	r3, [r2, r3]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d002      	beq.n	80055a2 <USBD_StdEPReq+0xa4>
 800559c:	2b03      	cmp	r3, #3
 800559e:	d01d      	beq.n	80055dc <USBD_StdEPReq+0xde>
 80055a0:	e039      	b.n	8005616 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055a2:	220e      	movs	r2, #14
 80055a4:	18bb      	adds	r3, r7, r2
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d010      	beq.n	80055ce <USBD_StdEPReq+0xd0>
 80055ac:	18bb      	adds	r3, r7, r2
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b80      	cmp	r3, #128	; 0x80
 80055b2:	d00c      	beq.n	80055ce <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80055b4:	18bb      	adds	r3, r7, r2
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	0011      	movs	r1, r2
 80055bc:	0018      	movs	r0, r3
 80055be:	f7ff fa78 	bl	8004ab2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	0018      	movs	r0, r3
 80055c8:	f7ff fa73 	bl	8004ab2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80055cc:	e02a      	b.n	8005624 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	0011      	movs	r1, r2
 80055d4:	0018      	movs	r0, r3
 80055d6:	f000 fcdf 	bl	8005f98 <USBD_CtlError>
              break;
 80055da:	e023      	b.n	8005624 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	885b      	ldrh	r3, [r3, #2]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d113      	bne.n	800560c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80055e4:	220e      	movs	r2, #14
 80055e6:	18bb      	adds	r3, r7, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00e      	beq.n	800560c <USBD_StdEPReq+0x10e>
 80055ee:	18bb      	adds	r3, r7, r2
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b80      	cmp	r3, #128	; 0x80
 80055f4:	d00a      	beq.n	800560c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	88db      	ldrh	r3, [r3, #6]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80055fe:	18bb      	adds	r3, r7, r2
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	0011      	movs	r1, r2
 8005606:	0018      	movs	r0, r3
 8005608:	f7ff fa53 	bl	8004ab2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	0018      	movs	r0, r3
 8005610:	f000 fed7 	bl	80063c2 <USBD_CtlSendStatus>

              break;
 8005614:	e006      	b.n	8005624 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0011      	movs	r1, r2
 800561c:	0018      	movs	r0, r3
 800561e:	f000 fcbb 	bl	8005f98 <USBD_CtlError>
              break;
 8005622:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8005624:	e112      	b.n	800584c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	23a7      	movs	r3, #167	; 0xa7
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	5cd3      	ldrb	r3, [r2, r3]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d002      	beq.n	8005638 <USBD_StdEPReq+0x13a>
 8005632:	2b03      	cmp	r3, #3
 8005634:	d01d      	beq.n	8005672 <USBD_StdEPReq+0x174>
 8005636:	e032      	b.n	800569e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005638:	220e      	movs	r2, #14
 800563a:	18bb      	adds	r3, r7, r2
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d010      	beq.n	8005664 <USBD_StdEPReq+0x166>
 8005642:	18bb      	adds	r3, r7, r2
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b80      	cmp	r3, #128	; 0x80
 8005648:	d00c      	beq.n	8005664 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800564a:	18bb      	adds	r3, r7, r2
 800564c:	781a      	ldrb	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	0011      	movs	r1, r2
 8005652:	0018      	movs	r0, r3
 8005654:	f7ff fa2d 	bl	8004ab2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	0018      	movs	r0, r3
 800565e:	f7ff fa28 	bl	8004ab2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005662:	e024      	b.n	80056ae <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0011      	movs	r1, r2
 800566a:	0018      	movs	r0, r3
 800566c:	f000 fc94 	bl	8005f98 <USBD_CtlError>
              break;
 8005670:	e01d      	b.n	80056ae <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	885b      	ldrh	r3, [r3, #2]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d118      	bne.n	80056ac <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800567a:	210e      	movs	r1, #14
 800567c:	187b      	adds	r3, r7, r1
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	227f      	movs	r2, #127	; 0x7f
 8005682:	4013      	ands	r3, r2
 8005684:	d006      	beq.n	8005694 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005686:	187b      	adds	r3, r7, r1
 8005688:	781a      	ldrb	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	0011      	movs	r1, r2
 800568e:	0018      	movs	r0, r3
 8005690:	f7ff fa3a 	bl	8004b08 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fe93 	bl	80063c2 <USBD_CtlSendStatus>
              }
              break;
 800569c:	e006      	b.n	80056ac <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	0011      	movs	r1, r2
 80056a4:	0018      	movs	r0, r3
 80056a6:	f000 fc77 	bl	8005f98 <USBD_CtlError>
              break;
 80056aa:	e000      	b.n	80056ae <USBD_StdEPReq+0x1b0>
              break;
 80056ac:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80056ae:	e0cd      	b.n	800584c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	23a7      	movs	r3, #167	; 0xa7
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	5cd3      	ldrb	r3, [r2, r3]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d002      	beq.n	80056c2 <USBD_StdEPReq+0x1c4>
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d03c      	beq.n	800573a <USBD_StdEPReq+0x23c>
 80056c0:	e0b5      	b.n	800582e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056c2:	220e      	movs	r2, #14
 80056c4:	18bb      	adds	r3, r7, r2
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <USBD_StdEPReq+0x1e4>
 80056cc:	18bb      	adds	r3, r7, r2
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d006      	beq.n	80056e2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0011      	movs	r1, r2
 80056da:	0018      	movs	r0, r3
 80056dc:	f000 fc5c 	bl	8005f98 <USBD_CtlError>
                break;
 80056e0:	e0ac      	b.n	800583c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056e2:	220e      	movs	r2, #14
 80056e4:	18bb      	adds	r3, r7, r2
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da0c      	bge.n	8005708 <USBD_StdEPReq+0x20a>
 80056ee:	18bb      	adds	r3, r7, r2
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	227f      	movs	r2, #127	; 0x7f
 80056f4:	401a      	ands	r2, r3
 80056f6:	0013      	movs	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	189b      	adds	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	3310      	adds	r3, #16
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	18d3      	adds	r3, r2, r3
 8005704:	3304      	adds	r3, #4
 8005706:	e00d      	b.n	8005724 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005708:	230e      	movs	r3, #14
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	227f      	movs	r2, #127	; 0x7f
 8005710:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005712:	0013      	movs	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	189b      	adds	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	3351      	adds	r3, #81	; 0x51
 800571c:	33ff      	adds	r3, #255	; 0xff
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	18d3      	adds	r3, r2, r3
 8005722:	3304      	adds	r3, #4
 8005724:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	0018      	movs	r0, r3
 8005734:	f000 fddb 	bl	80062ee <USBD_CtlSendData>
              break;
 8005738:	e080      	b.n	800583c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800573a:	220e      	movs	r2, #14
 800573c:	18bb      	adds	r3, r7, r2
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b25b      	sxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	da14      	bge.n	8005770 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005746:	18bb      	adds	r3, r7, r2
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	220f      	movs	r2, #15
 800574c:	401a      	ands	r2, r3
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	0013      	movs	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	189b      	adds	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	18cb      	adds	r3, r1, r3
 800575a:	3318      	adds	r3, #24
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d11e      	bne.n	80057a0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	0011      	movs	r1, r2
 8005768:	0018      	movs	r0, r3
 800576a:	f000 fc15 	bl	8005f98 <USBD_CtlError>
                  break;
 800576e:	e065      	b.n	800583c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005770:	230e      	movs	r3, #14
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	220f      	movs	r2, #15
 8005778:	401a      	ands	r2, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	23ac      	movs	r3, #172	; 0xac
 800577e:	0059      	lsls	r1, r3, #1
 8005780:	0013      	movs	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	189b      	adds	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	18c3      	adds	r3, r0, r3
 800578a:	185b      	adds	r3, r3, r1
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	0011      	movs	r1, r2
 8005798:	0018      	movs	r0, r3
 800579a:	f000 fbfd 	bl	8005f98 <USBD_CtlError>
                  break;
 800579e:	e04d      	b.n	800583c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057a0:	220e      	movs	r2, #14
 80057a2:	18bb      	adds	r3, r7, r2
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	b25b      	sxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da0c      	bge.n	80057c6 <USBD_StdEPReq+0x2c8>
 80057ac:	18bb      	adds	r3, r7, r2
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	227f      	movs	r2, #127	; 0x7f
 80057b2:	401a      	ands	r2, r3
 80057b4:	0013      	movs	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	189b      	adds	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	3310      	adds	r3, #16
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	18d3      	adds	r3, r2, r3
 80057c2:	3304      	adds	r3, #4
 80057c4:	e00d      	b.n	80057e2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80057c6:	230e      	movs	r3, #14
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	227f      	movs	r2, #127	; 0x7f
 80057ce:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057d0:	0013      	movs	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	189b      	adds	r3, r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	3351      	adds	r3, #81	; 0x51
 80057da:	33ff      	adds	r3, #255	; 0xff
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	18d3      	adds	r3, r2, r3
 80057e0:	3304      	adds	r3, #4
 80057e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80057e4:	220e      	movs	r2, #14
 80057e6:	18bb      	adds	r3, r7, r2
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <USBD_StdEPReq+0x2f8>
 80057ee:	18bb      	adds	r3, r7, r2
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d103      	bne.n	80057fe <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e010      	b.n	8005820 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80057fe:	230e      	movs	r3, #14
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	781a      	ldrb	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	0011      	movs	r1, r2
 8005808:	0018      	movs	r0, r3
 800580a:	f7ff f9a8 	bl	8004b5e <USBD_LL_IsStallEP>
 800580e:	1e03      	subs	r3, r0, #0
 8005810:	d003      	beq.n	800581a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e002      	b.n	8005820 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	0018      	movs	r0, r3
 8005828:	f000 fd61 	bl	80062ee <USBD_CtlSendData>
              break;
 800582c:	e006      	b.n	800583c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0011      	movs	r1, r2
 8005834:	0018      	movs	r0, r3
 8005836:	f000 fbaf 	bl	8005f98 <USBD_CtlError>
              break;
 800583a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800583c:	e006      	b.n	800584c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	0011      	movs	r1, r2
 8005844:	0018      	movs	r0, r3
 8005846:	f000 fba7 	bl	8005f98 <USBD_CtlError>
          break;
 800584a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800584c:	e006      	b.n	800585c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	0011      	movs	r1, r2
 8005854:	0018      	movs	r0, r3
 8005856:	f000 fb9f 	bl	8005f98 <USBD_CtlError>
      break;
 800585a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800585c:	230f      	movs	r3, #15
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	781b      	ldrb	r3, [r3, #0]
}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b004      	add	sp, #16
 8005868:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800586c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005876:	2308      	movs	r3, #8
 8005878:	18fb      	adds	r3, r7, r3
 800587a:	2200      	movs	r2, #0
 800587c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005882:	230b      	movs	r3, #11
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	885b      	ldrh	r3, [r3, #2]
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b07      	cmp	r3, #7
 8005894:	d900      	bls.n	8005898 <USBD_GetDescriptor+0x2c>
 8005896:	e159      	b.n	8005b4c <USBD_GetDescriptor+0x2e0>
 8005898:	009a      	lsls	r2, r3, #2
 800589a:	4bcb      	ldr	r3, [pc, #812]	; (8005bc8 <USBD_GetDescriptor+0x35c>)
 800589c:	18d3      	adds	r3, r2, r3
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	23ac      	movs	r3, #172	; 0xac
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	58d3      	ldr	r3, [r2, r3]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	7c12      	ldrb	r2, [r2, #16]
 80058b0:	2108      	movs	r1, #8
 80058b2:	1879      	adds	r1, r7, r1
 80058b4:	0010      	movs	r0, r2
 80058b6:	4798      	blx	r3
 80058b8:	0003      	movs	r3, r0
 80058ba:	60fb      	str	r3, [r7, #12]
      break;
 80058bc:	e153      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7c1b      	ldrb	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10f      	bne.n	80058e6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	23ad      	movs	r3, #173	; 0xad
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	58d3      	ldr	r3, [r2, r3]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	2208      	movs	r2, #8
 80058d2:	18ba      	adds	r2, r7, r2
 80058d4:	0010      	movs	r0, r2
 80058d6:	4798      	blx	r3
 80058d8:	0003      	movs	r3, r0
 80058da:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	2202      	movs	r2, #2
 80058e2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80058e4:	e13f      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	23ad      	movs	r3, #173	; 0xad
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	58d3      	ldr	r3, [r2, r3]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	2208      	movs	r2, #8
 80058f2:	18ba      	adds	r2, r7, r2
 80058f4:	0010      	movs	r0, r2
 80058f6:	4798      	blx	r3
 80058f8:	0003      	movs	r3, r0
 80058fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	2202      	movs	r2, #2
 8005902:	701a      	strb	r2, [r3, #0]
      break;
 8005904:	e12f      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	885b      	ldrh	r3, [r3, #2]
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b05      	cmp	r3, #5
 800590e:	d900      	bls.n	8005912 <USBD_GetDescriptor+0xa6>
 8005910:	e0d0      	b.n	8005ab4 <USBD_GetDescriptor+0x248>
 8005912:	009a      	lsls	r2, r3, #2
 8005914:	4bad      	ldr	r3, [pc, #692]	; (8005bcc <USBD_GetDescriptor+0x360>)
 8005916:	18d3      	adds	r3, r2, r3
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	23ac      	movs	r3, #172	; 0xac
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	58d3      	ldr	r3, [r2, r3]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00d      	beq.n	8005946 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	23ac      	movs	r3, #172	; 0xac
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	58d3      	ldr	r3, [r2, r3]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	7c12      	ldrb	r2, [r2, #16]
 8005938:	2108      	movs	r1, #8
 800593a:	1879      	adds	r1, r7, r1
 800593c:	0010      	movs	r0, r2
 800593e:	4798      	blx	r3
 8005940:	0003      	movs	r3, r0
 8005942:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005944:	e0c3      	b.n	8005ace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	0011      	movs	r1, r2
 800594c:	0018      	movs	r0, r3
 800594e:	f000 fb23 	bl	8005f98 <USBD_CtlError>
            err++;
 8005952:	210b      	movs	r1, #11
 8005954:	187b      	adds	r3, r7, r1
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	187b      	adds	r3, r7, r1
 800595a:	3201      	adds	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
          break;
 800595e:	e0b6      	b.n	8005ace <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	23ac      	movs	r3, #172	; 0xac
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	58d3      	ldr	r3, [r2, r3]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00d      	beq.n	800598a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	23ac      	movs	r3, #172	; 0xac
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	58d3      	ldr	r3, [r2, r3]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	7c12      	ldrb	r2, [r2, #16]
 800597c:	2108      	movs	r1, #8
 800597e:	1879      	adds	r1, r7, r1
 8005980:	0010      	movs	r0, r2
 8005982:	4798      	blx	r3
 8005984:	0003      	movs	r3, r0
 8005986:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005988:	e0a1      	b.n	8005ace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	0011      	movs	r1, r2
 8005990:	0018      	movs	r0, r3
 8005992:	f000 fb01 	bl	8005f98 <USBD_CtlError>
            err++;
 8005996:	210b      	movs	r1, #11
 8005998:	187b      	adds	r3, r7, r1
 800599a:	781a      	ldrb	r2, [r3, #0]
 800599c:	187b      	adds	r3, r7, r1
 800599e:	3201      	adds	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
          break;
 80059a2:	e094      	b.n	8005ace <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	23ac      	movs	r3, #172	; 0xac
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	58d3      	ldr	r3, [r2, r3]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	23ac      	movs	r3, #172	; 0xac
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	58d3      	ldr	r3, [r2, r3]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	7c12      	ldrb	r2, [r2, #16]
 80059c0:	2108      	movs	r1, #8
 80059c2:	1879      	adds	r1, r7, r1
 80059c4:	0010      	movs	r0, r2
 80059c6:	4798      	blx	r3
 80059c8:	0003      	movs	r3, r0
 80059ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059cc:	e07f      	b.n	8005ace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0011      	movs	r1, r2
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 fadf 	bl	8005f98 <USBD_CtlError>
            err++;
 80059da:	210b      	movs	r1, #11
 80059dc:	187b      	adds	r3, r7, r1
 80059de:	781a      	ldrb	r2, [r3, #0]
 80059e0:	187b      	adds	r3, r7, r1
 80059e2:	3201      	adds	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
          break;
 80059e6:	e072      	b.n	8005ace <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	23ac      	movs	r3, #172	; 0xac
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	58d3      	ldr	r3, [r2, r3]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00d      	beq.n	8005a12 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	23ac      	movs	r3, #172	; 0xac
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	58d3      	ldr	r3, [r2, r3]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	7c12      	ldrb	r2, [r2, #16]
 8005a04:	2108      	movs	r1, #8
 8005a06:	1879      	adds	r1, r7, r1
 8005a08:	0010      	movs	r0, r2
 8005a0a:	4798      	blx	r3
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a10:	e05d      	b.n	8005ace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	0011      	movs	r1, r2
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 fabd 	bl	8005f98 <USBD_CtlError>
            err++;
 8005a1e:	210b      	movs	r1, #11
 8005a20:	187b      	adds	r3, r7, r1
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	187b      	adds	r3, r7, r1
 8005a26:	3201      	adds	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
          break;
 8005a2a:	e050      	b.n	8005ace <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	23ac      	movs	r3, #172	; 0xac
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	58d3      	ldr	r3, [r2, r3]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	23ac      	movs	r3, #172	; 0xac
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	58d3      	ldr	r3, [r2, r3]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	7c12      	ldrb	r2, [r2, #16]
 8005a48:	2108      	movs	r1, #8
 8005a4a:	1879      	adds	r1, r7, r1
 8005a4c:	0010      	movs	r0, r2
 8005a4e:	4798      	blx	r3
 8005a50:	0003      	movs	r3, r0
 8005a52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a54:	e03b      	b.n	8005ace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0011      	movs	r1, r2
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f000 fa9b 	bl	8005f98 <USBD_CtlError>
            err++;
 8005a62:	210b      	movs	r1, #11
 8005a64:	187b      	adds	r3, r7, r1
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	3201      	adds	r2, #1
 8005a6c:	701a      	strb	r2, [r3, #0]
          break;
 8005a6e:	e02e      	b.n	8005ace <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	23ac      	movs	r3, #172	; 0xac
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	58d3      	ldr	r3, [r2, r3]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	23ac      	movs	r3, #172	; 0xac
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	58d3      	ldr	r3, [r2, r3]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	7c12      	ldrb	r2, [r2, #16]
 8005a8c:	2108      	movs	r1, #8
 8005a8e:	1879      	adds	r1, r7, r1
 8005a90:	0010      	movs	r0, r2
 8005a92:	4798      	blx	r3
 8005a94:	0003      	movs	r3, r0
 8005a96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a98:	e019      	b.n	8005ace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	0011      	movs	r1, r2
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f000 fa79 	bl	8005f98 <USBD_CtlError>
            err++;
 8005aa6:	210b      	movs	r1, #11
 8005aa8:	187b      	adds	r3, r7, r1
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	3201      	adds	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
          break;
 8005ab2:	e00c      	b.n	8005ace <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0011      	movs	r1, r2
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 fa6c 	bl	8005f98 <USBD_CtlError>
          err++;
 8005ac0:	210b      	movs	r1, #11
 8005ac2:	187b      	adds	r3, r7, r1
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	3201      	adds	r2, #1
 8005aca:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8005acc:	e04b      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>
 8005ace:	e04a      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	7c1b      	ldrb	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	23ad      	movs	r3, #173	; 0xad
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	58d3      	ldr	r3, [r2, r3]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	18ba      	adds	r2, r7, r2
 8005ae6:	0010      	movs	r0, r2
 8005ae8:	4798      	blx	r3
 8005aea:	0003      	movs	r3, r0
 8005aec:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005aee:	e03a      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0011      	movs	r1, r2
 8005af6:	0018      	movs	r0, r3
 8005af8:	f000 fa4e 	bl	8005f98 <USBD_CtlError>
        err++;
 8005afc:	210b      	movs	r1, #11
 8005afe:	187b      	adds	r3, r7, r1
 8005b00:	781a      	ldrb	r2, [r3, #0]
 8005b02:	187b      	adds	r3, r7, r1
 8005b04:	3201      	adds	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
      break;
 8005b08:	e02d      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	7c1b      	ldrb	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10f      	bne.n	8005b32 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	23ad      	movs	r3, #173	; 0xad
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	58d3      	ldr	r3, [r2, r3]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	18ba      	adds	r2, r7, r2
 8005b20:	0010      	movs	r0, r2
 8005b22:	4798      	blx	r3
 8005b24:	0003      	movs	r3, r0
 8005b26:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b30:	e019      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	0011      	movs	r1, r2
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 fa2d 	bl	8005f98 <USBD_CtlError>
        err++;
 8005b3e:	210b      	movs	r1, #11
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	187b      	adds	r3, r7, r1
 8005b46:	3201      	adds	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
      break;
 8005b4a:	e00c      	b.n	8005b66 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	0011      	movs	r1, r2
 8005b52:	0018      	movs	r0, r3
 8005b54:	f000 fa20 	bl	8005f98 <USBD_CtlError>
      err++;
 8005b58:	210b      	movs	r1, #11
 8005b5a:	187b      	adds	r3, r7, r1
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	187b      	adds	r3, r7, r1
 8005b60:	3201      	adds	r2, #1
 8005b62:	701a      	strb	r2, [r3, #0]
      break;
 8005b64:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8005b66:	230b      	movs	r3, #11
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d127      	bne.n	8005bc0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005b70:	2108      	movs	r1, #8
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d019      	beq.n	8005bae <USBD_GetDescriptor+0x342>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	88db      	ldrh	r3, [r3, #6]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d015      	beq.n	8005bae <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	88da      	ldrh	r2, [r3, #6]
 8005b86:	187b      	adds	r3, r7, r1
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	1c18      	adds	r0, r3, #0
 8005b8c:	1c11      	adds	r1, r2, #0
 8005b8e:	b28a      	uxth	r2, r1
 8005b90:	b283      	uxth	r3, r0
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d900      	bls.n	8005b98 <USBD_GetDescriptor+0x32c>
 8005b96:	1c01      	adds	r1, r0, #0
 8005b98:	b28a      	uxth	r2, r1
 8005b9a:	2108      	movs	r1, #8
 8005b9c:	187b      	adds	r3, r7, r1
 8005b9e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ba0:	187b      	adds	r3, r7, r1
 8005ba2:	881a      	ldrh	r2, [r3, #0]
 8005ba4:	68f9      	ldr	r1, [r7, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f000 fba0 	bl	80062ee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	88db      	ldrh	r3, [r3, #6]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d105      	bne.n	8005bc2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f000 fc02 	bl	80063c2 <USBD_CtlSendStatus>
 8005bbe:	e000      	b.n	8005bc2 <USBD_GetDescriptor+0x356>
    return;
 8005bc0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b004      	add	sp, #16
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	0800e0b0 	.word	0x0800e0b0
 8005bcc:	0800e0d0 	.word	0x0800e0d0

08005bd0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005bd0:	b590      	push	{r4, r7, lr}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	889b      	ldrh	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d13d      	bne.n	8005c5e <USBD_SetAddress+0x8e>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	88db      	ldrh	r3, [r3, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d139      	bne.n	8005c5e <USBD_SetAddress+0x8e>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	885b      	ldrh	r3, [r3, #2]
 8005bee:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf0:	d835      	bhi.n	8005c5e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	885b      	ldrh	r3, [r3, #2]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	230f      	movs	r3, #15
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	217f      	movs	r1, #127	; 0x7f
 8005bfe:	400a      	ands	r2, r1
 8005c00:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	23a7      	movs	r3, #167	; 0xa7
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	5cd3      	ldrb	r3, [r2, r3]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d106      	bne.n	8005c1c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	0011      	movs	r1, r2
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 f9bf 	bl	8005f98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c1a:	e027      	b.n	8005c6c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	240f      	movs	r4, #15
 8005c20:	193a      	adds	r2, r7, r4
 8005c22:	4914      	ldr	r1, [pc, #80]	; (8005c74 <USBD_SetAddress+0xa4>)
 8005c24:	7812      	ldrb	r2, [r2, #0]
 8005c26:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c28:	193b      	adds	r3, r7, r4
 8005c2a:	781a      	ldrb	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0011      	movs	r1, r2
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7fe ffc5 	bl	8004bc0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f000 fbc2 	bl	80063c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c3e:	193b      	adds	r3, r7, r4
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	23a7      	movs	r3, #167	; 0xa7
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c50:	e00c      	b.n	8005c6c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	23a7      	movs	r3, #167	; 0xa7
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	2101      	movs	r1, #1
 8005c5a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5c:	e006      	b.n	8005c6c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	0011      	movs	r1, r2
 8005c64:	0018      	movs	r0, r3
 8005c66:	f000 f997 	bl	8005f98 <USBD_CtlError>
  }
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b005      	add	sp, #20
 8005c72:	bd90      	pop	{r4, r7, pc}
 8005c74:	0000029e 	.word	0x0000029e

08005c78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	885b      	ldrh	r3, [r3, #2]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	4b4c      	ldr	r3, [pc, #304]	; (8005dbc <USBD_SetConfig+0x144>)
 8005c8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c8c:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <USBD_SetConfig+0x144>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d906      	bls.n	8005ca2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0011      	movs	r1, r2
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f000 f97c 	bl	8005f98 <USBD_CtlError>
 8005ca0:	e088      	b.n	8005db4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	23a7      	movs	r3, #167	; 0xa7
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	5cd3      	ldrb	r3, [r2, r3]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d002      	beq.n	8005cb4 <USBD_SetConfig+0x3c>
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d029      	beq.n	8005d06 <USBD_SetConfig+0x8e>
 8005cb2:	e071      	b.n	8005d98 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005cb4:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <USBD_SetConfig+0x144>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01f      	beq.n	8005cfc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8005cbc:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <USBD_SetConfig+0x144>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	001a      	movs	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	23a7      	movs	r3, #167	; 0xa7
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	2103      	movs	r1, #3
 8005cce:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cd0:	4b3a      	ldr	r3, [pc, #232]	; (8005dbc <USBD_SetConfig+0x144>)
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	0011      	movs	r1, r2
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7ff f8c5 	bl	8004e68 <USBD_SetClassConfig>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d106      	bne.n	8005cf2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0011      	movs	r1, r2
 8005cea:	0018      	movs	r0, r3
 8005cec:	f000 f954 	bl	8005f98 <USBD_CtlError>
            return;
 8005cf0:	e060      	b.n	8005db4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 fb64 	bl	80063c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005cfa:	e05b      	b.n	8005db4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f000 fb5f 	bl	80063c2 <USBD_CtlSendStatus>
        break;
 8005d04:	e056      	b.n	8005db4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005d06:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <USBD_SetConfig+0x144>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d115      	bne.n	8005d3a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	23a7      	movs	r3, #167	; 0xa7
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	2102      	movs	r1, #2
 8005d16:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8005d18:	4b28      	ldr	r3, [pc, #160]	; (8005dbc <USBD_SetConfig+0x144>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	001a      	movs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005d22:	4b26      	ldr	r3, [pc, #152]	; (8005dbc <USBD_SetConfig+0x144>)
 8005d24:	781a      	ldrb	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	0011      	movs	r1, r2
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f7ff f8c3 	bl	8004eb6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 fb45 	bl	80063c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d38:	e03c      	b.n	8005db4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8005d3a:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <USBD_SetConfig+0x144>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	001a      	movs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d022      	beq.n	8005d8e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	0011      	movs	r1, r2
 8005d52:	0018      	movs	r0, r3
 8005d54:	f7ff f8af 	bl	8004eb6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005d58:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <USBD_SetConfig+0x144>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	001a      	movs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <USBD_SetConfig+0x144>)
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0011      	movs	r1, r2
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7ff f87c 	bl	8004e68 <USBD_SetClassConfig>
 8005d70:	0003      	movs	r3, r0
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d106      	bne.n	8005d84 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	0011      	movs	r1, r2
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f000 f90b 	bl	8005f98 <USBD_CtlError>
            return;
 8005d82:	e017      	b.n	8005db4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 fb1b 	bl	80063c2 <USBD_CtlSendStatus>
        break;
 8005d8c:	e012      	b.n	8005db4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 fb16 	bl	80063c2 <USBD_CtlSendStatus>
        break;
 8005d96:	e00d      	b.n	8005db4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0011      	movs	r1, r2
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f000 f8fa 	bl	8005f98 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <USBD_SetConfig+0x144>)
 8005da6:	781a      	ldrb	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0011      	movs	r1, r2
 8005dac:	0018      	movs	r0, r3
 8005dae:	f7ff f882 	bl	8004eb6 <USBD_ClrClassConfig>
        break;
 8005db2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b002      	add	sp, #8
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	2000138c 	.word	0x2000138c

08005dc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	88db      	ldrh	r3, [r3, #6]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d006      	beq.n	8005de0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	0011      	movs	r1, r2
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 f8dd 	bl	8005f98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005dde:	e026      	b.n	8005e2e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	23a7      	movs	r3, #167	; 0xa7
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	5cd3      	ldrb	r3, [r2, r3]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	dc02      	bgt.n	8005df2 <USBD_GetConfig+0x32>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dc03      	bgt.n	8005df8 <USBD_GetConfig+0x38>
 8005df0:	e016      	b.n	8005e20 <USBD_GetConfig+0x60>
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d00c      	beq.n	8005e10 <USBD_GetConfig+0x50>
 8005df6:	e013      	b.n	8005e20 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3308      	adds	r3, #8
 8005e02:	0019      	movs	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 fa70 	bl	80062ee <USBD_CtlSendData>
        break;
 8005e0e:	e00e      	b.n	8005e2e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	1d19      	adds	r1, r3, #4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f000 fa68 	bl	80062ee <USBD_CtlSendData>
        break;
 8005e1e:	e006      	b.n	8005e2e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0011      	movs	r1, r2
 8005e26:	0018      	movs	r0, r3
 8005e28:	f000 f8b6 	bl	8005f98 <USBD_CtlError>
        break;
 8005e2c:	46c0      	nop			; (mov r8, r8)
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b002      	add	sp, #8
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	23a7      	movs	r3, #167	; 0xa7
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	5cd3      	ldrb	r3, [r2, r3]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d822      	bhi.n	8005e94 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	88db      	ldrh	r3, [r3, #6]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d006      	beq.n	8005e64 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 f89b 	bl	8005f98 <USBD_CtlError>
        break;
 8005e62:	e01e      	b.n	8005ea2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	23a9      	movs	r3, #169	; 0xa9
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	58d3      	ldr	r3, [r2, r3]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	330c      	adds	r3, #12
 8005e86:	0019      	movs	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 fa2e 	bl	80062ee <USBD_CtlSendData>
      break;
 8005e92:	e006      	b.n	8005ea2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	0011      	movs	r1, r2
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f000 f87c 	bl	8005f98 <USBD_CtlError>
      break;
 8005ea0:	46c0      	nop			; (mov r8, r8)
  }
}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b002      	add	sp, #8
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	885b      	ldrh	r3, [r3, #2]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d108      	bne.n	8005ece <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	23a9      	movs	r3, #169	; 0xa9
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f000 fa7a 	bl	80063c2 <USBD_CtlSendStatus>
  }
}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b002      	add	sp, #8
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	23a7      	movs	r3, #167	; 0xa7
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	5cd3      	ldrb	r3, [r2, r3]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d80d      	bhi.n	8005f0a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	885b      	ldrh	r3, [r3, #2]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d110      	bne.n	8005f18 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	23a9      	movs	r3, #169	; 0xa9
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	2100      	movs	r1, #0
 8005efe:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 fa5d 	bl	80063c2 <USBD_CtlSendStatus>
      }
      break;
 8005f08:	e006      	b.n	8005f18 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	0011      	movs	r1, r2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 f841 	bl	8005f98 <USBD_CtlError>
      break;
 8005f16:	e000      	b.n	8005f1a <USBD_ClrFeature+0x44>
      break;
 8005f18:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b002      	add	sp, #8
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781a      	ldrb	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	785a      	ldrb	r2, [r3, #1]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	3302      	adds	r3, #2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	3303      	adds	r3, #3
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	18d3      	adds	r3, r2, r3
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	3305      	adds	r3, #5
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	18d3      	adds	r3, r2, r3
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	3306      	adds	r3, #6
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	3307      	adds	r3, #7
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	18d3      	adds	r3, r2, r3
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	80da      	strh	r2, [r3, #6]

}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b002      	add	sp, #8
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fe fd83 	bl	8004ab2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f7fe fd7e 	bl	8004ab2 <USBD_LL_StallEP>
}
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	b002      	add	sp, #8
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005fbe:	b590      	push	{r4, r7, lr}
 8005fc0:	b087      	sub	sp, #28
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005fca:	2417      	movs	r4, #23
 8005fcc:	193b      	adds	r3, r7, r4
 8005fce:	2200      	movs	r2, #0
 8005fd0:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d03c      	beq.n	8006052 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 f83d 	bl	800605a <USBD_GetLen>
 8005fe0:	0003      	movs	r3, r0
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	18db      	adds	r3, r3, r3
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005fee:	193b      	adds	r3, r7, r4
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	193a      	adds	r2, r7, r4
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	7011      	strb	r1, [r2, #0]
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	189b      	adds	r3, r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	7812      	ldrb	r2, [r2, #0]
 8006002:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006004:	193b      	adds	r3, r7, r4
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	193a      	adds	r2, r7, r4
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	7011      	strb	r1, [r2, #0]
 800600e:	001a      	movs	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	189b      	adds	r3, r3, r2
 8006014:	2203      	movs	r2, #3
 8006016:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006018:	e017      	b.n	800604a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	60fa      	str	r2, [r7, #12]
 8006020:	2417      	movs	r4, #23
 8006022:	193a      	adds	r2, r7, r4
 8006024:	7812      	ldrb	r2, [r2, #0]
 8006026:	1939      	adds	r1, r7, r4
 8006028:	1c50      	adds	r0, r2, #1
 800602a:	7008      	strb	r0, [r1, #0]
 800602c:	0011      	movs	r1, r2
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	1852      	adds	r2, r2, r1
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006036:	193b      	adds	r3, r7, r4
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	193a      	adds	r2, r7, r4
 800603c:	1c59      	adds	r1, r3, #1
 800603e:	7011      	strb	r1, [r2, #0]
 8006040:	001a      	movs	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	189b      	adds	r3, r3, r2
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e3      	bne.n	800601a <USBD_GetString+0x5c>
    }
  }
}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	46bd      	mov	sp, r7
 8006056:	b007      	add	sp, #28
 8006058:	bd90      	pop	{r4, r7, pc}

0800605a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006062:	230f      	movs	r3, #15
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800606a:	e008      	b.n	800607e <USBD_GetLen+0x24>
  {
    len++;
 800606c:	210f      	movs	r1, #15
 800606e:	187b      	adds	r3, r7, r1
 8006070:	781a      	ldrb	r2, [r3, #0]
 8006072:	187b      	adds	r3, r7, r1
 8006074:	3201      	adds	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]
    buf++;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3301      	adds	r3, #1
 800607c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f2      	bne.n	800606c <USBD_GetLen+0x12>
  }

  return len;
 8006086:	230f      	movs	r3, #15
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	781b      	ldrb	r3, [r3, #0]
}
 800608c:	0018      	movs	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	b004      	add	sp, #16
 8006092:	bd80      	pop	{r7, pc}

08006094 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	0002      	movs	r2, r0
 800609c:	6039      	str	r1, [r7, #0]
 800609e:	1dfb      	adds	r3, r7, #7
 80060a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2212      	movs	r2, #18
 80060a6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80060a8:	4b02      	ldr	r3, [pc, #8]	; (80060b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80060aa:	0018      	movs	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b002      	add	sp, #8
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	2000017c 	.word	0x2000017c

080060b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	0002      	movs	r2, r0
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	1dfb      	adds	r3, r7, #7
 80060c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2204      	movs	r2, #4
 80060ca:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80060cc:	4b02      	ldr	r3, [pc, #8]	; (80060d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80060ce:	0018      	movs	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b002      	add	sp, #8
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	20000190 	.word	0x20000190

080060dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	0002      	movs	r2, r0
 80060e4:	6039      	str	r1, [r7, #0]
 80060e6:	1dfb      	adds	r3, r7, #7
 80060e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80060ea:	1dfb      	adds	r3, r7, #7
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	4908      	ldr	r1, [pc, #32]	; (8006118 <USBD_FS_ProductStrDescriptor+0x3c>)
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <USBD_FS_ProductStrDescriptor+0x40>)
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7ff ff60 	bl	8005fbe <USBD_GetString>
 80060fe:	e005      	b.n	800610c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	4905      	ldr	r1, [pc, #20]	; (8006118 <USBD_FS_ProductStrDescriptor+0x3c>)
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <USBD_FS_ProductStrDescriptor+0x40>)
 8006106:	0018      	movs	r0, r3
 8006108:	f7ff ff59 	bl	8005fbe <USBD_GetString>
  }
  return USBD_StrDesc;
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800610e:	0018      	movs	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	b002      	add	sp, #8
 8006114:	bd80      	pop	{r7, pc}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	20001390 	.word	0x20001390
 800611c:	0800dec4 	.word	0x0800dec4

08006120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	0002      	movs	r2, r0
 8006128:	6039      	str	r1, [r7, #0]
 800612a:	1dfb      	adds	r3, r7, #7
 800612c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	4904      	ldr	r1, [pc, #16]	; (8006144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8006134:	0018      	movs	r0, r3
 8006136:	f7ff ff42 	bl	8005fbe <USBD_GetString>
  return USBD_StrDesc;
 800613a:	4b02      	ldr	r3, [pc, #8]	; (8006144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b002      	add	sp, #8
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20001390 	.word	0x20001390
 8006148:	0800dedc 	.word	0x0800dedc

0800614c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	0002      	movs	r2, r0
 8006154:	6039      	str	r1, [r7, #0]
 8006156:	1dfb      	adds	r3, r7, #7
 8006158:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	221a      	movs	r2, #26
 800615e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006160:	f000 f84c 	bl	80061fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006164:	4b02      	ldr	r3, [pc, #8]	; (8006170 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8006166:	0018      	movs	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	b002      	add	sp, #8
 800616c:	bd80      	pop	{r7, pc}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	20000194 	.word	0x20000194

08006174 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	0002      	movs	r2, r0
 800617c:	6039      	str	r1, [r7, #0]
 800617e:	1dfb      	adds	r3, r7, #7
 8006180:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8006182:	1dfb      	adds	r3, r7, #7
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4908      	ldr	r1, [pc, #32]	; (80061b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800618e:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8006190:	0018      	movs	r0, r3
 8006192:	f7ff ff14 	bl	8005fbe <USBD_GetString>
 8006196:	e005      	b.n	80061a4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	4905      	ldr	r1, [pc, #20]	; (80061b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <USBD_FS_ConfigStrDescriptor+0x40>)
 800619e:	0018      	movs	r0, r3
 80061a0:	f7ff ff0d 	bl	8005fbe <USBD_GetString>
  }
  return USBD_StrDesc;
 80061a4:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80061a6:	0018      	movs	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	b002      	add	sp, #8
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	46c0      	nop			; (mov r8, r8)
 80061b0:	20001390 	.word	0x20001390
 80061b4:	0800def0 	.word	0x0800def0

080061b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	0002      	movs	r2, r0
 80061c0:	6039      	str	r1, [r7, #0]
 80061c2:	1dfb      	adds	r3, r7, #7
 80061c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80061c6:	1dfb      	adds	r3, r7, #7
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	4908      	ldr	r1, [pc, #32]	; (80061f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7ff fef2 	bl	8005fbe <USBD_GetString>
 80061da:	e005      	b.n	80061e8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	4905      	ldr	r1, [pc, #20]	; (80061f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80061e2:	0018      	movs	r0, r3
 80061e4:	f7ff feeb 	bl	8005fbe <USBD_GetString>
  }
  return USBD_StrDesc;
 80061e8:	4b02      	ldr	r3, [pc, #8]	; (80061f4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80061ea:	0018      	movs	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b002      	add	sp, #8
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	20001390 	.word	0x20001390
 80061f8:	0800defc 	.word	0x0800defc

080061fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <Get_SerialNum+0x48>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <Get_SerialNum+0x4c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <Get_SerialNum+0x50>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	18d3      	adds	r3, r2, r3
 800621a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006222:	490b      	ldr	r1, [pc, #44]	; (8006250 <Get_SerialNum+0x54>)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2208      	movs	r2, #8
 8006228:	0018      	movs	r0, r3
 800622a:	f000 f815 	bl	8006258 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800622e:	4909      	ldr	r1, [pc, #36]	; (8006254 <Get_SerialNum+0x58>)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2204      	movs	r2, #4
 8006234:	0018      	movs	r0, r3
 8006236:	f000 f80f 	bl	8006258 <IntToUnicode>
  }
}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	46bd      	mov	sp, r7
 800623e:	b004      	add	sp, #16
 8006240:	bd80      	pop	{r7, pc}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	1ffff7ac 	.word	0x1ffff7ac
 8006248:	1ffff7b0 	.word	0x1ffff7b0
 800624c:	1ffff7b4 	.word	0x1ffff7b4
 8006250:	20000196 	.word	0x20000196
 8006254:	200001a6 	.word	0x200001a6

08006258 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	1dfb      	adds	r3, r7, #7
 8006264:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8006266:	2117      	movs	r1, #23
 8006268:	187b      	adds	r3, r7, r1
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800626e:	187b      	adds	r3, r7, r1
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	e02f      	b.n	80062d6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0f1b      	lsrs	r3, r3, #28
 800627a:	2b09      	cmp	r3, #9
 800627c:	d80d      	bhi.n	800629a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	0f1b      	lsrs	r3, r3, #28
 8006282:	b2da      	uxtb	r2, r3
 8006284:	2317      	movs	r3, #23
 8006286:	18fb      	adds	r3, r7, r3
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	0019      	movs	r1, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	185b      	adds	r3, r3, r1
 8006292:	3230      	adds	r2, #48	; 0x30
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	e00c      	b.n	80062b4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	0f1b      	lsrs	r3, r3, #28
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	2317      	movs	r3, #23
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	0019      	movs	r1, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	185b      	adds	r3, r3, r1
 80062ae:	3237      	adds	r2, #55	; 0x37
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80062ba:	2117      	movs	r1, #23
 80062bc:	187b      	adds	r3, r7, r1
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	3301      	adds	r3, #1
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	18d3      	adds	r3, r2, r3
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80062cc:	187b      	adds	r3, r7, r1
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	187b      	adds	r3, r7, r1
 80062d2:	3201      	adds	r2, #1
 80062d4:	701a      	strb	r2, [r3, #0]
 80062d6:	2317      	movs	r3, #23
 80062d8:	18fa      	adds	r2, r7, r3
 80062da:	1dfb      	adds	r3, r7, #7
 80062dc:	7812      	ldrb	r2, [r2, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d3c8      	bcc.n	8006276 <IntToUnicode+0x1e>
  }
}
 80062e4:	46c0      	nop			; (mov r8, r8)
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b006      	add	sp, #24
 80062ec:	bd80      	pop	{r7, pc}

080062ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	1dbb      	adds	r3, r7, #6
 80062fa:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	23a5      	movs	r3, #165	; 0xa5
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	2102      	movs	r1, #2
 8006304:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8006306:	1dbb      	adds	r3, r7, #6
 8006308:	881a      	ldrh	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800630e:	1dbb      	adds	r3, r7, #6
 8006310:	881a      	ldrh	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006316:	1dbb      	adds	r3, r7, #6
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	2100      	movs	r1, #0
 8006320:	f7fe fc79 	bl	8004c16 <USBD_LL_Transmit>

  return USBD_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b004      	add	sp, #16
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	1dbb      	adds	r3, r7, #6
 800633a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800633c:	1dbb      	adds	r3, r7, #6
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	2100      	movs	r1, #0
 8006346:	f7fe fc66 	bl	8004c16 <USBD_LL_Transmit>

  return USBD_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	0018      	movs	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	b004      	add	sp, #16
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	1dbb      	adds	r3, r7, #6
 8006360:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	23a5      	movs	r3, #165	; 0xa5
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	2103      	movs	r1, #3
 800636a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800636c:	1dbb      	adds	r3, r7, #6
 800636e:	8819      	ldrh	r1, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	23ae      	movs	r3, #174	; 0xae
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8006378:	1dbb      	adds	r3, r7, #6
 800637a:	8819      	ldrh	r1, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	23b0      	movs	r3, #176	; 0xb0
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006384:	1dbb      	adds	r3, r7, #6
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	2100      	movs	r1, #0
 800638e:	f7fe fc79 	bl	8004c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	b004      	add	sp, #16
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	1dbb      	adds	r3, r7, #6
 80063a8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063aa:	1dbb      	adds	r3, r7, #6
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	2100      	movs	r1, #0
 80063b4:	f7fe fc66 	bl	8004c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	0018      	movs	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	b004      	add	sp, #16
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	23a5      	movs	r3, #165	; 0xa5
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	2104      	movs	r1, #4
 80063d2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	2300      	movs	r3, #0
 80063d8:	2200      	movs	r2, #0
 80063da:	2100      	movs	r1, #0
 80063dc:	f7fe fc1b 	bl	8004c16 <USBD_LL_Transmit>

  return USBD_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	0018      	movs	r0, r3
 80063e4:	46bd      	mov	sp, r7
 80063e6:	b002      	add	sp, #8
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	23a5      	movs	r3, #165	; 0xa5
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	2105      	movs	r1, #5
 80063fa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	2300      	movs	r3, #0
 8006400:	2200      	movs	r2, #0
 8006402:	2100      	movs	r1, #0
 8006404:	f7fe fc3e 	bl	8004c84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	0018      	movs	r0, r3
 800640c:	46bd      	mov	sp, r7
 800640e:	b002      	add	sp, #8
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006414:	480d      	ldr	r0, [pc, #52]	; (800644c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006416:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006418:	f7fd fb4a 	bl	8003ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800641c:	480c      	ldr	r0, [pc, #48]	; (8006450 <LoopForever+0x6>)
  ldr r1, =_edata
 800641e:	490d      	ldr	r1, [pc, #52]	; (8006454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006420:	4a0d      	ldr	r2, [pc, #52]	; (8006458 <LoopForever+0xe>)
  movs r3, #0
 8006422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006424:	e002      	b.n	800642c <LoopCopyDataInit>

08006426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800642a:	3304      	adds	r3, #4

0800642c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800642c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800642e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006430:	d3f9      	bcc.n	8006426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006432:	4a0a      	ldr	r2, [pc, #40]	; (800645c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006434:	4c0a      	ldr	r4, [pc, #40]	; (8006460 <LoopForever+0x16>)
  movs r3, #0
 8006436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006438:	e001      	b.n	800643e <LoopFillZerobss>

0800643a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800643a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800643c:	3204      	adds	r2, #4

0800643e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800643e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006440:	d3fb      	bcc.n	800643a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006442:	f007 fd0f 	bl	800de64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006446:	f7fc fc71 	bl	8002d2c <main>

0800644a <LoopForever>:

LoopForever:
    b LoopForever
 800644a:	e7fe      	b.n	800644a <LoopForever>
  ldr   r0, =_estack
 800644c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8006450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006454:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8006458:	0800e110 	.word	0x0800e110
  ldr r2, =_sbss
 800645c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8006460:	20001594 	.word	0x20001594

08006464 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006464:	e7fe      	b.n	8006464 <DMA1_Channel1_IRQHandler>
	...

08006468 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800646c:	4b07      	ldr	r3, [pc, #28]	; (800648c <HAL_Init+0x24>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	4b06      	ldr	r3, [pc, #24]	; (800648c <HAL_Init+0x24>)
 8006472:	2110      	movs	r1, #16
 8006474:	430a      	orrs	r2, r1
 8006476:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8006478:	2003      	movs	r0, #3
 800647a:	f000 f809 	bl	8006490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800647e:	f7fd f94b 	bl	8003718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	0018      	movs	r0, r3
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	40022000 	.word	0x40022000

08006490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006490:	b590      	push	{r4, r7, lr}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006498:	4b14      	ldr	r3, [pc, #80]	; (80064ec <HAL_InitTick+0x5c>)
 800649a:	681c      	ldr	r4, [r3, #0]
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <HAL_InitTick+0x60>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	0019      	movs	r1, r3
 80064a2:	23fa      	movs	r3, #250	; 0xfa
 80064a4:	0098      	lsls	r0, r3, #2
 80064a6:	f7f9 fe2f 	bl	8000108 <__udivsi3>
 80064aa:	0003      	movs	r3, r0
 80064ac:	0019      	movs	r1, r3
 80064ae:	0020      	movs	r0, r4
 80064b0:	f7f9 fe2a 	bl	8000108 <__udivsi3>
 80064b4:	0003      	movs	r3, r0
 80064b6:	0018      	movs	r0, r3
 80064b8:	f001 fe05 	bl	80080c6 <HAL_SYSTICK_Config>
 80064bc:	1e03      	subs	r3, r0, #0
 80064be:	d001      	beq.n	80064c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e00f      	b.n	80064e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d80b      	bhi.n	80064e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	2301      	movs	r3, #1
 80064ce:	425b      	negs	r3, r3
 80064d0:	2200      	movs	r2, #0
 80064d2:	0018      	movs	r0, r3
 80064d4:	f001 fdd2 	bl	800807c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064d8:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <HAL_InitTick+0x64>)
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b003      	add	sp, #12
 80064ea:	bd90      	pop	{r4, r7, pc}
 80064ec:	2000003c 	.word	0x2000003c
 80064f0:	200001b4 	.word	0x200001b4
 80064f4:	200001b0 	.word	0x200001b0

080064f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <HAL_IncTick+0x1c>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	001a      	movs	r2, r3
 8006502:	4b05      	ldr	r3, [pc, #20]	; (8006518 <HAL_IncTick+0x20>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	18d2      	adds	r2, r2, r3
 8006508:	4b03      	ldr	r3, [pc, #12]	; (8006518 <HAL_IncTick+0x20>)
 800650a:	601a      	str	r2, [r3, #0]
}
 800650c:	46c0      	nop			; (mov r8, r8)
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	46c0      	nop			; (mov r8, r8)
 8006514:	200001b4 	.word	0x200001b4
 8006518:	20001590 	.word	0x20001590

0800651c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  return uwTick;
 8006520:	4b02      	ldr	r3, [pc, #8]	; (800652c <HAL_GetTick+0x10>)
 8006522:	681b      	ldr	r3, [r3, #0]
}
 8006524:	0018      	movs	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	20001590 	.word	0x20001590

08006530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006538:	f7ff fff0 	bl	800651c <HAL_GetTick>
 800653c:	0003      	movs	r3, r0
 800653e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	d005      	beq.n	8006556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <HAL_Delay+0x44>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	001a      	movs	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	189b      	adds	r3, r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	f7ff ffe0 	bl	800651c <HAL_GetTick>
 800655c:	0002      	movs	r2, r0
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	429a      	cmp	r2, r3
 8006566:	d8f7      	bhi.n	8006558 <HAL_Delay+0x28>
  {
  }
}
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	46bd      	mov	sp, r7
 800656e:	b004      	add	sp, #16
 8006570:	bd80      	pop	{r7, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	200001b4 	.word	0x200001b4

08006578 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006580:	230f      	movs	r3, #15
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e125      	b.n	80067e2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2234      	movs	r2, #52	; 0x34
 80065a8:	2100      	movs	r1, #0
 80065aa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7fd f8d6 	bl	8003760 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	2210      	movs	r2, #16
 80065ba:	4013      	ands	r3, r2
 80065bc:	d000      	beq.n	80065c0 <HAL_ADC_Init+0x48>
 80065be:	e103      	b.n	80067c8 <HAL_ADC_Init+0x250>
 80065c0:	230f      	movs	r3, #15
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d000      	beq.n	80065cc <HAL_ADC_Init+0x54>
 80065ca:	e0fd      	b.n	80067c8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2204      	movs	r2, #4
 80065d4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80065d6:	d000      	beq.n	80065da <HAL_ADC_Init+0x62>
 80065d8:	e0f6      	b.n	80067c8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	4a83      	ldr	r2, [pc, #524]	; (80067ec <HAL_ADC_Init+0x274>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	2202      	movs	r2, #2
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2203      	movs	r2, #3
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d112      	bne.n	800661e <HAL_ADC_Init+0xa6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	4013      	ands	r3, r2
 8006602:	2b01      	cmp	r3, #1
 8006604:	d009      	beq.n	800661a <HAL_ADC_Init+0xa2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	401a      	ands	r2, r3
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	429a      	cmp	r2, r3
 8006618:	d101      	bne.n	800661e <HAL_ADC_Init+0xa6>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <HAL_ADC_Init+0xa8>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d116      	bne.n	8006652 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2218      	movs	r2, #24
 800662c:	4393      	bics	r3, r2
 800662e:	0019      	movs	r1, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	0899      	lsrs	r1, r3, #2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4964      	ldr	r1, [pc, #400]	; (80067f0 <HAL_ADC_Init+0x278>)
 800665e:	400a      	ands	r2, r1
 8006660:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	7e1b      	ldrb	r3, [r3, #24]
 8006666:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	7e5b      	ldrb	r3, [r3, #25]
 800666c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800666e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	7e9b      	ldrb	r3, [r3, #26]
 8006674:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006676:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	2b01      	cmp	r3, #1
 800667e:	d002      	beq.n	8006686 <HAL_ADC_Init+0x10e>
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	015b      	lsls	r3, r3, #5
 8006684:	e000      	b.n	8006688 <HAL_ADC_Init+0x110>
 8006686:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006688:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800668e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d101      	bne.n	800669c <HAL_ADC_Init+0x124>
 8006698:	2304      	movs	r3, #4
 800669a:	e000      	b.n	800669e <HAL_ADC_Init+0x126>
 800669c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800669e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2124      	movs	r1, #36	; 0x24
 80066a4:	5c5b      	ldrb	r3, [r3, r1]
 80066a6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80066a8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7edb      	ldrb	r3, [r3, #27]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d115      	bne.n	80066e4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7e9b      	ldrb	r3, [r3, #26]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2280      	movs	r2, #128	; 0x80
 80066c4:	0252      	lsls	r2, r2, #9
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]
 80066ca:	e00b      	b.n	80066e4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	2220      	movs	r2, #32
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	2201      	movs	r2, #1
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	23c2      	movs	r3, #194	; 0xc2
 80066ea:	33ff      	adds	r3, #255	; 0xff
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d007      	beq.n	8006700 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80066f8:	4313      	orrs	r3, r2
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	430a      	orrs	r2, r1
 800670e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	055b      	lsls	r3, r3, #21
 8006718:	429a      	cmp	r2, r3
 800671a:	d01b      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d017      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	2b02      	cmp	r3, #2
 800672a:	d013      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	2b03      	cmp	r3, #3
 8006732:	d00f      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	2b04      	cmp	r3, #4
 800673a:	d00b      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	2b05      	cmp	r3, #5
 8006742:	d007      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	2b06      	cmp	r3, #6
 800674a:	d003      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	2b07      	cmp	r3, #7
 8006752:	d112      	bne.n	800677a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2107      	movs	r1, #7
 8006760:	438a      	bics	r2, r1
 8006762:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6959      	ldr	r1, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	2207      	movs	r2, #7
 8006770:	401a      	ands	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <HAL_ADC_Init+0x27c>)
 8006782:	4013      	ands	r3, r2
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	429a      	cmp	r2, r3
 8006788:	d10b      	bne.n	80067a2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	2203      	movs	r2, #3
 8006796:	4393      	bics	r3, r2
 8006798:	2201      	movs	r2, #1
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80067a0:	e01c      	b.n	80067dc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	2212      	movs	r2, #18
 80067a8:	4393      	bics	r3, r2
 80067aa:	2210      	movs	r2, #16
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	2201      	movs	r2, #1
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80067be:	230f      	movs	r3, #15
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80067c6:	e009      	b.n	80067dc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	2210      	movs	r2, #16
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80067d4:	230f      	movs	r3, #15
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80067dc:	230f      	movs	r3, #15
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	781b      	ldrb	r3, [r3, #0]
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b004      	add	sp, #16
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	fffffefd 	.word	0xfffffefd
 80067f0:	fffe0219 	.word	0xfffe0219
 80067f4:	833fffe7 	.word	0x833fffe7

080067f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80067f8:	b590      	push	{r4, r7, lr}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006800:	230f      	movs	r3, #15
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2204      	movs	r2, #4
 8006810:	4013      	ands	r3, r2
 8006812:	d138      	bne.n	8006886 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2234      	movs	r2, #52	; 0x34
 8006818:	5c9b      	ldrb	r3, [r3, r2]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_ADC_Start+0x2a>
 800681e:	2302      	movs	r3, #2
 8006820:	e038      	b.n	8006894 <HAL_ADC_Start+0x9c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2234      	movs	r2, #52	; 0x34
 8006826:	2101      	movs	r1, #1
 8006828:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	7e5b      	ldrb	r3, [r3, #25]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d007      	beq.n	8006842 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006832:	230f      	movs	r3, #15
 8006834:	18fc      	adds	r4, r7, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	0018      	movs	r0, r3
 800683a:	f000 fadf 	bl	8006dfc <ADC_Enable>
 800683e:	0003      	movs	r3, r0
 8006840:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006842:	230f      	movs	r3, #15
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d120      	bne.n	800688e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	4a12      	ldr	r2, [pc, #72]	; (800689c <HAL_ADC_Start+0xa4>)
 8006852:	4013      	ands	r3, r2
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	0052      	lsls	r2, r2, #1
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2234      	movs	r2, #52	; 0x34
 8006868:	2100      	movs	r1, #0
 800686a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	221c      	movs	r2, #28
 8006872:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2104      	movs	r1, #4
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	e003      	b.n	800688e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006886:	230f      	movs	r3, #15
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800688e:	230f      	movs	r3, #15
 8006890:	18fb      	adds	r3, r7, r3
 8006892:	781b      	ldrb	r3, [r3, #0]
}
 8006894:	0018      	movs	r0, r3
 8006896:	46bd      	mov	sp, r7
 8006898:	b005      	add	sp, #20
 800689a:	bd90      	pop	{r4, r7, pc}
 800689c:	fffff0fe 	.word	0xfffff0fe

080068a0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80068a0:	b5b0      	push	{r4, r5, r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068a8:	230f      	movs	r3, #15
 80068aa:	18fb      	adds	r3, r7, r3
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2234      	movs	r2, #52	; 0x34
 80068b4:	5c9b      	ldrb	r3, [r3, r2]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_ADC_Stop+0x1e>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e029      	b.n	8006912 <HAL_ADC_Stop+0x72>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2234      	movs	r2, #52	; 0x34
 80068c2:	2101      	movs	r1, #1
 80068c4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80068c6:	250f      	movs	r5, #15
 80068c8:	197c      	adds	r4, r7, r5
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	0018      	movs	r0, r3
 80068ce:	f000 fb8a 	bl	8006fe6 <ADC_ConversionStop>
 80068d2:	0003      	movs	r3, r0
 80068d4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80068d6:	197b      	adds	r3, r7, r5
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d112      	bne.n	8006904 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80068de:	197c      	adds	r4, r7, r5
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 fb0e 	bl	8006f04 <ADC_Disable>
 80068e8:	0003      	movs	r3, r0
 80068ea:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80068ec:	197b      	adds	r3, r7, r5
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d107      	bne.n	8006904 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	4a08      	ldr	r2, [pc, #32]	; (800691c <HAL_ADC_Stop+0x7c>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	2201      	movs	r2, #1
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2234      	movs	r2, #52	; 0x34
 8006908:	2100      	movs	r1, #0
 800690a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800690c:	230f      	movs	r3, #15
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	781b      	ldrb	r3, [r3, #0]
}
 8006912:	0018      	movs	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	b004      	add	sp, #16
 8006918:	bdb0      	pop	{r4, r5, r7, pc}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	fffffefe 	.word	0xfffffefe

08006920 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2b08      	cmp	r3, #8
 8006930:	d102      	bne.n	8006938 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006932:	2308      	movs	r3, #8
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e014      	b.n	8006962 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	4013      	ands	r3, r2
 8006942:	2b01      	cmp	r3, #1
 8006944:	d10b      	bne.n	800695e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	2220      	movs	r2, #32
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2234      	movs	r2, #52	; 0x34
 8006956:	2100      	movs	r1, #0
 8006958:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e071      	b.n	8006a42 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800695e:	230c      	movs	r3, #12
 8006960:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006962:	f7ff fddb 	bl	800651c <HAL_GetTick>
 8006966:	0003      	movs	r3, r0
 8006968:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800696a:	e01f      	b.n	80069ac <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	3301      	adds	r3, #1
 8006970:	d01c      	beq.n	80069ac <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <HAL_ADC_PollForConversion+0x68>
 8006978:	f7ff fdd0 	bl	800651c <HAL_GetTick>
 800697c:	0002      	movs	r2, r0
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d211      	bcs.n	80069ac <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4013      	ands	r3, r2
 8006992:	d10b      	bne.n	80069ac <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	2204      	movs	r2, #4
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2234      	movs	r2, #52	; 0x34
 80069a4:	2100      	movs	r1, #0
 80069a6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e04a      	b.n	8006a42 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4013      	ands	r3, r2
 80069b6:	d0d9      	beq.n	800696c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	2280      	movs	r2, #128	; 0x80
 80069be:	0092      	lsls	r2, r2, #2
 80069c0:	431a      	orrs	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	23c0      	movs	r3, #192	; 0xc0
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	4013      	ands	r3, r2
 80069d2:	d12d      	bne.n	8006a30 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d129      	bne.n	8006a30 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d122      	bne.n	8006a30 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2204      	movs	r2, #4
 80069f2:	4013      	ands	r3, r2
 80069f4:	d110      	bne.n	8006a18 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	210c      	movs	r1, #12
 8006a02:	438a      	bics	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	4a10      	ldr	r2, [pc, #64]	; (8006a4c <HAL_ADC_PollForConversion+0x12c>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2201      	movs	r2, #1
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
 8006a16:	e00b      	b.n	8006a30 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a28:	2201      	movs	r2, #1
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7e1b      	ldrb	r3, [r3, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	220c      	movs	r2, #12
 8006a3e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b004      	add	sp, #16
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	fffffefe 	.word	0xfffffefe

08006a50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006a5e:	0018      	movs	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b002      	add	sp, #8
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2204      	movs	r2, #4
 8006a84:	4013      	ands	r3, r2
 8006a86:	d003      	beq.n	8006a90 <HAL_ADC_IRQHandler+0x28>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d107      	bne.n	8006aa0 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2208      	movs	r2, #8
 8006a94:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006a96:	d049      	beq.n	8006b2c <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d045      	beq.n	8006b2c <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	2210      	movs	r2, #16
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d106      	bne.n	8006ab8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	2280      	movs	r2, #128	; 0x80
 8006ab0:	0092      	lsls	r2, r2, #2
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	23c0      	movs	r3, #192	; 0xc0
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	d12a      	bne.n	8006b1c <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d126      	bne.n	8006b1c <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d022      	beq.n	8006b1c <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2204      	movs	r2, #4
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d110      	bne.n	8006b04 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	210c      	movs	r1, #12
 8006aee:	438a      	bics	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	4a2d      	ldr	r2, [pc, #180]	; (8006bac <HAL_ADC_IRQHandler+0x144>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	2201      	movs	r2, #1
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
 8006b02:	e00b      	b.n	8006b1c <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	2220      	movs	r2, #32
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b14:	2201      	movs	r2, #1
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f000 f846 	bl	8006bb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	220c      	movs	r2, #12
 8006b2a:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2280      	movs	r2, #128	; 0x80
 8006b30:	4013      	ands	r3, r2
 8006b32:	d012      	beq.n	8006b5a <HAL_ADC_IRQHandler+0xf2>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d00e      	beq.n	8006b5a <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	2280      	movs	r2, #128	; 0x80
 8006b42:	0252      	lsls	r2, r2, #9
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f000 f837 	bl	8006bc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2280      	movs	r2, #128	; 0x80
 8006b58:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2210      	movs	r2, #16
 8006b5e:	4013      	ands	r3, r2
 8006b60:	d020      	beq.n	8006ba4 <HAL_ADC_IRQHandler+0x13c>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2210      	movs	r2, #16
 8006b66:	4013      	ands	r3, r2
 8006b68:	d01c      	beq.n	8006ba4 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d006      	beq.n	8006b80 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d10d      	bne.n	8006b9c <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b84:	2202      	movs	r2, #2
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2210      	movs	r2, #16
 8006b92:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	0018      	movs	r0, r3
 8006b98:	f000 f81a 	bl	8006bd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	601a      	str	r2, [r3, #0]
  }

}
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b004      	add	sp, #16
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	fffffefe 	.word	0xfffffefe

08006bb0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006bb8:	46c0      	nop			; (mov r8, r8)
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b002      	add	sp, #8
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8006bc8:	46c0      	nop			; (mov r8, r8)
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b002      	add	sp, #8
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006bd8:	46c0      	nop			; (mov r8, r8)
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	b002      	add	sp, #8
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bea:	230f      	movs	r3, #15
 8006bec:	18fb      	adds	r3, r7, r3
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	055b      	lsls	r3, r3, #21
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d011      	beq.n	8006c26 <HAL_ADC_ConfigChannel+0x46>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d00d      	beq.n	8006c26 <HAL_ADC_ConfigChannel+0x46>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d009      	beq.n	8006c26 <HAL_ADC_ConfigChannel+0x46>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d005      	beq.n	8006c26 <HAL_ADC_ConfigChannel+0x46>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d001      	beq.n	8006c26 <HAL_ADC_ConfigChannel+0x46>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2234      	movs	r2, #52	; 0x34
 8006c2a:	5c9b      	ldrb	r3, [r3, r2]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_ADC_ConfigChannel+0x54>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e0d0      	b.n	8006dd6 <HAL_ADC_ConfigChannel+0x1f6>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2234      	movs	r2, #52	; 0x34
 8006c38:	2101      	movs	r1, #1
 8006c3a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2204      	movs	r2, #4
 8006c44:	4013      	ands	r3, r2
 8006c46:	d000      	beq.n	8006c4a <HAL_ADC_ConfigChannel+0x6a>
 8006c48:	e0b4      	b.n	8006db4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4a64      	ldr	r2, [pc, #400]	; (8006de0 <HAL_ADC_ConfigChannel+0x200>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <HAL_ADC_ConfigChannel+0x76>
 8006c54:	e082      	b.n	8006d5c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2201      	movs	r2, #1
 8006c62:	409a      	lsls	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	055b      	lsls	r3, r3, #21
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d037      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d033      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d02f      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d02b      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d027      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	2b05      	cmp	r3, #5
 8006c9e:	d023      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca4:	2b06      	cmp	r3, #6
 8006ca6:	d01f      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	2b07      	cmp	r3, #7
 8006cae:	d01b      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	2107      	movs	r1, #7
 8006cbc:	400b      	ands	r3, r1
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d012      	beq.n	8006ce8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2107      	movs	r1, #7
 8006cce:	438a      	bics	r2, r1
 8006cd0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6959      	ldr	r1, [r3, #20]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	2207      	movs	r2, #7
 8006cde:	401a      	ands	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d007      	beq.n	8006d00 <HAL_ADC_ConfigChannel+0x120>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b11      	cmp	r3, #17
 8006cf6:	d003      	beq.n	8006d00 <HAL_ADC_ConfigChannel+0x120>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b12      	cmp	r3, #18
 8006cfe:	d163      	bne.n	8006dc8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006d00:	4b38      	ldr	r3, [pc, #224]	; (8006de4 <HAL_ADC_ConfigChannel+0x204>)
 8006d02:	6819      	ldr	r1, [r3, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d009      	beq.n	8006d20 <HAL_ADC_ConfigChannel+0x140>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b11      	cmp	r3, #17
 8006d12:	d102      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x13a>
 8006d14:	2380      	movs	r3, #128	; 0x80
 8006d16:	03db      	lsls	r3, r3, #15
 8006d18:	e004      	b.n	8006d24 <HAL_ADC_ConfigChannel+0x144>
 8006d1a:	2380      	movs	r3, #128	; 0x80
 8006d1c:	045b      	lsls	r3, r3, #17
 8006d1e:	e001      	b.n	8006d24 <HAL_ADC_ConfigChannel+0x144>
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	041b      	lsls	r3, r3, #16
 8006d24:	4a2f      	ldr	r2, [pc, #188]	; (8006de4 <HAL_ADC_ConfigChannel+0x204>)
 8006d26:	430b      	orrs	r3, r1
 8006d28:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d14a      	bne.n	8006dc8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d32:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <HAL_ADC_ConfigChannel+0x208>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	492d      	ldr	r1, [pc, #180]	; (8006dec <HAL_ADC_ConfigChannel+0x20c>)
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7f9 f9e5 	bl	8000108 <__udivsi3>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	001a      	movs	r2, r3
 8006d42:	0013      	movs	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	189b      	adds	r3, r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006d4c:	e002      	b.n	8006d54 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f9      	bne.n	8006d4e <HAL_ADC_ConfigChannel+0x16e>
 8006d5a:	e035      	b.n	8006dc8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2101      	movs	r1, #1
 8006d68:	4099      	lsls	r1, r3
 8006d6a:	000b      	movs	r3, r1
 8006d6c:	43d9      	mvns	r1, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	400a      	ands	r2, r1
 8006d74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d007      	beq.n	8006d8e <HAL_ADC_ConfigChannel+0x1ae>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b11      	cmp	r3, #17
 8006d84:	d003      	beq.n	8006d8e <HAL_ADC_ConfigChannel+0x1ae>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b12      	cmp	r3, #18
 8006d8c:	d11c      	bne.n	8006dc8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006d8e:	4b15      	ldr	r3, [pc, #84]	; (8006de4 <HAL_ADC_ConfigChannel+0x204>)
 8006d90:	6819      	ldr	r1, [r3, #0]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b10      	cmp	r3, #16
 8006d98:	d007      	beq.n	8006daa <HAL_ADC_ConfigChannel+0x1ca>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b11      	cmp	r3, #17
 8006da0:	d101      	bne.n	8006da6 <HAL_ADC_ConfigChannel+0x1c6>
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <HAL_ADC_ConfigChannel+0x210>)
 8006da4:	e002      	b.n	8006dac <HAL_ADC_ConfigChannel+0x1cc>
 8006da6:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <HAL_ADC_ConfigChannel+0x214>)
 8006da8:	e000      	b.n	8006dac <HAL_ADC_ConfigChannel+0x1cc>
 8006daa:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <HAL_ADC_ConfigChannel+0x218>)
 8006dac:	4a0d      	ldr	r2, [pc, #52]	; (8006de4 <HAL_ADC_ConfigChannel+0x204>)
 8006dae:	400b      	ands	r3, r1
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e009      	b.n	8006dc8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	2220      	movs	r2, #32
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006dc0:	230f      	movs	r3, #15
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2234      	movs	r2, #52	; 0x34
 8006dcc:	2100      	movs	r1, #0
 8006dce:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006dd0:	230f      	movs	r3, #15
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	781b      	ldrb	r3, [r3, #0]
}
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b004      	add	sp, #16
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	00001001 	.word	0x00001001
 8006de4:	40012708 	.word	0x40012708
 8006de8:	2000003c 	.word	0x2000003c
 8006dec:	000f4240 	.word	0x000f4240
 8006df0:	ffbfffff 	.word	0xffbfffff
 8006df4:	feffffff 	.word	0xfeffffff
 8006df8:	ff7fffff 	.word	0xff7fffff

08006dfc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2203      	movs	r2, #3
 8006e14:	4013      	ands	r3, r2
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d112      	bne.n	8006e40 <ADC_Enable+0x44>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2201      	movs	r2, #1
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d009      	beq.n	8006e3c <ADC_Enable+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	2380      	movs	r3, #128	; 0x80
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	401a      	ands	r2, r3
 8006e34:	2380      	movs	r3, #128	; 0x80
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d101      	bne.n	8006e40 <ADC_Enable+0x44>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <ADC_Enable+0x46>
 8006e40:	2300      	movs	r3, #0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d152      	bne.n	8006eec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <ADC_Enable+0xfc>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d00d      	beq.n	8006e6e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	2210      	movs	r2, #16
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	2201      	movs	r2, #1
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e03f      	b.n	8006eee <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2101      	movs	r1, #1
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e7e:	4b1f      	ldr	r3, [pc, #124]	; (8006efc <ADC_Enable+0x100>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	491f      	ldr	r1, [pc, #124]	; (8006f00 <ADC_Enable+0x104>)
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7f9 f93f 	bl	8000108 <__udivsi3>
 8006e8a:	0003      	movs	r3, r0
 8006e8c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006e8e:	e002      	b.n	8006e96 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1f9      	bne.n	8006e90 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e9c:	f7ff fb3e 	bl	800651c <HAL_GetTick>
 8006ea0:	0003      	movs	r3, r0
 8006ea2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006ea4:	e01b      	b.n	8006ede <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ea6:	f7ff fb39 	bl	800651c <HAL_GetTick>
 8006eaa:	0002      	movs	r2, r0
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d914      	bls.n	8006ede <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d00d      	beq.n	8006ede <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	2210      	movs	r2, #16
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e007      	b.n	8006eee <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d1dc      	bne.n	8006ea6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	0018      	movs	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b004      	add	sp, #16
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	80000017 	.word	0x80000017
 8006efc:	2000003c 	.word	0x2000003c
 8006f00:	000f4240 	.word	0x000f4240

08006f04 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2203      	movs	r2, #3
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d112      	bne.n	8006f44 <ADC_Disable+0x40>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2201      	movs	r2, #1
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d009      	beq.n	8006f40 <ADC_Disable+0x3c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	2380      	movs	r3, #128	; 0x80
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	401a      	ands	r2, r3
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d101      	bne.n	8006f44 <ADC_Disable+0x40>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <ADC_Disable+0x42>
 8006f44:	2300      	movs	r3, #0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d048      	beq.n	8006fdc <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	2205      	movs	r2, #5
 8006f52:	4013      	ands	r3, r2
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d110      	bne.n	8006f7a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2102      	movs	r1, #2
 8006f64:	430a      	orrs	r2, r1
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006f70:	f7ff fad4 	bl	800651c <HAL_GetTick>
 8006f74:	0003      	movs	r3, r0
 8006f76:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006f78:	e029      	b.n	8006fce <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	2210      	movs	r2, #16
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e023      	b.n	8006fde <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006f96:	f7ff fac1 	bl	800651c <HAL_GetTick>
 8006f9a:	0002      	movs	r2, r0
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d914      	bls.n	8006fce <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2201      	movs	r2, #1
 8006fac:	4013      	ands	r3, r2
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d10d      	bne.n	8006fce <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e007      	b.n	8006fde <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d0dc      	beq.n	8006f96 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	0018      	movs	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b004      	add	sp, #16
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d03a      	beq.n	8007074 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2204      	movs	r2, #4
 8007006:	4013      	ands	r3, r2
 8007008:	2b04      	cmp	r3, #4
 800700a:	d10d      	bne.n	8007028 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	2202      	movs	r2, #2
 8007014:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007016:	d107      	bne.n	8007028 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2110      	movs	r1, #16
 8007024:	430a      	orrs	r2, r1
 8007026:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007028:	f7ff fa78 	bl	800651c <HAL_GetTick>
 800702c:	0003      	movs	r3, r0
 800702e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007030:	e01a      	b.n	8007068 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007032:	f7ff fa73 	bl	800651c <HAL_GetTick>
 8007036:	0002      	movs	r2, r0
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d913      	bls.n	8007068 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2204      	movs	r2, #4
 8007048:	4013      	ands	r3, r2
 800704a:	d00d      	beq.n	8007068 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	2210      	movs	r2, #16
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705c:	2201      	movs	r2, #1
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e006      	b.n	8007076 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2204      	movs	r2, #4
 8007070:	4013      	ands	r3, r2
 8007072:	d1de      	bne.n	8007032 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	0018      	movs	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	b004      	add	sp, #16
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007088:	2317      	movs	r3, #23
 800708a:	18fb      	adds	r3, r7, r3
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2234      	movs	r2, #52	; 0x34
 800709c:	5c9b      	ldrb	r3, [r3, r2]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_ADCEx_Calibration_Start+0x26>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e08d      	b.n	80071c2 <HAL_ADCEx_Calibration_Start+0x142>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2234      	movs	r2, #52	; 0x34
 80070aa:	2101      	movs	r1, #1
 80070ac:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2203      	movs	r2, #3
 80070b6:	4013      	ands	r3, r2
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d112      	bne.n	80070e2 <HAL_ADCEx_Calibration_Start+0x62>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2201      	movs	r2, #1
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d009      	beq.n	80070de <HAL_ADCEx_Calibration_Start+0x5e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	021b      	lsls	r3, r3, #8
 80070d4:	401a      	ands	r2, r3
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	021b      	lsls	r3, r3, #8
 80070da:	429a      	cmp	r2, r3
 80070dc:	d101      	bne.n	80070e2 <HAL_ADCEx_Calibration_Start+0x62>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <HAL_ADCEx_Calibration_Start+0x64>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d15b      	bne.n	80071a0 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	4a37      	ldr	r2, [pc, #220]	; (80071cc <HAL_ADCEx_Calibration_Start+0x14c>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	2202      	movs	r2, #2
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	2203      	movs	r2, #3
 8007100:	4013      	ands	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2103      	movs	r1, #3
 8007110:	438a      	bics	r2, r1
 8007112:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2180      	movs	r1, #128	; 0x80
 8007120:	0609      	lsls	r1, r1, #24
 8007122:	430a      	orrs	r2, r1
 8007124:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8007126:	f7ff f9f9 	bl	800651c <HAL_GetTick>
 800712a:	0003      	movs	r3, r0
 800712c:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800712e:	e01d      	b.n	800716c <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8007130:	f7ff f9f4 	bl	800651c <HAL_GetTick>
 8007134:	0002      	movs	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d916      	bls.n	800716c <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	0fdb      	lsrs	r3, r3, #31
 8007146:	07da      	lsls	r2, r3, #31
 8007148:	2380      	movs	r3, #128	; 0x80
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	429a      	cmp	r2, r3
 800714e:	d10d      	bne.n	800716c <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	2212      	movs	r2, #18
 8007156:	4393      	bics	r3, r2
 8007158:	2210      	movs	r2, #16
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2234      	movs	r2, #52	; 0x34
 8007164:	2100      	movs	r1, #0
 8007166:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e02a      	b.n	80071c2 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	0fdb      	lsrs	r3, r3, #31
 8007174:	07da      	lsls	r2, r3, #31
 8007176:	2380      	movs	r3, #128	; 0x80
 8007178:	061b      	lsls	r3, r3, #24
 800717a:	429a      	cmp	r2, r3
 800717c:	d0d8      	beq.n	8007130 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68d9      	ldr	r1, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	430a      	orrs	r2, r1
 800718c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	2203      	movs	r2, #3
 8007194:	4393      	bics	r3, r2
 8007196:	2201      	movs	r2, #1
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	639a      	str	r2, [r3, #56]	; 0x38
 800719e:	e009      	b.n	80071b4 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	2220      	movs	r2, #32
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80071ac:	2317      	movs	r3, #23
 80071ae:	18fb      	adds	r3, r7, r3
 80071b0:	2201      	movs	r2, #1
 80071b2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2234      	movs	r2, #52	; 0x34
 80071b8:	2100      	movs	r1, #0
 80071ba:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80071bc:	2317      	movs	r3, #23
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	781b      	ldrb	r3, [r3, #0]
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b006      	add	sp, #24
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	fffffefd 	.word	0xfffffefd

080071d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e0f0      	b.n	80073c4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	5c9b      	ldrb	r3, [r3, r2]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d103      	bne.n	80071f6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	0018      	movs	r0, r3
 80071f2:	f7fc fb03 	bl	80037fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2101      	movs	r1, #1
 8007202:	430a      	orrs	r2, r1
 8007204:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007206:	f7ff f989 	bl	800651c <HAL_GetTick>
 800720a:	0003      	movs	r3, r0
 800720c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800720e:	e013      	b.n	8007238 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007210:	f7ff f984 	bl	800651c <HAL_GetTick>
 8007214:	0002      	movs	r2, r0
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b0a      	cmp	r3, #10
 800721c:	d90c      	bls.n	8007238 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	2280      	movs	r2, #128	; 0x80
 8007224:	0292      	lsls	r2, r2, #10
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	2105      	movs	r1, #5
 8007232:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e0c5      	b.n	80073c4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	4013      	ands	r3, r2
 8007242:	d0e5      	beq.n	8007210 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2102      	movs	r1, #2
 8007250:	438a      	bics	r2, r1
 8007252:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007254:	f7ff f962 	bl	800651c <HAL_GetTick>
 8007258:	0003      	movs	r3, r0
 800725a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800725c:	e013      	b.n	8007286 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800725e:	f7ff f95d 	bl	800651c <HAL_GetTick>
 8007262:	0002      	movs	r2, r0
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b0a      	cmp	r3, #10
 800726a:	d90c      	bls.n	8007286 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2280      	movs	r2, #128	; 0x80
 8007272:	0292      	lsls	r2, r2, #10
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	2105      	movs	r1, #5
 8007280:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e09e      	b.n	80073c4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	4013      	ands	r3, r2
 8007290:	d1e5      	bne.n	800725e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7e1b      	ldrb	r3, [r3, #24]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d108      	bne.n	80072ac <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2180      	movs	r1, #128	; 0x80
 80072a6:	430a      	orrs	r2, r1
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e007      	b.n	80072bc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2180      	movs	r1, #128	; 0x80
 80072b8:	438a      	bics	r2, r1
 80072ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	7e5b      	ldrb	r3, [r3, #25]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d108      	bne.n	80072d6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2140      	movs	r1, #64	; 0x40
 80072d0:	430a      	orrs	r2, r1
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e007      	b.n	80072e6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	438a      	bics	r2, r1
 80072e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7e9b      	ldrb	r3, [r3, #26]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d108      	bne.n	8007300 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2120      	movs	r1, #32
 80072fa:	430a      	orrs	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e007      	b.n	8007310 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2120      	movs	r1, #32
 800730c:	438a      	bics	r2, r1
 800730e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7edb      	ldrb	r3, [r3, #27]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d108      	bne.n	800732a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2110      	movs	r1, #16
 8007324:	438a      	bics	r2, r1
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e007      	b.n	800733a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2110      	movs	r1, #16
 8007336:	430a      	orrs	r2, r1
 8007338:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7f1b      	ldrb	r3, [r3, #28]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d108      	bne.n	8007354 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2108      	movs	r1, #8
 800734e:	430a      	orrs	r2, r1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e007      	b.n	8007364 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2108      	movs	r1, #8
 8007360:	438a      	bics	r2, r1
 8007362:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7f5b      	ldrb	r3, [r3, #29]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d108      	bne.n	800737e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2104      	movs	r1, #4
 8007378:	430a      	orrs	r2, r1
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e007      	b.n	800738e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2104      	movs	r1, #4
 800738a:	438a      	bics	r2, r1
 800738c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	0011      	movs	r1, r2
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	1e5a      	subs	r2, r3, #1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	2101      	movs	r1, #1
 80073c0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	0018      	movs	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b004      	add	sp, #16
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80073dc:	2013      	movs	r0, #19
 80073de:	183b      	adds	r3, r7, r0
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	2120      	movs	r1, #32
 80073e4:	5c52      	ldrb	r2, [r2, r1]
 80073e6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80073e8:	0002      	movs	r2, r0
 80073ea:	18bb      	adds	r3, r7, r2
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d004      	beq.n	80073fc <HAL_CAN_ConfigFilter+0x30>
 80073f2:	18bb      	adds	r3, r7, r2
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d000      	beq.n	80073fc <HAL_CAN_ConfigFilter+0x30>
 80073fa:	e0cd      	b.n	8007598 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	2380      	movs	r3, #128	; 0x80
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	58d3      	ldr	r3, [r2, r3]
 8007404:	2201      	movs	r2, #1
 8007406:	431a      	orrs	r2, r3
 8007408:	0011      	movs	r1, r2
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	2380      	movs	r3, #128	; 0x80
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	221f      	movs	r2, #31
 8007418:	4013      	ands	r3, r2
 800741a:	2201      	movs	r2, #1
 800741c:	409a      	lsls	r2, r3
 800741e:	0013      	movs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	2387      	movs	r3, #135	; 0x87
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	58d3      	ldr	r3, [r2, r3]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	43d2      	mvns	r2, r2
 800742e:	401a      	ands	r2, r3
 8007430:	0011      	movs	r1, r2
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	2387      	movs	r3, #135	; 0x87
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d129      	bne.n	8007496 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	2383      	movs	r3, #131	; 0x83
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	58d3      	ldr	r3, [r2, r3]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	43d2      	mvns	r2, r2
 800744e:	401a      	ands	r2, r3
 8007450:	0011      	movs	r1, r2
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	2383      	movs	r3, #131	; 0x83
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800746c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	3248      	adds	r2, #72	; 0x48
 8007472:	00d2      	lsls	r2, r2, #3
 8007474:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007488:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800748a:	6979      	ldr	r1, [r7, #20]
 800748c:	3348      	adds	r3, #72	; 0x48
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	18cb      	adds	r3, r1, r3
 8007492:	3304      	adds	r3, #4
 8007494:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d128      	bne.n	80074f0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	2383      	movs	r3, #131	; 0x83
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	58d2      	ldr	r2, [r2, r3]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	431a      	orrs	r2, r3
 80074aa:	0011      	movs	r1, r2
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	2383      	movs	r3, #131	; 0x83
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80074c6:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3248      	adds	r2, #72	; 0x48
 80074cc:	00d2      	lsls	r2, r2, #3
 80074ce:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	041b      	lsls	r3, r3, #16
 80074dc:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80074e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80074e4:	6979      	ldr	r1, [r7, #20]
 80074e6:	3348      	adds	r3, #72	; 0x48
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	18cb      	adds	r3, r1, r3
 80074ec:	3304      	adds	r3, #4
 80074ee:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10c      	bne.n	8007512 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	2381      	movs	r3, #129	; 0x81
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	58d3      	ldr	r3, [r2, r3]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	43d2      	mvns	r2, r2
 8007504:	401a      	ands	r2, r3
 8007506:	0011      	movs	r1, r2
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	2381      	movs	r3, #129	; 0x81
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	50d1      	str	r1, [r2, r3]
 8007510:	e00a      	b.n	8007528 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	2381      	movs	r3, #129	; 0x81
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	58d2      	ldr	r2, [r2, r3]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	431a      	orrs	r2, r3
 800751e:	0011      	movs	r1, r2
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	2381      	movs	r3, #129	; 0x81
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10c      	bne.n	800754a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	2385      	movs	r3, #133	; 0x85
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	58d3      	ldr	r3, [r2, r3]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	43d2      	mvns	r2, r2
 800753c:	401a      	ands	r2, r3
 800753e:	0011      	movs	r1, r2
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	2385      	movs	r3, #133	; 0x85
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	50d1      	str	r1, [r2, r3]
 8007548:	e00a      	b.n	8007560 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	2385      	movs	r3, #133	; 0x85
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	58d2      	ldr	r2, [r2, r3]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	431a      	orrs	r2, r3
 8007556:	0011      	movs	r1, r2
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	2385      	movs	r3, #133	; 0x85
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d10a      	bne.n	800757e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	2387      	movs	r3, #135	; 0x87
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	58d2      	ldr	r2, [r2, r3]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	431a      	orrs	r2, r3
 8007574:	0011      	movs	r1, r2
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	2387      	movs	r3, #135	; 0x87
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	2380      	movs	r3, #128	; 0x80
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	58d3      	ldr	r3, [r2, r3]
 8007586:	2201      	movs	r2, #1
 8007588:	4393      	bics	r3, r2
 800758a:	0019      	movs	r1, r3
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	2380      	movs	r3, #128	; 0x80
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	e007      	b.n	80075a8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	2280      	movs	r2, #128	; 0x80
 800759e:	02d2      	lsls	r2, r2, #11
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
  }
}
 80075a8:	0018      	movs	r0, r3
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b006      	add	sp, #24
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	5c9b      	ldrb	r3, [r3, r2]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d12f      	bne.n	8007624 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	2102      	movs	r1, #2
 80075ca:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2101      	movs	r1, #1
 80075d8:	438a      	bics	r2, r1
 80075da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075dc:	f7fe ff9e 	bl	800651c <HAL_GetTick>
 80075e0:	0003      	movs	r3, r0
 80075e2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80075e4:	e013      	b.n	800760e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075e6:	f7fe ff99 	bl	800651c <HAL_GetTick>
 80075ea:	0002      	movs	r2, r0
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b0a      	cmp	r3, #10
 80075f2:	d90c      	bls.n	800760e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2280      	movs	r2, #128	; 0x80
 80075fa:	0292      	lsls	r2, r2, #10
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	2105      	movs	r1, #5
 8007608:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e012      	b.n	8007634 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	4013      	ands	r3, r2
 8007618:	d1e5      	bne.n	80075e6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	e007      	b.n	8007634 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2280      	movs	r2, #128	; 0x80
 800762a:	0312      	lsls	r2, r2, #12
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
  }
}
 8007634:	0018      	movs	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	b004      	add	sp, #16
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800764a:	201f      	movs	r0, #31
 800764c:	183b      	adds	r3, r7, r0
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	2120      	movs	r1, #32
 8007652:	5c52      	ldrb	r2, [r2, r1]
 8007654:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800765e:	183b      	adds	r3, r7, r0
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d004      	beq.n	8007670 <HAL_CAN_AddTxMessage+0x34>
 8007666:	183b      	adds	r3, r7, r0
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d000      	beq.n	8007670 <HAL_CAN_AddTxMessage+0x34>
 800766e:	e0ab      	b.n	80077c8 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	2380      	movs	r3, #128	; 0x80
 8007674:	04db      	lsls	r3, r3, #19
 8007676:	4013      	ands	r3, r2
 8007678:	d10a      	bne.n	8007690 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	051b      	lsls	r3, r3, #20
 8007680:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007682:	d105      	bne.n	8007690 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	2380      	movs	r3, #128	; 0x80
 8007688:	055b      	lsls	r3, r3, #21
 800768a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800768c:	d100      	bne.n	8007690 <HAL_CAN_AddTxMessage+0x54>
 800768e:	e092      	b.n	80077b6 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	0e1b      	lsrs	r3, r3, #24
 8007694:	2203      	movs	r2, #3
 8007696:	4013      	ands	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800769a:	2201      	movs	r2, #1
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	409a      	lsls	r2, r3
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10c      	bne.n	80076c6 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4311      	orrs	r1, r2
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	3218      	adds	r2, #24
 80076c0:	0112      	lsls	r2, r2, #4
 80076c2:	50d1      	str	r1, [r2, r3]
 80076c4:	e00f      	b.n	80076e6 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80076d0:	431a      	orrs	r2, r3
 80076d2:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80076dc:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	3218      	adds	r2, #24
 80076e2:	0112      	lsls	r2, r2, #4
 80076e4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6819      	ldr	r1, [r3, #0]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	691a      	ldr	r2, [r3, #16]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	3318      	adds	r3, #24
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	18cb      	adds	r3, r1, r3
 80076f6:	3304      	adds	r3, #4
 80076f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	7d1b      	ldrb	r3, [r3, #20]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d112      	bne.n	8007728 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	3318      	adds	r3, #24
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	18d3      	adds	r3, r2, r3
 800770e:	3304      	adds	r3, #4
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6819      	ldr	r1, [r3, #0]
 8007716:	2380      	movs	r3, #128	; 0x80
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	431a      	orrs	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	3318      	adds	r3, #24
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	18cb      	adds	r3, r1, r3
 8007724:	3304      	adds	r3, #4
 8007726:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3307      	adds	r3, #7
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	061a      	lsls	r2, r3, #24
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3306      	adds	r3, #6
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	041b      	lsls	r3, r3, #16
 8007738:	431a      	orrs	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3305      	adds	r3, #5
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3304      	adds	r3, #4
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	0019      	movs	r1, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	6979      	ldr	r1, [r7, #20]
 8007754:	23c6      	movs	r3, #198	; 0xc6
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	0109      	lsls	r1, r1, #4
 800775a:	1841      	adds	r1, r0, r1
 800775c:	18cb      	adds	r3, r1, r3
 800775e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3303      	adds	r3, #3
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	061a      	lsls	r2, r3, #24
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3302      	adds	r3, #2
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	041b      	lsls	r3, r3, #16
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3301      	adds	r3, #1
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	0019      	movs	r1, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	6979      	ldr	r1, [r7, #20]
 800778a:	23c4      	movs	r3, #196	; 0xc4
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	0109      	lsls	r1, r1, #4
 8007790:	1841      	adds	r1, r0, r1
 8007792:	18cb      	adds	r3, r1, r3
 8007794:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	3218      	adds	r2, #24
 800779e:	0112      	lsls	r2, r2, #4
 80077a0:	58d2      	ldr	r2, [r2, r3]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2101      	movs	r1, #1
 80077a8:	4311      	orrs	r1, r2
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	3218      	adds	r2, #24
 80077ae:	0112      	lsls	r2, r2, #4
 80077b0:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	e010      	b.n	80077d8 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	2280      	movs	r2, #128	; 0x80
 80077bc:	0392      	lsls	r2, r2, #14
 80077be:	431a      	orrs	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e007      	b.n	80077d8 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	2280      	movs	r2, #128	; 0x80
 80077ce:	02d2      	lsls	r2, r2, #11
 80077d0:	431a      	orrs	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
  }
}
 80077d8:	0018      	movs	r0, r3
 80077da:	46bd      	mov	sp, r7
 80077dc:	b008      	add	sp, #32
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80077ec:	200b      	movs	r0, #11
 80077ee:	183b      	adds	r3, r7, r0
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	2120      	movs	r1, #32
 80077f4:	5c52      	ldrb	r2, [r2, r1]
 80077f6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80077f8:	0002      	movs	r2, r0
 80077fa:	18bb      	adds	r3, r7, r2
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d003      	beq.n	800780a <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 8007802:	18bb      	adds	r3, r7, r2
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d11d      	bne.n	8007846 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	2380      	movs	r3, #128	; 0x80
 8007812:	04db      	lsls	r3, r3, #19
 8007814:	4013      	ands	r3, r2
 8007816:	d002      	beq.n	800781e <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3301      	adds	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	2380      	movs	r3, #128	; 0x80
 8007826:	051b      	lsls	r3, r3, #20
 8007828:	4013      	ands	r3, r2
 800782a:	d002      	beq.n	8007832 <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	2380      	movs	r3, #128	; 0x80
 800783a:	055b      	lsls	r3, r3, #21
 800783c:	4013      	ands	r3, r2
 800783e:	d002      	beq.n	8007846 <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3301      	adds	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007846:	68fb      	ldr	r3, [r7, #12]
}
 8007848:	0018      	movs	r0, r3
 800784a:	46bd      	mov	sp, r7
 800784c:	b004      	add	sp, #16
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800785e:	2017      	movs	r0, #23
 8007860:	183b      	adds	r3, r7, r0
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	2120      	movs	r1, #32
 8007866:	5c52      	ldrb	r2, [r2, r1]
 8007868:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800786a:	0002      	movs	r2, r0
 800786c:	18bb      	adds	r3, r7, r2
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d004      	beq.n	800787e <HAL_CAN_GetRxMessage+0x2e>
 8007874:	18bb      	adds	r3, r7, r2
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b02      	cmp	r3, #2
 800787a:	d000      	beq.n	800787e <HAL_CAN_GetRxMessage+0x2e>
 800787c:	e107      	b.n	8007a8e <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10e      	bne.n	80078a2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2203      	movs	r2, #3
 800788c:	4013      	ands	r3, r2
 800788e:	d117      	bne.n	80078c0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	2280      	movs	r2, #128	; 0x80
 8007896:	0392      	lsls	r2, r2, #14
 8007898:	431a      	orrs	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e0fd      	b.n	8007a9e <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2203      	movs	r2, #3
 80078aa:	4013      	ands	r3, r2
 80078ac:	d108      	bne.n	80078c0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	0392      	lsls	r2, r2, #14
 80078b6:	431a      	orrs	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0ee      	b.n	8007a9e <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	321b      	adds	r2, #27
 80078c8:	0112      	lsls	r2, r2, #4
 80078ca:	58d3      	ldr	r3, [r2, r3]
 80078cc:	2204      	movs	r2, #4
 80078ce:	401a      	ands	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10b      	bne.n	80078f4 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	321b      	adds	r2, #27
 80078e4:	0112      	lsls	r2, r2, #4
 80078e6:	58d3      	ldr	r3, [r2, r3]
 80078e8:	0d5b      	lsrs	r3, r3, #21
 80078ea:	055b      	lsls	r3, r3, #21
 80078ec:	0d5a      	lsrs	r2, r3, #21
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e00a      	b.n	800790a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	321b      	adds	r2, #27
 80078fc:	0112      	lsls	r2, r2, #4
 80078fe:	58d3      	ldr	r3, [r2, r3]
 8007900:	08db      	lsrs	r3, r3, #3
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	321b      	adds	r2, #27
 8007912:	0112      	lsls	r2, r2, #4
 8007914:	58d3      	ldr	r3, [r2, r3]
 8007916:	2202      	movs	r2, #2
 8007918:	401a      	ands	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	331b      	adds	r3, #27
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	18d3      	adds	r3, r2, r3
 800792a:	3304      	adds	r3, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2208      	movs	r2, #8
 8007930:	4013      	ands	r3, r2
 8007932:	d003      	beq.n	800793c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2208      	movs	r2, #8
 8007938:	611a      	str	r2, [r3, #16]
 800793a:	e00b      	b.n	8007954 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	331b      	adds	r3, #27
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	18d3      	adds	r3, r2, r3
 8007948:	3304      	adds	r3, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	220f      	movs	r2, #15
 800794e:	401a      	ands	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	331b      	adds	r3, #27
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	18d3      	adds	r3, r2, r3
 8007960:	3304      	adds	r3, #4
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	0a1b      	lsrs	r3, r3, #8
 8007966:	22ff      	movs	r2, #255	; 0xff
 8007968:	401a      	ands	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	331b      	adds	r3, #27
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	18d3      	adds	r3, r2, r3
 800797a:	3304      	adds	r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	0c1b      	lsrs	r3, r3, #16
 8007980:	041b      	lsls	r3, r3, #16
 8007982:	0c1a      	lsrs	r2, r3, #16
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6819      	ldr	r1, [r3, #0]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	23dc      	movs	r3, #220	; 0xdc
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	0112      	lsls	r2, r2, #4
 8007994:	188a      	adds	r2, r1, r2
 8007996:	18d3      	adds	r3, r2, r3
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	23dc      	movs	r3, #220	; 0xdc
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	0112      	lsls	r2, r2, #4
 80079ac:	188a      	adds	r2, r1, r2
 80079ae:	18d3      	adds	r3, r2, r3
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	0a1a      	lsrs	r2, r3, #8
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	3301      	adds	r3, #1
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	23dc      	movs	r3, #220	; 0xdc
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	0112      	lsls	r2, r2, #4
 80079c8:	188a      	adds	r2, r1, r2
 80079ca:	18d3      	adds	r3, r2, r3
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	0c1a      	lsrs	r2, r3, #16
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	3302      	adds	r3, #2
 80079d4:	b2d2      	uxtb	r2, r2
 80079d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6819      	ldr	r1, [r3, #0]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	23dc      	movs	r3, #220	; 0xdc
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	0112      	lsls	r2, r2, #4
 80079e4:	188a      	adds	r2, r1, r2
 80079e6:	18d3      	adds	r3, r2, r3
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	0e1a      	lsrs	r2, r3, #24
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	3303      	adds	r3, #3
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6819      	ldr	r1, [r3, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	23de      	movs	r3, #222	; 0xde
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	0112      	lsls	r2, r2, #4
 8007a00:	188a      	adds	r2, r1, r2
 8007a02:	18d3      	adds	r3, r2, r3
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6819      	ldr	r1, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	23de      	movs	r3, #222	; 0xde
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	0112      	lsls	r2, r2, #4
 8007a1a:	188a      	adds	r2, r1, r2
 8007a1c:	18d3      	adds	r3, r2, r3
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	0a1a      	lsrs	r2, r3, #8
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	3305      	adds	r3, #5
 8007a26:	b2d2      	uxtb	r2, r2
 8007a28:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6819      	ldr	r1, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	23de      	movs	r3, #222	; 0xde
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	0112      	lsls	r2, r2, #4
 8007a36:	188a      	adds	r2, r1, r2
 8007a38:	18d3      	adds	r3, r2, r3
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	0c1a      	lsrs	r2, r3, #16
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	3306      	adds	r3, #6
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	23de      	movs	r3, #222	; 0xde
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	0112      	lsls	r2, r2, #4
 8007a52:	188a      	adds	r2, r1, r2
 8007a54:	18d3      	adds	r3, r2, r3
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	0e1a      	lsrs	r2, r3, #24
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	3307      	adds	r3, #7
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d108      	bne.n	8007a7a <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2120      	movs	r1, #32
 8007a74:	430a      	orrs	r2, r1
 8007a76:	60da      	str	r2, [r3, #12]
 8007a78:	e007      	b.n	8007a8a <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2120      	movs	r1, #32
 8007a86:	430a      	orrs	r2, r1
 8007a88:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e007      	b.n	8007a9e <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	2280      	movs	r2, #128	; 0x80
 8007a94:	02d2      	lsls	r2, r2, #11
 8007a96:	431a      	orrs	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
  }
}
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	b006      	add	sp, #24
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007ab0:	200f      	movs	r0, #15
 8007ab2:	183b      	adds	r3, r7, r0
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	2120      	movs	r1, #32
 8007ab8:	5c52      	ldrb	r2, [r2, r1]
 8007aba:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007abc:	0002      	movs	r2, r0
 8007abe:	18bb      	adds	r3, r7, r2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d003      	beq.n	8007ace <HAL_CAN_ActivateNotification+0x28>
 8007ac6:	18bb      	adds	r3, r7, r2
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d109      	bne.n	8007ae2 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6959      	ldr	r1, [r3, #20]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e007      	b.n	8007af2 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2280      	movs	r2, #128	; 0x80
 8007ae8:	02d2      	lsls	r2, r2, #11
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
  }
}
 8007af2:	0018      	movs	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b004      	add	sp, #16
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b08a      	sub	sp, #40	; 0x28
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007b02:	2300      	movs	r3, #0
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	d100      	bne.n	8007b40 <HAL_CAN_IRQHandler+0x46>
 8007b3e:	e084      	b.n	8007c4a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	2201      	movs	r2, #1
 8007b44:	4013      	ands	r3, r2
 8007b46:	d024      	beq.n	8007b92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2202      	movs	r2, #2
 8007b54:	4013      	ands	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 f981 	bl	8007e62 <HAL_CAN_TxMailbox0CompleteCallback>
 8007b60:	e017      	b.n	8007b92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2204      	movs	r2, #4
 8007b66:	4013      	ands	r3, r2
 8007b68:	d005      	beq.n	8007b76 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	2280      	movs	r2, #128	; 0x80
 8007b6e:	0112      	lsls	r2, r2, #4
 8007b70:	4313      	orrs	r3, r2
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24
 8007b74:	e00d      	b.n	8007b92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2208      	movs	r2, #8
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	d005      	beq.n	8007b8a <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	2280      	movs	r2, #128	; 0x80
 8007b82:	0152      	lsls	r2, r2, #5
 8007b84:	4313      	orrs	r3, r2
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
 8007b88:	e003      	b.n	8007b92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f000 f980 	bl	8007e92 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	2380      	movs	r3, #128	; 0x80
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	4013      	ands	r3, r2
 8007b9a:	d028      	beq.n	8007bee <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2280      	movs	r2, #128	; 0x80
 8007ba2:	0052      	lsls	r2, r2, #1
 8007ba4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	4013      	ands	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f000 f95d 	bl	8007e72 <HAL_CAN_TxMailbox1CompleteCallback>
 8007bb8:	e019      	b.n	8007bee <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d005      	beq.n	8007bd0 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	2280      	movs	r2, #128	; 0x80
 8007bc8:	0192      	lsls	r2, r2, #6
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007bce:	e00e      	b.n	8007bee <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	d005      	beq.n	8007be6 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	2280      	movs	r2, #128	; 0x80
 8007bde:	01d2      	lsls	r2, r2, #7
 8007be0:	4313      	orrs	r3, r2
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
 8007be4:	e003      	b.n	8007bee <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	0018      	movs	r0, r3
 8007bea:	f000 f95a 	bl	8007ea2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	2380      	movs	r3, #128	; 0x80
 8007bf2:	025b      	lsls	r3, r3, #9
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	d028      	beq.n	8007c4a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2280      	movs	r2, #128	; 0x80
 8007bfe:	0252      	lsls	r2, r2, #9
 8007c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	2380      	movs	r3, #128	; 0x80
 8007c06:	029b      	lsls	r3, r3, #10
 8007c08:	4013      	ands	r3, r2
 8007c0a:	d004      	beq.n	8007c16 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	0018      	movs	r0, r3
 8007c10:	f000 f937 	bl	8007e82 <HAL_CAN_TxMailbox2CompleteCallback>
 8007c14:	e019      	b.n	8007c4a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	2380      	movs	r3, #128	; 0x80
 8007c1a:	02db      	lsls	r3, r3, #11
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	d005      	beq.n	8007c2c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	2280      	movs	r2, #128	; 0x80
 8007c24:	0212      	lsls	r2, r2, #8
 8007c26:	4313      	orrs	r3, r2
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
 8007c2a:	e00e      	b.n	8007c4a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	2380      	movs	r3, #128	; 0x80
 8007c30:	031b      	lsls	r3, r3, #12
 8007c32:	4013      	ands	r3, r2
 8007c34:	d005      	beq.n	8007c42 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	2280      	movs	r2, #128	; 0x80
 8007c3a:	0252      	lsls	r2, r2, #9
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c40:	e003      	b.n	8007c4a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f000 f934 	bl	8007eb2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	4013      	ands	r3, r2
 8007c50:	d00c      	beq.n	8007c6c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2210      	movs	r2, #16
 8007c56:	4013      	ands	r3, r2
 8007c58:	d008      	beq.n	8007c6c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	2280      	movs	r2, #128	; 0x80
 8007c5e:	0092      	lsls	r2, r2, #2
 8007c60:	4313      	orrs	r3, r2
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2210      	movs	r2, #16
 8007c6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	2204      	movs	r2, #4
 8007c70:	4013      	ands	r3, r2
 8007c72:	d00b      	beq.n	8007c8c <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2208      	movs	r2, #8
 8007c78:	4013      	ands	r3, r2
 8007c7a:	d007      	beq.n	8007c8c <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2208      	movs	r2, #8
 8007c82:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	0018      	movs	r0, r3
 8007c88:	f000 f91b 	bl	8007ec2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	4013      	ands	r3, r2
 8007c92:	d009      	beq.n	8007ca8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f7fa fd36 	bl	8002714 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	2240      	movs	r2, #64	; 0x40
 8007cac:	4013      	ands	r3, r2
 8007cae:	d00c      	beq.n	8007cca <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2210      	movs	r2, #16
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d008      	beq.n	8007cca <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	2280      	movs	r2, #128	; 0x80
 8007cbc:	00d2      	lsls	r2, r2, #3
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2210      	movs	r2, #16
 8007cc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	4013      	ands	r3, r2
 8007cd0:	d00b      	beq.n	8007cea <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	d007      	beq.n	8007cea <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2208      	movs	r2, #8
 8007ce0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f000 f8fc 	bl	8007ee2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	2210      	movs	r2, #16
 8007cee:	4013      	ands	r3, r2
 8007cf0:	d009      	beq.n	8007d06 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	2203      	movs	r2, #3
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	0018      	movs	r0, r3
 8007d02:	f000 f8e6 	bl	8007ed2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007d06:	6a3a      	ldr	r2, [r7, #32]
 8007d08:	2380      	movs	r3, #128	; 0x80
 8007d0a:	029b      	lsls	r3, r3, #10
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	d00b      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	2210      	movs	r2, #16
 8007d14:	4013      	ands	r3, r2
 8007d16:	d007      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2210      	movs	r2, #16
 8007d1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	0018      	movs	r0, r3
 8007d24:	f000 f8e5 	bl	8007ef2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007d28:	6a3a      	ldr	r2, [r7, #32]
 8007d2a:	2380      	movs	r3, #128	; 0x80
 8007d2c:	025b      	lsls	r3, r3, #9
 8007d2e:	4013      	ands	r3, r2
 8007d30:	d00b      	beq.n	8007d4a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	2208      	movs	r2, #8
 8007d36:	4013      	ands	r3, r2
 8007d38:	d007      	beq.n	8007d4a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2208      	movs	r2, #8
 8007d40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	0018      	movs	r0, r3
 8007d46:	f000 f8dc 	bl	8007f02 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007d4a:	6a3a      	ldr	r2, [r7, #32]
 8007d4c:	2380      	movs	r3, #128	; 0x80
 8007d4e:	021b      	lsls	r3, r3, #8
 8007d50:	4013      	ands	r3, r2
 8007d52:	d100      	bne.n	8007d56 <HAL_CAN_IRQHandler+0x25c>
 8007d54:	e074      	b.n	8007e40 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	2204      	movs	r2, #4
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	d100      	bne.n	8007d60 <HAL_CAN_IRQHandler+0x266>
 8007d5e:	e06b      	b.n	8007e38 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007d60:	6a3a      	ldr	r2, [r7, #32]
 8007d62:	2380      	movs	r3, #128	; 0x80
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	4013      	ands	r3, r2
 8007d68:	d007      	beq.n	8007d7a <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007d70:	d003      	beq.n	8007d7a <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	2201      	movs	r2, #1
 8007d76:	4313      	orrs	r3, r2
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007d7a:	6a3a      	ldr	r2, [r7, #32]
 8007d7c:	2380      	movs	r3, #128	; 0x80
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4013      	ands	r3, r2
 8007d82:	d007      	beq.n	8007d94 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2202      	movs	r2, #2
 8007d88:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007d8a:	d003      	beq.n	8007d94 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	2202      	movs	r2, #2
 8007d90:	4313      	orrs	r3, r2
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007d94:	6a3a      	ldr	r2, [r7, #32]
 8007d96:	2380      	movs	r3, #128	; 0x80
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d007      	beq.n	8007dae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2204      	movs	r2, #4
 8007da2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007da4:	d003      	beq.n	8007dae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	2204      	movs	r2, #4
 8007daa:	4313      	orrs	r3, r2
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007dae:	6a3a      	ldr	r2, [r7, #32]
 8007db0:	2380      	movs	r3, #128	; 0x80
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	4013      	ands	r3, r2
 8007db6:	d03f      	beq.n	8007e38 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2270      	movs	r2, #112	; 0x70
 8007dbc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007dbe:	d03b      	beq.n	8007e38 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2270      	movs	r2, #112	; 0x70
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	2b60      	cmp	r3, #96	; 0x60
 8007dc8:	d027      	beq.n	8007e1a <HAL_CAN_IRQHandler+0x320>
 8007dca:	d82c      	bhi.n	8007e26 <HAL_CAN_IRQHandler+0x32c>
 8007dcc:	2b50      	cmp	r3, #80	; 0x50
 8007dce:	d01f      	beq.n	8007e10 <HAL_CAN_IRQHandler+0x316>
 8007dd0:	d829      	bhi.n	8007e26 <HAL_CAN_IRQHandler+0x32c>
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	d017      	beq.n	8007e06 <HAL_CAN_IRQHandler+0x30c>
 8007dd6:	d826      	bhi.n	8007e26 <HAL_CAN_IRQHandler+0x32c>
 8007dd8:	2b30      	cmp	r3, #48	; 0x30
 8007dda:	d00f      	beq.n	8007dfc <HAL_CAN_IRQHandler+0x302>
 8007ddc:	d823      	bhi.n	8007e26 <HAL_CAN_IRQHandler+0x32c>
 8007dde:	2b10      	cmp	r3, #16
 8007de0:	d002      	beq.n	8007de8 <HAL_CAN_IRQHandler+0x2ee>
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	d005      	beq.n	8007df2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007de6:	e01e      	b.n	8007e26 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	2208      	movs	r2, #8
 8007dec:	4313      	orrs	r3, r2
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007df0:	e01a      	b.n	8007e28 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	2210      	movs	r2, #16
 8007df6:	4313      	orrs	r3, r2
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007dfa:	e015      	b.n	8007e28 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	2220      	movs	r2, #32
 8007e00:	4313      	orrs	r3, r2
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007e04:	e010      	b.n	8007e28 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	2240      	movs	r2, #64	; 0x40
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007e0e:	e00b      	b.n	8007e28 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	2280      	movs	r2, #128	; 0x80
 8007e14:	4313      	orrs	r3, r2
 8007e16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007e18:	e006      	b.n	8007e28 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	0052      	lsls	r2, r2, #1
 8007e20:	4313      	orrs	r3, r2
 8007e22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007e24:	e000      	b.n	8007e28 <HAL_CAN_IRQHandler+0x32e>
            break;
 8007e26:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2170      	movs	r1, #112	; 0x70
 8007e34:	438a      	bics	r2, r1
 8007e36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d009      	beq.n	8007e5a <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	0018      	movs	r0, r3
 8007e56:	f000 f85c 	bl	8007f12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b00a      	add	sp, #40	; 0x28
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	b002      	add	sp, #8
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b082      	sub	sp, #8
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007e7a:	46c0      	nop			; (mov r8, r8)
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	b002      	add	sp, #8
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	b002      	add	sp, #8
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b002      	add	sp, #8
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	46bd      	mov	sp, r7
 8007eae:	b002      	add	sp, #8
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b002      	add	sp, #8
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b002      	add	sp, #8
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b002      	add	sp, #8
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b002      	add	sp, #8
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	46bd      	mov	sp, r7
 8007efe:	b002      	add	sp, #8
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	b002      	add	sp, #8
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	b002      	add	sp, #8
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	0002      	movs	r2, r0
 8007f2c:	1dfb      	adds	r3, r7, #7
 8007f2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f30:	1dfb      	adds	r3, r7, #7
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b7f      	cmp	r3, #127	; 0x7f
 8007f36:	d809      	bhi.n	8007f4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f38:	1dfb      	adds	r3, r7, #7
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	001a      	movs	r2, r3
 8007f3e:	231f      	movs	r3, #31
 8007f40:	401a      	ands	r2, r3
 8007f42:	4b04      	ldr	r3, [pc, #16]	; (8007f54 <__NVIC_EnableIRQ+0x30>)
 8007f44:	2101      	movs	r1, #1
 8007f46:	4091      	lsls	r1, r2
 8007f48:	000a      	movs	r2, r1
 8007f4a:	601a      	str	r2, [r3, #0]
  }
}
 8007f4c:	46c0      	nop			; (mov r8, r8)
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	b002      	add	sp, #8
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	e000e100 	.word	0xe000e100

08007f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f58:	b590      	push	{r4, r7, lr}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	0002      	movs	r2, r0
 8007f60:	6039      	str	r1, [r7, #0]
 8007f62:	1dfb      	adds	r3, r7, #7
 8007f64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007f66:	1dfb      	adds	r3, r7, #7
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f6c:	d828      	bhi.n	8007fc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f6e:	4a2f      	ldr	r2, [pc, #188]	; (800802c <__NVIC_SetPriority+0xd4>)
 8007f70:	1dfb      	adds	r3, r7, #7
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	b25b      	sxtb	r3, r3
 8007f76:	089b      	lsrs	r3, r3, #2
 8007f78:	33c0      	adds	r3, #192	; 0xc0
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	589b      	ldr	r3, [r3, r2]
 8007f7e:	1dfa      	adds	r2, r7, #7
 8007f80:	7812      	ldrb	r2, [r2, #0]
 8007f82:	0011      	movs	r1, r2
 8007f84:	2203      	movs	r2, #3
 8007f86:	400a      	ands	r2, r1
 8007f88:	00d2      	lsls	r2, r2, #3
 8007f8a:	21ff      	movs	r1, #255	; 0xff
 8007f8c:	4091      	lsls	r1, r2
 8007f8e:	000a      	movs	r2, r1
 8007f90:	43d2      	mvns	r2, r2
 8007f92:	401a      	ands	r2, r3
 8007f94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	019b      	lsls	r3, r3, #6
 8007f9a:	22ff      	movs	r2, #255	; 0xff
 8007f9c:	401a      	ands	r2, r3
 8007f9e:	1dfb      	adds	r3, r7, #7
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	4003      	ands	r3, r0
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fac:	481f      	ldr	r0, [pc, #124]	; (800802c <__NVIC_SetPriority+0xd4>)
 8007fae:	1dfb      	adds	r3, r7, #7
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b25b      	sxtb	r3, r3
 8007fb4:	089b      	lsrs	r3, r3, #2
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	33c0      	adds	r3, #192	; 0xc0
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007fbe:	e031      	b.n	8008024 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007fc0:	4a1b      	ldr	r2, [pc, #108]	; (8008030 <__NVIC_SetPriority+0xd8>)
 8007fc2:	1dfb      	adds	r3, r7, #7
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	230f      	movs	r3, #15
 8007fca:	400b      	ands	r3, r1
 8007fcc:	3b08      	subs	r3, #8
 8007fce:	089b      	lsrs	r3, r3, #2
 8007fd0:	3306      	adds	r3, #6
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	18d3      	adds	r3, r2, r3
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	1dfa      	adds	r2, r7, #7
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	0011      	movs	r1, r2
 8007fe0:	2203      	movs	r2, #3
 8007fe2:	400a      	ands	r2, r1
 8007fe4:	00d2      	lsls	r2, r2, #3
 8007fe6:	21ff      	movs	r1, #255	; 0xff
 8007fe8:	4091      	lsls	r1, r2
 8007fea:	000a      	movs	r2, r1
 8007fec:	43d2      	mvns	r2, r2
 8007fee:	401a      	ands	r2, r3
 8007ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	019b      	lsls	r3, r3, #6
 8007ff6:	22ff      	movs	r2, #255	; 0xff
 8007ff8:	401a      	ands	r2, r3
 8007ffa:	1dfb      	adds	r3, r7, #7
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	0018      	movs	r0, r3
 8008000:	2303      	movs	r3, #3
 8008002:	4003      	ands	r3, r0
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008008:	4809      	ldr	r0, [pc, #36]	; (8008030 <__NVIC_SetPriority+0xd8>)
 800800a:	1dfb      	adds	r3, r7, #7
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	001c      	movs	r4, r3
 8008010:	230f      	movs	r3, #15
 8008012:	4023      	ands	r3, r4
 8008014:	3b08      	subs	r3, #8
 8008016:	089b      	lsrs	r3, r3, #2
 8008018:	430a      	orrs	r2, r1
 800801a:	3306      	adds	r3, #6
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	18c3      	adds	r3, r0, r3
 8008020:	3304      	adds	r3, #4
 8008022:	601a      	str	r2, [r3, #0]
}
 8008024:	46c0      	nop			; (mov r8, r8)
 8008026:	46bd      	mov	sp, r7
 8008028:	b003      	add	sp, #12
 800802a:	bd90      	pop	{r4, r7, pc}
 800802c:	e000e100 	.word	0xe000e100
 8008030:	e000ed00 	.word	0xe000ed00

08008034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	2380      	movs	r3, #128	; 0x80
 8008042:	045b      	lsls	r3, r3, #17
 8008044:	429a      	cmp	r2, r3
 8008046:	d301      	bcc.n	800804c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008048:	2301      	movs	r3, #1
 800804a:	e010      	b.n	800806e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <SysTick_Config+0x44>)
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	3a01      	subs	r2, #1
 8008052:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008054:	2301      	movs	r3, #1
 8008056:	425b      	negs	r3, r3
 8008058:	2103      	movs	r1, #3
 800805a:	0018      	movs	r0, r3
 800805c:	f7ff ff7c 	bl	8007f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <SysTick_Config+0x44>)
 8008062:	2200      	movs	r2, #0
 8008064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008066:	4b04      	ldr	r3, [pc, #16]	; (8008078 <SysTick_Config+0x44>)
 8008068:	2207      	movs	r2, #7
 800806a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800806c:	2300      	movs	r3, #0
}
 800806e:	0018      	movs	r0, r3
 8008070:	46bd      	mov	sp, r7
 8008072:	b002      	add	sp, #8
 8008074:	bd80      	pop	{r7, pc}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	e000e010 	.word	0xe000e010

0800807c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	210f      	movs	r1, #15
 8008088:	187b      	adds	r3, r7, r1
 800808a:	1c02      	adds	r2, r0, #0
 800808c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	187b      	adds	r3, r7, r1
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	b25b      	sxtb	r3, r3
 8008096:	0011      	movs	r1, r2
 8008098:	0018      	movs	r0, r3
 800809a:	f7ff ff5d 	bl	8007f58 <__NVIC_SetPriority>
}
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b004      	add	sp, #16
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	0002      	movs	r2, r0
 80080ae:	1dfb      	adds	r3, r7, #7
 80080b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080b2:	1dfb      	adds	r3, r7, #7
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b25b      	sxtb	r3, r3
 80080b8:	0018      	movs	r0, r3
 80080ba:	f7ff ff33 	bl	8007f24 <__NVIC_EnableIRQ>
}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b002      	add	sp, #8
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	0018      	movs	r0, r3
 80080d2:	f7ff ffaf 	bl	8008034 <SysTick_Config>
 80080d6:	0003      	movs	r3, r0
}
 80080d8:	0018      	movs	r0, r3
 80080da:	46bd      	mov	sp, r7
 80080dc:	b002      	add	sp, #8
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080ee:	e155      	b.n	800839c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2101      	movs	r1, #1
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4091      	lsls	r1, r2
 80080fa:	000a      	movs	r2, r1
 80080fc:	4013      	ands	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d100      	bne.n	8008108 <HAL_GPIO_Init+0x28>
 8008106:	e146      	b.n	8008396 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2203      	movs	r2, #3
 800810e:	4013      	ands	r3, r2
 8008110:	2b01      	cmp	r3, #1
 8008112:	d005      	beq.n	8008120 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2203      	movs	r2, #3
 800811a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800811c:	2b02      	cmp	r3, #2
 800811e:	d130      	bne.n	8008182 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	005b      	lsls	r3, r3, #1
 800812a:	2203      	movs	r2, #3
 800812c:	409a      	lsls	r2, r3
 800812e:	0013      	movs	r3, r2
 8008130:	43da      	mvns	r2, r3
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4013      	ands	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	409a      	lsls	r2, r3
 8008142:	0013      	movs	r3, r2
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008156:	2201      	movs	r2, #1
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	409a      	lsls	r2, r3
 800815c:	0013      	movs	r3, r2
 800815e:	43da      	mvns	r2, r3
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	4013      	ands	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	091b      	lsrs	r3, r3, #4
 800816c:	2201      	movs	r2, #1
 800816e:	401a      	ands	r2, r3
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	409a      	lsls	r2, r3
 8008174:	0013      	movs	r3, r2
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2203      	movs	r2, #3
 8008188:	4013      	ands	r3, r2
 800818a:	2b03      	cmp	r3, #3
 800818c:	d017      	beq.n	80081be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	005b      	lsls	r3, r3, #1
 8008198:	2203      	movs	r2, #3
 800819a:	409a      	lsls	r2, r3
 800819c:	0013      	movs	r3, r2
 800819e:	43da      	mvns	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4013      	ands	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	409a      	lsls	r2, r3
 80081b0:	0013      	movs	r3, r2
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2203      	movs	r2, #3
 80081c4:	4013      	ands	r3, r2
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d123      	bne.n	8008212 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	08da      	lsrs	r2, r3, #3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3208      	adds	r2, #8
 80081d2:	0092      	lsls	r2, r2, #2
 80081d4:	58d3      	ldr	r3, [r2, r3]
 80081d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2207      	movs	r2, #7
 80081dc:	4013      	ands	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	220f      	movs	r2, #15
 80081e2:	409a      	lsls	r2, r3
 80081e4:	0013      	movs	r3, r2
 80081e6:	43da      	mvns	r2, r3
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	4013      	ands	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	691a      	ldr	r2, [r3, #16]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2107      	movs	r1, #7
 80081f6:	400b      	ands	r3, r1
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	409a      	lsls	r2, r3
 80081fc:	0013      	movs	r3, r2
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	08da      	lsrs	r2, r3, #3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3208      	adds	r2, #8
 800820c:	0092      	lsls	r2, r2, #2
 800820e:	6939      	ldr	r1, [r7, #16]
 8008210:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	2203      	movs	r2, #3
 800821e:	409a      	lsls	r2, r3
 8008220:	0013      	movs	r3, r2
 8008222:	43da      	mvns	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	4013      	ands	r3, r2
 8008228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2203      	movs	r2, #3
 8008230:	401a      	ands	r2, r3
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	409a      	lsls	r2, r3
 8008238:	0013      	movs	r3, r2
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	23c0      	movs	r3, #192	; 0xc0
 800824c:	029b      	lsls	r3, r3, #10
 800824e:	4013      	ands	r3, r2
 8008250:	d100      	bne.n	8008254 <HAL_GPIO_Init+0x174>
 8008252:	e0a0      	b.n	8008396 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008254:	4b57      	ldr	r3, [pc, #348]	; (80083b4 <HAL_GPIO_Init+0x2d4>)
 8008256:	699a      	ldr	r2, [r3, #24]
 8008258:	4b56      	ldr	r3, [pc, #344]	; (80083b4 <HAL_GPIO_Init+0x2d4>)
 800825a:	2101      	movs	r1, #1
 800825c:	430a      	orrs	r2, r1
 800825e:	619a      	str	r2, [r3, #24]
 8008260:	4b54      	ldr	r3, [pc, #336]	; (80083b4 <HAL_GPIO_Init+0x2d4>)
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	2201      	movs	r2, #1
 8008266:	4013      	ands	r3, r2
 8008268:	60bb      	str	r3, [r7, #8]
 800826a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800826c:	4a52      	ldr	r2, [pc, #328]	; (80083b8 <HAL_GPIO_Init+0x2d8>)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	089b      	lsrs	r3, r3, #2
 8008272:	3302      	adds	r3, #2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	589b      	ldr	r3, [r3, r2]
 8008278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2203      	movs	r2, #3
 800827e:	4013      	ands	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	220f      	movs	r2, #15
 8008284:	409a      	lsls	r2, r3
 8008286:	0013      	movs	r3, r2
 8008288:	43da      	mvns	r2, r3
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4013      	ands	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	2390      	movs	r3, #144	; 0x90
 8008294:	05db      	lsls	r3, r3, #23
 8008296:	429a      	cmp	r2, r3
 8008298:	d019      	beq.n	80082ce <HAL_GPIO_Init+0x1ee>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a47      	ldr	r2, [pc, #284]	; (80083bc <HAL_GPIO_Init+0x2dc>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <HAL_GPIO_Init+0x1ea>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a46      	ldr	r2, [pc, #280]	; (80083c0 <HAL_GPIO_Init+0x2e0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00d      	beq.n	80082c6 <HAL_GPIO_Init+0x1e6>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a45      	ldr	r2, [pc, #276]	; (80083c4 <HAL_GPIO_Init+0x2e4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d007      	beq.n	80082c2 <HAL_GPIO_Init+0x1e2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a44      	ldr	r2, [pc, #272]	; (80083c8 <HAL_GPIO_Init+0x2e8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d101      	bne.n	80082be <HAL_GPIO_Init+0x1de>
 80082ba:	2304      	movs	r3, #4
 80082bc:	e008      	b.n	80082d0 <HAL_GPIO_Init+0x1f0>
 80082be:	2305      	movs	r3, #5
 80082c0:	e006      	b.n	80082d0 <HAL_GPIO_Init+0x1f0>
 80082c2:	2303      	movs	r3, #3
 80082c4:	e004      	b.n	80082d0 <HAL_GPIO_Init+0x1f0>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e002      	b.n	80082d0 <HAL_GPIO_Init+0x1f0>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <HAL_GPIO_Init+0x1f0>
 80082ce:	2300      	movs	r3, #0
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	2103      	movs	r1, #3
 80082d4:	400a      	ands	r2, r1
 80082d6:	0092      	lsls	r2, r2, #2
 80082d8:	4093      	lsls	r3, r2
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80082e0:	4935      	ldr	r1, [pc, #212]	; (80083b8 <HAL_GPIO_Init+0x2d8>)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	089b      	lsrs	r3, r3, #2
 80082e6:	3302      	adds	r3, #2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80082ee:	4b37      	ldr	r3, [pc, #220]	; (80083cc <HAL_GPIO_Init+0x2ec>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	43da      	mvns	r2, r3
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	4013      	ands	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	2380      	movs	r3, #128	; 0x80
 8008304:	035b      	lsls	r3, r3, #13
 8008306:	4013      	ands	r3, r2
 8008308:	d003      	beq.n	8008312 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008312:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <HAL_GPIO_Init+0x2ec>)
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008318:	4b2c      	ldr	r3, [pc, #176]	; (80083cc <HAL_GPIO_Init+0x2ec>)
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	43da      	mvns	r2, r3
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	4013      	ands	r3, r2
 8008326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	2380      	movs	r3, #128	; 0x80
 800832e:	039b      	lsls	r3, r3, #14
 8008330:	4013      	ands	r3, r2
 8008332:	d003      	beq.n	800833c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4313      	orrs	r3, r2
 800833a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800833c:	4b23      	ldr	r3, [pc, #140]	; (80083cc <HAL_GPIO_Init+0x2ec>)
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8008342:	4b22      	ldr	r3, [pc, #136]	; (80083cc <HAL_GPIO_Init+0x2ec>)
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	43da      	mvns	r2, r3
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	4013      	ands	r3, r2
 8008350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	2380      	movs	r3, #128	; 0x80
 8008358:	029b      	lsls	r3, r3, #10
 800835a:	4013      	ands	r3, r2
 800835c:	d003      	beq.n	8008366 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008366:	4b19      	ldr	r3, [pc, #100]	; (80083cc <HAL_GPIO_Init+0x2ec>)
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800836c:	4b17      	ldr	r3, [pc, #92]	; (80083cc <HAL_GPIO_Init+0x2ec>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	43da      	mvns	r2, r3
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4013      	ands	r3, r2
 800837a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	2380      	movs	r3, #128	; 0x80
 8008382:	025b      	lsls	r3, r3, #9
 8008384:	4013      	ands	r3, r2
 8008386:	d003      	beq.n	8008390 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008390:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <HAL_GPIO_Init+0x2ec>)
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	3301      	adds	r3, #1
 800839a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	40da      	lsrs	r2, r3
 80083a4:	1e13      	subs	r3, r2, #0
 80083a6:	d000      	beq.n	80083aa <HAL_GPIO_Init+0x2ca>
 80083a8:	e6a2      	b.n	80080f0 <HAL_GPIO_Init+0x10>
  } 
}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	46c0      	nop			; (mov r8, r8)
 80083ae:	46bd      	mov	sp, r7
 80083b0:	b006      	add	sp, #24
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40021000 	.word	0x40021000
 80083b8:	40010000 	.word	0x40010000
 80083bc:	48000400 	.word	0x48000400
 80083c0:	48000800 	.word	0x48000800
 80083c4:	48000c00 	.word	0x48000c00
 80083c8:	48001000 	.word	0x48001000
 80083cc:	40010400 	.word	0x40010400

080083d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	000a      	movs	r2, r1
 80083da:	1cbb      	adds	r3, r7, #2
 80083dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	1cba      	adds	r2, r7, #2
 80083e4:	8812      	ldrh	r2, [r2, #0]
 80083e6:	4013      	ands	r3, r2
 80083e8:	d004      	beq.n	80083f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80083ea:	230f      	movs	r3, #15
 80083ec:	18fb      	adds	r3, r7, r3
 80083ee:	2201      	movs	r2, #1
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	e003      	b.n	80083fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083f4:	230f      	movs	r3, #15
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	2200      	movs	r2, #0
 80083fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80083fc:	230f      	movs	r3, #15
 80083fe:	18fb      	adds	r3, r7, r3
 8008400:	781b      	ldrb	r3, [r3, #0]
  }
 8008402:	0018      	movs	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	b004      	add	sp, #16
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	0008      	movs	r0, r1
 8008414:	0011      	movs	r1, r2
 8008416:	1cbb      	adds	r3, r7, #2
 8008418:	1c02      	adds	r2, r0, #0
 800841a:	801a      	strh	r2, [r3, #0]
 800841c:	1c7b      	adds	r3, r7, #1
 800841e:	1c0a      	adds	r2, r1, #0
 8008420:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008422:	1c7b      	adds	r3, r7, #1
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d004      	beq.n	8008434 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800842a:	1cbb      	adds	r3, r7, #2
 800842c:	881a      	ldrh	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008432:	e003      	b.n	800843c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008434:	1cbb      	adds	r3, r7, #2
 8008436:	881a      	ldrh	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800843c:	46c0      	nop			; (mov r8, r8)
 800843e:	46bd      	mov	sp, r7
 8008440:	b002      	add	sp, #8
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008446:	b08b      	sub	sp, #44	; 0x2c
 8008448:	af06      	add	r7, sp, #24
 800844a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e0f0      	b.n	8008638 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a79      	ldr	r2, [pc, #484]	; (8008640 <HAL_PCD_Init+0x1fc>)
 800845a:	5c9b      	ldrb	r3, [r3, r2]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d108      	bne.n	8008474 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	23aa      	movs	r3, #170	; 0xaa
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	2100      	movs	r1, #0
 800846a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	0018      	movs	r0, r3
 8008470:	f7fc f94a 	bl	8004708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a72      	ldr	r2, [pc, #456]	; (8008640 <HAL_PCD_Init+0x1fc>)
 8008478:	2103      	movs	r1, #3
 800847a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	0018      	movs	r0, r3
 8008482:	f003 fc39 	bl	800bcf8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008486:	230f      	movs	r3, #15
 8008488:	18fb      	adds	r3, r7, r3
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	e049      	b.n	8008524 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008490:	200f      	movs	r0, #15
 8008492:	183b      	adds	r3, r7, r0
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	0013      	movs	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	189b      	adds	r3, r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	18cb      	adds	r3, r1, r3
 80084a4:	3301      	adds	r3, #1
 80084a6:	2201      	movs	r2, #1
 80084a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80084aa:	183b      	adds	r3, r7, r0
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	0013      	movs	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	189b      	adds	r3, r3, r2
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	183a      	adds	r2, r7, r0
 80084bc:	7812      	ldrb	r2, [r2, #0]
 80084be:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80084c0:	183b      	adds	r3, r7, r0
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	0013      	movs	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	189b      	adds	r3, r3, r2
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	18cb      	adds	r3, r1, r3
 80084d2:	3303      	adds	r3, #3
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80084d8:	183b      	adds	r3, r7, r0
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	6879      	ldr	r1, [r7, #4]
 80084de:	0013      	movs	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	189b      	adds	r3, r3, r2
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	18cb      	adds	r3, r1, r3
 80084e8:	3338      	adds	r3, #56	; 0x38
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80084ee:	183b      	adds	r3, r7, r0
 80084f0:	781a      	ldrb	r2, [r3, #0]
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	0013      	movs	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	189b      	adds	r3, r3, r2
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	18cb      	adds	r3, r1, r3
 80084fe:	333c      	adds	r3, #60	; 0x3c
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008504:	183b      	adds	r3, r7, r0
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	6879      	ldr	r1, [r7, #4]
 800850a:	0013      	movs	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	189b      	adds	r3, r3, r2
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	18cb      	adds	r3, r1, r3
 8008514:	3340      	adds	r3, #64	; 0x40
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800851a:	183b      	adds	r3, r7, r0
 800851c:	781a      	ldrb	r2, [r3, #0]
 800851e:	183b      	adds	r3, r7, r0
 8008520:	3201      	adds	r2, #1
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	210f      	movs	r1, #15
 8008526:	187b      	adds	r3, r7, r1
 8008528:	781a      	ldrb	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	429a      	cmp	r2, r3
 8008530:	d3ae      	bcc.n	8008490 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008532:	187b      	adds	r3, r7, r1
 8008534:	2200      	movs	r2, #0
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	e056      	b.n	80085e8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800853a:	240f      	movs	r4, #15
 800853c:	193b      	adds	r3, r7, r4
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	236a      	movs	r3, #106	; 0x6a
 8008544:	33ff      	adds	r3, #255	; 0xff
 8008546:	0019      	movs	r1, r3
 8008548:	0013      	movs	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	189b      	adds	r3, r3, r2
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	18c3      	adds	r3, r0, r3
 8008552:	185b      	adds	r3, r3, r1
 8008554:	2200      	movs	r2, #0
 8008556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008558:	193b      	adds	r3, r7, r4
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	23b4      	movs	r3, #180	; 0xb4
 8008560:	0059      	lsls	r1, r3, #1
 8008562:	0013      	movs	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	189b      	adds	r3, r3, r2
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	18c3      	adds	r3, r0, r3
 800856c:	185b      	adds	r3, r3, r1
 800856e:	193a      	adds	r2, r7, r4
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008574:	193b      	adds	r3, r7, r4
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	236c      	movs	r3, #108	; 0x6c
 800857c:	33ff      	adds	r3, #255	; 0xff
 800857e:	0019      	movs	r1, r3
 8008580:	0013      	movs	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	189b      	adds	r3, r3, r2
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	18c3      	adds	r3, r0, r3
 800858a:	185b      	adds	r3, r3, r1
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008590:	193b      	adds	r3, r7, r4
 8008592:	781a      	ldrb	r2, [r3, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	23bc      	movs	r3, #188	; 0xbc
 8008598:	0059      	lsls	r1, r3, #1
 800859a:	0013      	movs	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	189b      	adds	r3, r3, r2
 80085a0:	00db      	lsls	r3, r3, #3
 80085a2:	18c3      	adds	r3, r0, r3
 80085a4:	185b      	adds	r3, r3, r1
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80085aa:	193b      	adds	r3, r7, r4
 80085ac:	781a      	ldrb	r2, [r3, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	23be      	movs	r3, #190	; 0xbe
 80085b2:	0059      	lsls	r1, r3, #1
 80085b4:	0013      	movs	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	189b      	adds	r3, r3, r2
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	18c3      	adds	r3, r0, r3
 80085be:	185b      	adds	r3, r3, r1
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80085c4:	193b      	adds	r3, r7, r4
 80085c6:	781a      	ldrb	r2, [r3, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	23c0      	movs	r3, #192	; 0xc0
 80085cc:	0059      	lsls	r1, r3, #1
 80085ce:	0013      	movs	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	18c3      	adds	r3, r0, r3
 80085d8:	185b      	adds	r3, r3, r1
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085de:	193b      	adds	r3, r7, r4
 80085e0:	781a      	ldrb	r2, [r3, #0]
 80085e2:	193b      	adds	r3, r7, r4
 80085e4:	3201      	adds	r2, #1
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	230f      	movs	r3, #15
 80085ea:	18fb      	adds	r3, r7, r3
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d3a1      	bcc.n	800853a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	466a      	mov	r2, sp
 80085fe:	0011      	movs	r1, r2
 8008600:	001a      	movs	r2, r3
 8008602:	3210      	adds	r2, #16
 8008604:	ca70      	ldmia	r2!, {r4, r5, r6}
 8008606:	c170      	stmia	r1!, {r4, r5, r6}
 8008608:	ca30      	ldmia	r2!, {r4, r5}
 800860a:	c130      	stmia	r1!, {r4, r5}
 800860c:	6859      	ldr	r1, [r3, #4]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	f003 fb8b 	bl	800bd2c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2224      	movs	r2, #36	; 0x24
 800861a:	2100      	movs	r1, #0
 800861c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a07      	ldr	r2, [pc, #28]	; (8008640 <HAL_PCD_Init+0x1fc>)
 8008622:	2101      	movs	r1, #1
 8008624:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d103      	bne.n	8008636 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	0018      	movs	r0, r3
 8008632:	f001 fd23 	bl	800a07c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	0018      	movs	r0, r3
 800863a:	46bd      	mov	sp, r7
 800863c:	b005      	add	sp, #20
 800863e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008640:	000002a9 	.word	0x000002a9

08008644 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	23aa      	movs	r3, #170	; 0xaa
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	5cd3      	ldrb	r3, [r2, r3]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_PCD_Start+0x18>
 8008658:	2302      	movs	r3, #2
 800865a:	e014      	b.n	8008686 <HAL_PCD_Start+0x42>
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	23aa      	movs	r3, #170	; 0xaa
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	2101      	movs	r1, #1
 8008664:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	0018      	movs	r0, r3
 800866c:	f003 fb2e 	bl	800bccc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	0018      	movs	r0, r3
 8008676:	f005 fb31 	bl	800dcdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	23aa      	movs	r3, #170	; 0xaa
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	2100      	movs	r1, #0
 8008682:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	0018      	movs	r0, r3
 8008688:	46bd      	mov	sp, r7
 800868a:	b002      	add	sp, #8
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	0018      	movs	r0, r3
 800869e:	f005 fb33 	bl	800dd08 <USB_ReadInterrupts>
 80086a2:	0003      	movs	r3, r0
 80086a4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	2380      	movs	r3, #128	; 0x80
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	4013      	ands	r3, r2
 80086ae:	d004      	beq.n	80086ba <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	0018      	movs	r0, r3
 80086b4:	f000 fb62 	bl	8008d7c <PCD_EP_ISR_Handler>

    return;
 80086b8:	e11d      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	2380      	movs	r3, #128	; 0x80
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4013      	ands	r3, r2
 80086c2:	d015      	beq.n	80086f0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2244      	movs	r2, #68	; 0x44
 80086ca:	5a9b      	ldrh	r3, [r3, r2]
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	498a      	ldr	r1, [pc, #552]	; (80088fc <HAL_PCD_IRQHandler+0x26c>)
 80086d4:	400a      	ands	r2, r1
 80086d6:	b291      	uxth	r1, r2
 80086d8:	2244      	movs	r2, #68	; 0x44
 80086da:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	0018      	movs	r0, r3
 80086e0:	f7fc f89d 	bl	800481e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2100      	movs	r1, #0
 80086e8:	0018      	movs	r0, r3
 80086ea:	f000 f915 	bl	8008918 <HAL_PCD_SetAddress>

    return;
 80086ee:	e102      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	2380      	movs	r3, #128	; 0x80
 80086f4:	01db      	lsls	r3, r3, #7
 80086f6:	4013      	ands	r3, r2
 80086f8:	d00c      	beq.n	8008714 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2244      	movs	r2, #68	; 0x44
 8008700:	5a9b      	ldrh	r3, [r3, r2]
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	497d      	ldr	r1, [pc, #500]	; (8008900 <HAL_PCD_IRQHandler+0x270>)
 800870a:	400a      	ands	r2, r1
 800870c:	b291      	uxth	r1, r2
 800870e:	2244      	movs	r2, #68	; 0x44
 8008710:	5299      	strh	r1, [r3, r2]

    return;
 8008712:	e0f0      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	2380      	movs	r3, #128	; 0x80
 8008718:	019b      	lsls	r3, r3, #6
 800871a:	4013      	ands	r3, r2
 800871c:	d00c      	beq.n	8008738 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2244      	movs	r2, #68	; 0x44
 8008724:	5a9b      	ldrh	r3, [r3, r2]
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4975      	ldr	r1, [pc, #468]	; (8008904 <HAL_PCD_IRQHandler+0x274>)
 800872e:	400a      	ands	r2, r1
 8008730:	b291      	uxth	r1, r2
 8008732:	2244      	movs	r2, #68	; 0x44
 8008734:	5299      	strh	r1, [r3, r2]

    return;
 8008736:	e0de      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	2380      	movs	r3, #128	; 0x80
 800873c:	015b      	lsls	r3, r3, #5
 800873e:	4013      	ands	r3, r2
 8008740:	d038      	beq.n	80087b4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2240      	movs	r2, #64	; 0x40
 8008748:	5a9b      	ldrh	r3, [r3, r2]
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2104      	movs	r1, #4
 8008752:	438a      	bics	r2, r1
 8008754:	b291      	uxth	r1, r2
 8008756:	2240      	movs	r2, #64	; 0x40
 8008758:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2240      	movs	r2, #64	; 0x40
 8008760:	5a9b      	ldrh	r3, [r3, r2]
 8008762:	b29a      	uxth	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2108      	movs	r1, #8
 800876a:	438a      	bics	r2, r1
 800876c:	b291      	uxth	r1, r2
 800876e:	2240      	movs	r2, #64	; 0x40
 8008770:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	23b8      	movs	r3, #184	; 0xb8
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	5cd3      	ldrb	r3, [r2, r3]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d109      	bne.n	8008792 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	23b8      	movs	r3, #184	; 0xb8
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	2100      	movs	r1, #0
 8008786:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2100      	movs	r1, #0
 800878c:	0018      	movs	r0, r3
 800878e:	f001 fc9f 	bl	800a0d0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	0018      	movs	r0, r3
 8008796:	f7fc f883 	bl	80048a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2244      	movs	r2, #68	; 0x44
 80087a0:	5a9b      	ldrh	r3, [r3, r2]
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4957      	ldr	r1, [pc, #348]	; (8008908 <HAL_PCD_IRQHandler+0x278>)
 80087aa:	400a      	ands	r2, r1
 80087ac:	b291      	uxth	r1, r2
 80087ae:	2244      	movs	r2, #68	; 0x44
 80087b0:	5299      	strh	r1, [r3, r2]

    return;
 80087b2:	e0a0      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	2380      	movs	r3, #128	; 0x80
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	4013      	ands	r3, r2
 80087bc:	d028      	beq.n	8008810 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2240      	movs	r2, #64	; 0x40
 80087c4:	5a9b      	ldrh	r3, [r3, r2]
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2108      	movs	r1, #8
 80087ce:	430a      	orrs	r2, r1
 80087d0:	b291      	uxth	r1, r2
 80087d2:	2240      	movs	r2, #64	; 0x40
 80087d4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2244      	movs	r2, #68	; 0x44
 80087dc:	5a9b      	ldrh	r3, [r3, r2]
 80087de:	b29a      	uxth	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4949      	ldr	r1, [pc, #292]	; (800890c <HAL_PCD_IRQHandler+0x27c>)
 80087e6:	400a      	ands	r2, r1
 80087e8:	b291      	uxth	r1, r2
 80087ea:	2244      	movs	r2, #68	; 0x44
 80087ec:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2240      	movs	r2, #64	; 0x40
 80087f4:	5a9b      	ldrh	r3, [r3, r2]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2104      	movs	r1, #4
 80087fe:	430a      	orrs	r2, r1
 8008800:	b291      	uxth	r1, r2
 8008802:	2240      	movs	r2, #64	; 0x40
 8008804:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	0018      	movs	r0, r3
 800880a:	f7fc f82d 	bl	8004868 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800880e:	e072      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2280      	movs	r2, #128	; 0x80
 8008814:	4013      	ands	r3, r2
 8008816:	d046      	beq.n	80088a6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2244      	movs	r2, #68	; 0x44
 800881e:	5a9b      	ldrh	r3, [r3, r2]
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2180      	movs	r1, #128	; 0x80
 8008828:	438a      	bics	r2, r1
 800882a:	b291      	uxth	r1, r2
 800882c:	2244      	movs	r2, #68	; 0x44
 800882e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	23b8      	movs	r3, #184	; 0xb8
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	5cd3      	ldrb	r3, [r2, r3]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d12f      	bne.n	800889c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2240      	movs	r2, #64	; 0x40
 8008842:	5a9b      	ldrh	r3, [r3, r2]
 8008844:	b29a      	uxth	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2104      	movs	r1, #4
 800884c:	430a      	orrs	r2, r1
 800884e:	b291      	uxth	r1, r2
 8008850:	2240      	movs	r2, #64	; 0x40
 8008852:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2240      	movs	r2, #64	; 0x40
 800885a:	5a9b      	ldrh	r3, [r3, r2]
 800885c:	b29a      	uxth	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2108      	movs	r1, #8
 8008864:	430a      	orrs	r2, r1
 8008866:	b291      	uxth	r1, r2
 8008868:	2240      	movs	r2, #64	; 0x40
 800886a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	23b8      	movs	r3, #184	; 0xb8
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	2101      	movs	r1, #1
 8008874:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2254      	movs	r2, #84	; 0x54
 800887c:	5a9b      	ldrh	r3, [r3, r2]
 800887e:	b29b      	uxth	r3, r3
 8008880:	089b      	lsrs	r3, r3, #2
 8008882:	223c      	movs	r2, #60	; 0x3c
 8008884:	4013      	ands	r3, r2
 8008886:	0019      	movs	r1, r3
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	23b9      	movs	r3, #185	; 0xb9
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2101      	movs	r1, #1
 8008894:	0018      	movs	r0, r3
 8008896:	f001 fc1b 	bl	800a0d0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800889a:	e02c      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	0018      	movs	r0, r3
 80088a0:	f7fb ffe2 	bl	8004868 <HAL_PCD_SuspendCallback>
    return;
 80088a4:	e027      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4013      	ands	r3, r2
 80088ae:	d010      	beq.n	80088d2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2244      	movs	r2, #68	; 0x44
 80088b6:	5a9b      	ldrh	r3, [r3, r2]
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4914      	ldr	r1, [pc, #80]	; (8008910 <HAL_PCD_IRQHandler+0x280>)
 80088c0:	400a      	ands	r2, r1
 80088c2:	b291      	uxth	r1, r2
 80088c4:	2244      	movs	r2, #68	; 0x44
 80088c6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	0018      	movs	r0, r3
 80088cc:	f7fb ff98 	bl	8004800 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80088d0:	e011      	b.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	2380      	movs	r3, #128	; 0x80
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	4013      	ands	r3, r2
 80088da:	d00c      	beq.n	80088f6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2244      	movs	r2, #68	; 0x44
 80088e2:	5a9b      	ldrh	r3, [r3, r2]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	490a      	ldr	r1, [pc, #40]	; (8008914 <HAL_PCD_IRQHandler+0x284>)
 80088ec:	400a      	ands	r2, r1
 80088ee:	b291      	uxth	r1, r2
 80088f0:	2244      	movs	r2, #68	; 0x44
 80088f2:	5299      	strh	r1, [r3, r2]

    return;
 80088f4:	46c0      	nop			; (mov r8, r8)
  }
}
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b004      	add	sp, #16
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	fffffbff 	.word	0xfffffbff
 8008900:	ffffbfff 	.word	0xffffbfff
 8008904:	ffffdfff 	.word	0xffffdfff
 8008908:	ffffefff 	.word	0xffffefff
 800890c:	fffff7ff 	.word	0xfffff7ff
 8008910:	fffffdff 	.word	0xfffffdff
 8008914:	fffffeff 	.word	0xfffffeff

08008918 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	000a      	movs	r2, r1
 8008922:	1cfb      	adds	r3, r7, #3
 8008924:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	23aa      	movs	r3, #170	; 0xaa
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	5cd3      	ldrb	r3, [r2, r3]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d101      	bne.n	8008936 <HAL_PCD_SetAddress+0x1e>
 8008932:	2302      	movs	r3, #2
 8008934:	e017      	b.n	8008966 <HAL_PCD_SetAddress+0x4e>
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	23aa      	movs	r3, #170	; 0xaa
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	2101      	movs	r1, #1
 800893e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	1cfa      	adds	r2, r7, #3
 8008944:	2124      	movs	r1, #36	; 0x24
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	1cfb      	adds	r3, r7, #3
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	0019      	movs	r1, r3
 8008954:	0010      	movs	r0, r2
 8008956:	f005 f9ad 	bl	800dcb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	23aa      	movs	r3, #170	; 0xaa
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	2100      	movs	r1, #0
 8008962:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	0018      	movs	r0, r3
 8008968:	46bd      	mov	sp, r7
 800896a:	b002      	add	sp, #8
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800896e:	b590      	push	{r4, r7, lr}
 8008970:	b085      	sub	sp, #20
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	000c      	movs	r4, r1
 8008978:	0010      	movs	r0, r2
 800897a:	0019      	movs	r1, r3
 800897c:	1cfb      	adds	r3, r7, #3
 800897e:	1c22      	adds	r2, r4, #0
 8008980:	701a      	strb	r2, [r3, #0]
 8008982:	003b      	movs	r3, r7
 8008984:	1c02      	adds	r2, r0, #0
 8008986:	801a      	strh	r2, [r3, #0]
 8008988:	1cbb      	adds	r3, r7, #2
 800898a:	1c0a      	adds	r2, r1, #0
 800898c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800898e:	230b      	movs	r3, #11
 8008990:	18fb      	adds	r3, r7, r3
 8008992:	2200      	movs	r2, #0
 8008994:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008996:	1cfb      	adds	r3, r7, #3
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	b25b      	sxtb	r3, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	da0f      	bge.n	80089c0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089a0:	1cfb      	adds	r3, r7, #3
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2207      	movs	r2, #7
 80089a6:	4013      	ands	r3, r2
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	0013      	movs	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	189b      	adds	r3, r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	18d3      	adds	r3, r2, r3
 80089b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	705a      	strb	r2, [r3, #1]
 80089be:	e00f      	b.n	80089e0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089c0:	1cfb      	adds	r3, r7, #3
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2207      	movs	r2, #7
 80089c6:	401a      	ands	r2, r3
 80089c8:	0013      	movs	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	189b      	adds	r3, r3, r2
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	3369      	adds	r3, #105	; 0x69
 80089d2:	33ff      	adds	r3, #255	; 0xff
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	18d3      	adds	r3, r2, r3
 80089d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80089e0:	1cfb      	adds	r3, r7, #3
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2207      	movs	r2, #7
 80089e6:	4013      	ands	r3, r2
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80089ee:	003b      	movs	r3, r7
 80089f0:	881a      	ldrh	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	1cba      	adds	r2, r7, #2
 80089fa:	7812      	ldrb	r2, [r2, #0]
 80089fc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80089fe:	1cbb      	adds	r3, r7, #2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d102      	bne.n	8008a0c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	23aa      	movs	r3, #170	; 0xaa
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	5cd3      	ldrb	r3, [r2, r3]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_PCD_EP_Open+0xae>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e013      	b.n	8008a44 <HAL_PCD_EP_Open+0xd6>
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	23aa      	movs	r3, #170	; 0xaa
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	2101      	movs	r1, #1
 8008a24:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	0011      	movs	r1, r2
 8008a2e:	0018      	movs	r0, r3
 8008a30:	f003 f9a4 	bl	800bd7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	23aa      	movs	r3, #170	; 0xaa
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	54d1      	strb	r1, [r2, r3]

  return ret;
 8008a3e:	230b      	movs	r3, #11
 8008a40:	18fb      	adds	r3, r7, r3
 8008a42:	781b      	ldrb	r3, [r3, #0]
}
 8008a44:	0018      	movs	r0, r3
 8008a46:	46bd      	mov	sp, r7
 8008a48:	b005      	add	sp, #20
 8008a4a:	bd90      	pop	{r4, r7, pc}

08008a4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	000a      	movs	r2, r1
 8008a56:	1cfb      	adds	r3, r7, #3
 8008a58:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008a5a:	1cfb      	adds	r3, r7, #3
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b25b      	sxtb	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	da0f      	bge.n	8008a84 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a64:	1cfb      	adds	r3, r7, #3
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2207      	movs	r2, #7
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	1c5a      	adds	r2, r3, #1
 8008a6e:	0013      	movs	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	189b      	adds	r3, r3, r2
 8008a74:	00db      	lsls	r3, r3, #3
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	18d3      	adds	r3, r2, r3
 8008a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	705a      	strb	r2, [r3, #1]
 8008a82:	e00f      	b.n	8008aa4 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a84:	1cfb      	adds	r3, r7, #3
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	2207      	movs	r2, #7
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	0013      	movs	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	189b      	adds	r3, r3, r2
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	3369      	adds	r3, #105	; 0x69
 8008a96:	33ff      	adds	r3, #255	; 0xff
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	18d3      	adds	r3, r2, r3
 8008a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aa4:	1cfb      	adds	r3, r7, #3
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2207      	movs	r2, #7
 8008aaa:	4013      	ands	r3, r2
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	23aa      	movs	r3, #170	; 0xaa
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	5cd3      	ldrb	r3, [r2, r3]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_PCD_EP_Close+0x76>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e011      	b.n	8008ae6 <HAL_PCD_EP_Close+0x9a>
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	23aa      	movs	r3, #170	; 0xaa
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	2101      	movs	r1, #1
 8008aca:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	0011      	movs	r1, r2
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f003 fcf3 	bl	800c4c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	23aa      	movs	r3, #170	; 0xaa
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	b004      	add	sp, #16
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b086      	sub	sp, #24
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	200b      	movs	r0, #11
 8008afc:	183b      	adds	r3, r7, r0
 8008afe:	1c0a      	adds	r2, r1, #0
 8008b00:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b02:	0001      	movs	r1, r0
 8008b04:	187b      	adds	r3, r7, r1
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2207      	movs	r2, #7
 8008b0a:	401a      	ands	r2, r3
 8008b0c:	0013      	movs	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	189b      	adds	r3, r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	3369      	adds	r3, #105	; 0x69
 8008b16:	33ff      	adds	r3, #255	; 0xff
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	18d3      	adds	r3, r2, r3
 8008b1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2200      	movs	r2, #0
 8008b34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b36:	187b      	adds	r3, r7, r1
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2207      	movs	r2, #7
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	0011      	movs	r1, r2
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f003 fe77 	bl	800c840 <USB_EPStartXfer>

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	0018      	movs	r0, r3
 8008b56:	46bd      	mov	sp, r7
 8008b58:	b006      	add	sp, #24
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	000a      	movs	r2, r1
 8008b66:	1cfb      	adds	r3, r7, #3
 8008b68:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008b6a:	1cfb      	adds	r3, r7, #3
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2207      	movs	r2, #7
 8008b70:	401a      	ands	r2, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	23c2      	movs	r3, #194	; 0xc2
 8008b76:	0059      	lsls	r1, r3, #1
 8008b78:	0013      	movs	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	189b      	adds	r3, r3, r2
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	18c3      	adds	r3, r0, r3
 8008b82:	185b      	adds	r3, r3, r1
 8008b84:	681b      	ldr	r3, [r3, #0]
}
 8008b86:	0018      	movs	r0, r3
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	b002      	add	sp, #8
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b086      	sub	sp, #24
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	60f8      	str	r0, [r7, #12]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
 8008b9a:	200b      	movs	r0, #11
 8008b9c:	183b      	adds	r3, r7, r0
 8008b9e:	1c0a      	adds	r2, r1, #0
 8008ba0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ba2:	183b      	adds	r3, r7, r0
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2207      	movs	r2, #7
 8008ba8:	4013      	ands	r3, r2
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	0013      	movs	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	189b      	adds	r3, r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	18d3      	adds	r3, r2, r3
 8008bb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2224      	movs	r2, #36	; 0x24
 8008bca:	2101      	movs	r1, #1
 8008bcc:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008be0:	183b      	adds	r3, r7, r0
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2207      	movs	r2, #7
 8008be6:	4013      	ands	r3, r2
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	0011      	movs	r1, r2
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	f003 fe22 	bl	800c840 <USB_EPStartXfer>

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	0018      	movs	r0, r3
 8008c00:	46bd      	mov	sp, r7
 8008c02:	b006      	add	sp, #24
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	000a      	movs	r2, r1
 8008c10:	1cfb      	adds	r3, r7, #3
 8008c12:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c14:	1cfb      	adds	r3, r7, #3
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2207      	movs	r2, #7
 8008c1a:	401a      	ands	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d901      	bls.n	8008c28 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e046      	b.n	8008cb6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c28:	1cfb      	adds	r3, r7, #3
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b25b      	sxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da0f      	bge.n	8008c52 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c32:	1cfb      	adds	r3, r7, #3
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2207      	movs	r2, #7
 8008c38:	4013      	ands	r3, r2
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	0013      	movs	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	189b      	adds	r3, r3, r2
 8008c42:	00db      	lsls	r3, r3, #3
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	705a      	strb	r2, [r3, #1]
 8008c50:	e00d      	b.n	8008c6e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008c52:	1cfb      	adds	r3, r7, #3
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	0013      	movs	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	189b      	adds	r3, r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	3369      	adds	r3, #105	; 0x69
 8008c60:	33ff      	adds	r3, #255	; 0xff
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	18d3      	adds	r3, r2, r3
 8008c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c74:	1cfb      	adds	r3, r7, #3
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2207      	movs	r2, #7
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	23aa      	movs	r3, #170	; 0xaa
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	5cd3      	ldrb	r3, [r2, r3]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d101      	bne.n	8008c92 <HAL_PCD_EP_SetStall+0x8c>
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e011      	b.n	8008cb6 <HAL_PCD_EP_SetStall+0xb0>
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	23aa      	movs	r3, #170	; 0xaa
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	2101      	movs	r1, #1
 8008c9a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	0011      	movs	r1, r2
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f004 ff03 	bl	800dab0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	23aa      	movs	r3, #170	; 0xaa
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	b004      	add	sp, #16
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	000a      	movs	r2, r1
 8008cc8:	1cfb      	adds	r3, r7, #3
 8008cca:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008ccc:	1cfb      	adds	r3, r7, #3
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	220f      	movs	r2, #15
 8008cd2:	401a      	ands	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d901      	bls.n	8008ce0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e048      	b.n	8008d72 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ce0:	1cfb      	adds	r3, r7, #3
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	b25b      	sxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	da0f      	bge.n	8008d0a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cea:	1cfb      	adds	r3, r7, #3
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	2207      	movs	r2, #7
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	1c5a      	adds	r2, r3, #1
 8008cf4:	0013      	movs	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	189b      	adds	r3, r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	18d3      	adds	r3, r2, r3
 8008d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2201      	movs	r2, #1
 8008d06:	705a      	strb	r2, [r3, #1]
 8008d08:	e00f      	b.n	8008d2a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d0a:	1cfb      	adds	r3, r7, #3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2207      	movs	r2, #7
 8008d10:	401a      	ands	r2, r3
 8008d12:	0013      	movs	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	189b      	adds	r3, r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	3369      	adds	r3, #105	; 0x69
 8008d1c:	33ff      	adds	r3, #255	; 0xff
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	18d3      	adds	r3, r2, r3
 8008d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d30:	1cfb      	adds	r3, r7, #3
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2207      	movs	r2, #7
 8008d36:	4013      	ands	r3, r2
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	23aa      	movs	r3, #170	; 0xaa
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	5cd3      	ldrb	r3, [r2, r3]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_PCD_EP_ClrStall+0x90>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e011      	b.n	8008d72 <HAL_PCD_EP_ClrStall+0xb4>
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	23aa      	movs	r3, #170	; 0xaa
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	2101      	movs	r1, #1
 8008d56:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	0011      	movs	r1, r2
 8008d60:	0018      	movs	r0, r3
 8008d62:	f004 fef5 	bl	800db50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	23aa      	movs	r3, #170	; 0xaa
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	0018      	movs	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	b004      	add	sp, #16
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008d7c:	b5b0      	push	{r4, r5, r7, lr}
 8008d7e:	b096      	sub	sp, #88	; 0x58
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008d84:	f000 fbec 	bl	8009560 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	204e      	movs	r0, #78	; 0x4e
 8008d8e:	183b      	adds	r3, r7, r0
 8008d90:	2144      	movs	r1, #68	; 0x44
 8008d92:	5a52      	ldrh	r2, [r2, r1]
 8008d94:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008d96:	183b      	adds	r3, r7, r0
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	244d      	movs	r4, #77	; 0x4d
 8008d9e:	193b      	adds	r3, r7, r4
 8008da0:	210f      	movs	r1, #15
 8008da2:	400a      	ands	r2, r1
 8008da4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8008da6:	193b      	adds	r3, r7, r4
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d000      	beq.n	8008db0 <PCD_EP_ISR_Handler+0x34>
 8008dae:	e18f      	b.n	80090d0 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008db0:	183b      	adds	r3, r7, r0
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	2210      	movs	r2, #16
 8008db6:	4013      	ands	r3, r2
 8008db8:	d155      	bne.n	8008e66 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	200e      	movs	r0, #14
 8008dc4:	183b      	adds	r3, r7, r0
 8008dc6:	49bb      	ldr	r1, [pc, #748]	; (80090b4 <PCD_EP_ISR_Handler+0x338>)
 8008dc8:	400a      	ands	r2, r1
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	183a      	adds	r2, r7, r0
 8008dd2:	8812      	ldrh	r2, [r2, #0]
 8008dd4:	49b8      	ldr	r1, [pc, #736]	; (80090b8 <PCD_EP_ISR_Handler+0x33c>)
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	b292      	uxth	r2, r2
 8008dda:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3328      	adds	r3, #40	; 0x28
 8008de0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2250      	movs	r2, #80	; 0x50
 8008de8:	5a9b      	ldrh	r3, [r3, r2]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	001a      	movs	r2, r3
 8008dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	18d2      	adds	r2, r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	18d3      	adds	r3, r2, r3
 8008dfc:	4aaf      	ldr	r2, [pc, #700]	; (80090bc <PCD_EP_ISR_Handler+0x340>)
 8008dfe:	4694      	mov	ip, r2
 8008e00:	4463      	add	r3, ip
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	059b      	lsls	r3, r3, #22
 8008e06:	0d9a      	lsrs	r2, r3, #22
 8008e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e0e:	695a      	ldr	r2, [r3, #20]
 8008e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	18d2      	adds	r2, r2, r3
 8008e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e18:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f7fb fcd0 	bl	80047c4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2224      	movs	r2, #36	; 0x24
 8008e28:	5c9b      	ldrb	r3, [r3, r2]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <PCD_EP_ISR_Handler+0xb8>
 8008e30:	f000 fb96 	bl	8009560 <PCD_EP_ISR_Handler+0x7e4>
 8008e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <PCD_EP_ISR_Handler+0xc4>
 8008e3c:	f000 fb90 	bl	8009560 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2224      	movs	r2, #36	; 0x24
 8008e44:	5c9b      	ldrb	r3, [r3, r2]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2280      	movs	r2, #128	; 0x80
 8008e4a:	4252      	negs	r2, r2
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	b291      	uxth	r1, r2
 8008e56:	224c      	movs	r2, #76	; 0x4c
 8008e58:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2224      	movs	r2, #36	; 0x24
 8008e5e:	2100      	movs	r1, #0
 8008e60:	5499      	strb	r1, [r3, r2]
 8008e62:	f000 fb7d 	bl	8009560 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3369      	adds	r3, #105	; 0x69
 8008e6a:	33ff      	adds	r3, #255	; 0xff
 8008e6c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	214a      	movs	r1, #74	; 0x4a
 8008e74:	187b      	adds	r3, r7, r1
 8008e76:	8812      	ldrh	r2, [r2, #0]
 8008e78:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008e7a:	187b      	adds	r3, r7, r1
 8008e7c:	881a      	ldrh	r2, [r3, #0]
 8008e7e:	2380      	movs	r3, #128	; 0x80
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	4013      	ands	r3, r2
 8008e84:	d037      	beq.n	8008ef6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2250      	movs	r2, #80	; 0x50
 8008e8c:	5a9b      	ldrh	r3, [r3, r2]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	001a      	movs	r2, r3
 8008e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	00db      	lsls	r3, r3, #3
 8008e98:	18d2      	adds	r2, r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	18d3      	adds	r3, r2, r3
 8008ea0:	4a87      	ldr	r2, [pc, #540]	; (80090c0 <PCD_EP_ISR_Handler+0x344>)
 8008ea2:	4694      	mov	ip, r2
 8008ea4:	4463      	add	r3, ip
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	059b      	lsls	r3, r3, #22
 8008eaa:	0d9a      	lsrs	r2, r3, #22
 8008eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	22ac      	movs	r2, #172	; 0xac
 8008eb8:	0092      	lsls	r2, r2, #2
 8008eba:	1899      	adds	r1, r3, r2
 8008ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ebe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ec2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f004 ff76 	bl	800ddb6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	2010      	movs	r0, #16
 8008ed4:	183b      	adds	r3, r7, r0
 8008ed6:	497b      	ldr	r1, [pc, #492]	; (80090c4 <PCD_EP_ISR_Handler+0x348>)
 8008ed8:	400a      	ands	r2, r1
 8008eda:	801a      	strh	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	183a      	adds	r2, r7, r0
 8008ee2:	8812      	ldrh	r2, [r2, #0]
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	b292      	uxth	r2, r2
 8008eea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7fb fc32 	bl	8004758 <HAL_PCD_SetupStageCallback>
 8008ef4:	e334      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008ef6:	234a      	movs	r3, #74	; 0x4a
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	2200      	movs	r2, #0
 8008efc:	5e9b      	ldrsh	r3, [r3, r2]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	db00      	blt.n	8008f04 <PCD_EP_ISR_Handler+0x188>
 8008f02:	e32d      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	201e      	movs	r0, #30
 8008f0e:	183b      	adds	r3, r7, r0
 8008f10:	496c      	ldr	r1, [pc, #432]	; (80090c4 <PCD_EP_ISR_Handler+0x348>)
 8008f12:	400a      	ands	r2, r1
 8008f14:	801a      	strh	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	183a      	adds	r2, r7, r0
 8008f1c:	8812      	ldrh	r2, [r2, #0]
 8008f1e:	2180      	movs	r1, #128	; 0x80
 8008f20:	430a      	orrs	r2, r1
 8008f22:	b292      	uxth	r2, r2
 8008f24:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2250      	movs	r2, #80	; 0x50
 8008f2c:	5a9b      	ldrh	r3, [r3, r2]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	001a      	movs	r2, r3
 8008f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	18d2      	adds	r2, r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	18d3      	adds	r3, r2, r3
 8008f40:	4a5f      	ldr	r2, [pc, #380]	; (80090c0 <PCD_EP_ISR_Handler+0x344>)
 8008f42:	4694      	mov	ip, r2
 8008f44:	4463      	add	r3, ip
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	059b      	lsls	r3, r3, #22
 8008f4a:	0d9a      	lsrs	r2, r3, #22
 8008f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01a      	beq.n	8008f8e <PCD_EP_ISR_Handler+0x212>
 8008f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d016      	beq.n	8008f8e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f66:	6959      	ldr	r1, [r3, #20]
 8008f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f004 ff20 	bl	800ddb6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	18d2      	adds	r2, r2, r3
 8008f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2100      	movs	r1, #0
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f7fb fbfa 	bl	8004782 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	214a      	movs	r1, #74	; 0x4a
 8008f94:	187b      	adds	r3, r7, r1
 8008f96:	8812      	ldrh	r2, [r2, #0]
 8008f98:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008f9a:	187b      	adds	r3, r7, r1
 8008f9c:	881a      	ldrh	r2, [r3, #0]
 8008f9e:	2380      	movs	r3, #128	; 0x80
 8008fa0:	011b      	lsls	r3, r3, #4
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	d000      	beq.n	8008fa8 <PCD_EP_ISR_Handler+0x22c>
 8008fa6:	e2db      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
 8008fa8:	187b      	adds	r3, r7, r1
 8008faa:	881a      	ldrh	r2, [r3, #0]
 8008fac:	23c0      	movs	r3, #192	; 0xc0
 8008fae:	019b      	lsls	r3, r3, #6
 8008fb0:	401a      	ands	r2, r3
 8008fb2:	23c0      	movs	r3, #192	; 0xc0
 8008fb4:	019b      	lsls	r3, r3, #6
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d100      	bne.n	8008fbc <PCD_EP_ISR_Handler+0x240>
 8008fba:	e2d1      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	61bb      	str	r3, [r7, #24]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2250      	movs	r2, #80	; 0x50
 8008fc8:	5a9b      	ldrh	r3, [r3, r2]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	001a      	movs	r2, r3
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	189b      	adds	r3, r3, r2
 8008fd2:	61bb      	str	r3, [r7, #24]
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	4a3a      	ldr	r2, [pc, #232]	; (80090c0 <PCD_EP_ISR_Handler+0x344>)
 8008fd8:	4694      	mov	ip, r2
 8008fda:	4463      	add	r3, ip
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	059b      	lsls	r3, r3, #22
 8008fe6:	0d9b      	lsrs	r3, r3, #22
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	801a      	strh	r2, [r3, #0]
 8008fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ff4:	d91a      	bls.n	800902c <PCD_EP_ISR_Handler+0x2b0>
 8008ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	221f      	movs	r2, #31
 8009004:	4013      	ands	r3, r2
 8009006:	d102      	bne.n	800900e <PCD_EP_ISR_Handler+0x292>
 8009008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800900a:	3b01      	subs	r3, #1
 800900c:	647b      	str	r3, [r7, #68]	; 0x44
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b29a      	uxth	r2, r3
 8009014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009016:	b29b      	uxth	r3, r3
 8009018:	029b      	lsls	r3, r3, #10
 800901a:	b29b      	uxth	r3, r3
 800901c:	4313      	orrs	r3, r2
 800901e:	b29b      	uxth	r3, r3
 8009020:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <PCD_EP_ISR_Handler+0x33c>)
 8009022:	4313      	orrs	r3, r2
 8009024:	b29a      	uxth	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	801a      	strh	r2, [r3, #0]
 800902a:	e023      	b.n	8009074 <PCD_EP_ISR_Handler+0x2f8>
 800902c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d108      	bne.n	8009046 <PCD_EP_ISR_Handler+0x2ca>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b29b      	uxth	r3, r3
 800903a:	4a1f      	ldr	r2, [pc, #124]	; (80090b8 <PCD_EP_ISR_Handler+0x33c>)
 800903c:	4313      	orrs	r3, r2
 800903e:	b29a      	uxth	r2, r3
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	e016      	b.n	8009074 <PCD_EP_ISR_Handler+0x2f8>
 8009046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	085b      	lsrs	r3, r3, #1
 800904c:	647b      	str	r3, [r7, #68]	; 0x44
 800904e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2201      	movs	r2, #1
 8009054:	4013      	ands	r3, r2
 8009056:	d002      	beq.n	800905e <PCD_EP_ISR_Handler+0x2e2>
 8009058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800905a:	3301      	adds	r3, #1
 800905c:	647b      	str	r3, [r7, #68]	; 0x44
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	b29a      	uxth	r2, r3
 8009064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009066:	b29b      	uxth	r3, r3
 8009068:	029b      	lsls	r3, r3, #10
 800906a:	b29b      	uxth	r3, r3
 800906c:	4313      	orrs	r3, r2
 800906e:	b29a      	uxth	r2, r3
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29a      	uxth	r2, r3
 800907c:	2012      	movs	r0, #18
 800907e:	183b      	adds	r3, r7, r0
 8009080:	4911      	ldr	r1, [pc, #68]	; (80090c8 <PCD_EP_ISR_Handler+0x34c>)
 8009082:	400a      	ands	r2, r1
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	183b      	adds	r3, r7, r0
 8009088:	183a      	adds	r2, r7, r0
 800908a:	8812      	ldrh	r2, [r2, #0]
 800908c:	2180      	movs	r1, #128	; 0x80
 800908e:	0149      	lsls	r1, r1, #5
 8009090:	404a      	eors	r2, r1
 8009092:	801a      	strh	r2, [r3, #0]
 8009094:	183b      	adds	r3, r7, r0
 8009096:	183a      	adds	r2, r7, r0
 8009098:	8812      	ldrh	r2, [r2, #0]
 800909a:	2180      	movs	r1, #128	; 0x80
 800909c:	0189      	lsls	r1, r1, #6
 800909e:	404a      	eors	r2, r1
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	183a      	adds	r2, r7, r0
 80090a8:	8812      	ldrh	r2, [r2, #0]
 80090aa:	4908      	ldr	r1, [pc, #32]	; (80090cc <PCD_EP_ISR_Handler+0x350>)
 80090ac:	430a      	orrs	r2, r1
 80090ae:	b292      	uxth	r2, r2
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	e255      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
 80090b4:	ffff8f0f 	.word	0xffff8f0f
 80090b8:	ffff8000 	.word	0xffff8000
 80090bc:	00000402 	.word	0x00000402
 80090c0:	00000406 	.word	0x00000406
 80090c4:	00000f8f 	.word	0x00000f8f
 80090c8:	ffffbf8f 	.word	0xffffbf8f
 80090cc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	001a      	movs	r2, r3
 80090d6:	204d      	movs	r0, #77	; 0x4d
 80090d8:	183b      	adds	r3, r7, r0
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	18d2      	adds	r2, r2, r3
 80090e0:	214a      	movs	r1, #74	; 0x4a
 80090e2:	187b      	adds	r3, r7, r1
 80090e4:	8812      	ldrh	r2, [r2, #0]
 80090e6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80090e8:	187b      	adds	r3, r7, r1
 80090ea:	2200      	movs	r2, #0
 80090ec:	5e9b      	ldrsh	r3, [r3, r2]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	db00      	blt.n	80090f4 <PCD_EP_ISR_Handler+0x378>
 80090f2:	e0fa      	b.n	80092ea <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	001a      	movs	r2, r3
 80090fa:	183b      	adds	r3, r7, r0
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	18d3      	adds	r3, r2, r3
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	b29a      	uxth	r2, r3
 8009106:	2448      	movs	r4, #72	; 0x48
 8009108:	193b      	adds	r3, r7, r4
 800910a:	49d1      	ldr	r1, [pc, #836]	; (8009450 <PCD_EP_ISR_Handler+0x6d4>)
 800910c:	400a      	ands	r2, r1
 800910e:	801a      	strh	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	001a      	movs	r2, r3
 8009116:	183b      	adds	r3, r7, r0
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	18d3      	adds	r3, r2, r3
 800911e:	193a      	adds	r2, r7, r4
 8009120:	8812      	ldrh	r2, [r2, #0]
 8009122:	2180      	movs	r1, #128	; 0x80
 8009124:	430a      	orrs	r2, r1
 8009126:	b292      	uxth	r2, r2
 8009128:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800912a:	183b      	adds	r3, r7, r0
 800912c:	781a      	ldrb	r2, [r3, #0]
 800912e:	0013      	movs	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	189b      	adds	r3, r3, r2
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	3369      	adds	r3, #105	; 0x69
 8009138:	33ff      	adds	r3, #255	; 0xff
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	18d3      	adds	r3, r2, r3
 800913e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009142:	7b1b      	ldrb	r3, [r3, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d125      	bne.n	8009194 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2250      	movs	r2, #80	; 0x50
 800914e:	5a9b      	ldrh	r3, [r3, r2]
 8009150:	b29b      	uxth	r3, r3
 8009152:	001a      	movs	r2, r3
 8009154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	18d2      	adds	r2, r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	18d3      	adds	r3, r2, r3
 8009162:	4abc      	ldr	r2, [pc, #752]	; (8009454 <PCD_EP_ISR_Handler+0x6d8>)
 8009164:	4694      	mov	ip, r2
 8009166:	4463      	add	r3, ip
 8009168:	881a      	ldrh	r2, [r3, #0]
 800916a:	2450      	movs	r4, #80	; 0x50
 800916c:	193b      	adds	r3, r7, r4
 800916e:	0592      	lsls	r2, r2, #22
 8009170:	0d92      	lsrs	r2, r2, #22
 8009172:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8009174:	193b      	adds	r3, r7, r4
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d100      	bne.n	800917e <PCD_EP_ISR_Handler+0x402>
 800917c:	e08d      	b.n	800929a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009184:	6959      	ldr	r1, [r3, #20]
 8009186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009188:	88da      	ldrh	r2, [r3, #6]
 800918a:	193b      	adds	r3, r7, r4
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	f004 fe12 	bl	800ddb6 <USB_ReadPMA>
 8009192:	e082      	b.n	800929a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009196:	78db      	ldrb	r3, [r3, #3]
 8009198:	2b02      	cmp	r3, #2
 800919a:	d10c      	bne.n	80091b6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800919c:	2350      	movs	r3, #80	; 0x50
 800919e:	18fc      	adds	r4, r7, r3
 80091a0:	234a      	movs	r3, #74	; 0x4a
 80091a2:	18fb      	adds	r3, r7, r3
 80091a4:	881a      	ldrh	r2, [r3, #0]
 80091a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	0018      	movs	r0, r3
 80091ac:	f000 f9ec 	bl	8009588 <HAL_PCD_EP_DB_Receive>
 80091b0:	0003      	movs	r3, r0
 80091b2:	8023      	strh	r3, [r4, #0]
 80091b4:	e071      	b.n	800929a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	001a      	movs	r2, r3
 80091bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	18d3      	adds	r3, r2, r3
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	2052      	movs	r0, #82	; 0x52
 80091ca:	183b      	adds	r3, r7, r0
 80091cc:	49a2      	ldr	r1, [pc, #648]	; (8009458 <PCD_EP_ISR_Handler+0x6dc>)
 80091ce:	400a      	ands	r2, r1
 80091d0:	801a      	strh	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	001a      	movs	r2, r3
 80091d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	18d3      	adds	r3, r2, r3
 80091e0:	183a      	adds	r2, r7, r0
 80091e2:	8812      	ldrh	r2, [r2, #0]
 80091e4:	499d      	ldr	r1, [pc, #628]	; (800945c <PCD_EP_ISR_Handler+0x6e0>)
 80091e6:	430a      	orrs	r2, r1
 80091e8:	b292      	uxth	r2, r2
 80091ea:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	001a      	movs	r2, r3
 80091f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	18d3      	adds	r3, r2, r3
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	001a      	movs	r2, r3
 8009200:	2380      	movs	r3, #128	; 0x80
 8009202:	01db      	lsls	r3, r3, #7
 8009204:	4013      	ands	r3, r2
 8009206:	d024      	beq.n	8009252 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2250      	movs	r2, #80	; 0x50
 800920e:	5a9b      	ldrh	r3, [r3, r2]
 8009210:	b29b      	uxth	r3, r3
 8009212:	001a      	movs	r2, r3
 8009214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	18d2      	adds	r2, r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	18d3      	adds	r3, r2, r3
 8009222:	4a8f      	ldr	r2, [pc, #572]	; (8009460 <PCD_EP_ISR_Handler+0x6e4>)
 8009224:	4694      	mov	ip, r2
 8009226:	4463      	add	r3, ip
 8009228:	881a      	ldrh	r2, [r3, #0]
 800922a:	2450      	movs	r4, #80	; 0x50
 800922c:	193b      	adds	r3, r7, r4
 800922e:	0592      	lsls	r2, r2, #22
 8009230:	0d92      	lsrs	r2, r2, #22
 8009232:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8009234:	193b      	adds	r3, r7, r4
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d02e      	beq.n	800929a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009242:	6959      	ldr	r1, [r3, #20]
 8009244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009246:	891a      	ldrh	r2, [r3, #8]
 8009248:	193b      	adds	r3, r7, r4
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	f004 fdb3 	bl	800ddb6 <USB_ReadPMA>
 8009250:	e023      	b.n	800929a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2250      	movs	r2, #80	; 0x50
 8009258:	5a9b      	ldrh	r3, [r3, r2]
 800925a:	b29b      	uxth	r3, r3
 800925c:	001a      	movs	r2, r3
 800925e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	18d2      	adds	r2, r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	18d3      	adds	r3, r2, r3
 800926c:	4a79      	ldr	r2, [pc, #484]	; (8009454 <PCD_EP_ISR_Handler+0x6d8>)
 800926e:	4694      	mov	ip, r2
 8009270:	4463      	add	r3, ip
 8009272:	881a      	ldrh	r2, [r3, #0]
 8009274:	2450      	movs	r4, #80	; 0x50
 8009276:	193b      	adds	r3, r7, r4
 8009278:	0592      	lsls	r2, r2, #22
 800927a:	0d92      	lsrs	r2, r2, #22
 800927c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800927e:	193b      	adds	r3, r7, r4
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d009      	beq.n	800929a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800928c:	6959      	ldr	r1, [r3, #20]
 800928e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009290:	895a      	ldrh	r2, [r3, #10]
 8009292:	193b      	adds	r3, r7, r4
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	f004 fd8e 	bl	800ddb6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800929a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800929c:	69da      	ldr	r2, [r3, #28]
 800929e:	2150      	movs	r1, #80	; 0x50
 80092a0:	187b      	adds	r3, r7, r1
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	18d2      	adds	r2, r2, r3
 80092a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80092aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ac:	695a      	ldr	r2, [r3, #20]
 80092ae:	187b      	adds	r3, r7, r1
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	18d2      	adds	r2, r2, r3
 80092b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80092b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d005      	beq.n	80092cc <PCD_EP_ISR_Handler+0x550>
 80092c0:	187b      	adds	r3, r7, r1
 80092c2:	881a      	ldrh	r2, [r3, #0]
 80092c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d207      	bcs.n	80092dc <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80092cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	0011      	movs	r1, r2
 80092d4:	0018      	movs	r0, r3
 80092d6:	f7fb fa54 	bl	8004782 <HAL_PCD_DataOutStageCallback>
 80092da:	e006      	b.n	80092ea <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092e2:	0011      	movs	r1, r2
 80092e4:	0018      	movs	r0, r3
 80092e6:	f003 faab 	bl	800c840 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80092ea:	244a      	movs	r4, #74	; 0x4a
 80092ec:	193b      	adds	r3, r7, r4
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	2280      	movs	r2, #128	; 0x80
 80092f2:	4013      	ands	r3, r2
 80092f4:	d100      	bne.n	80092f8 <PCD_EP_ISR_Handler+0x57c>
 80092f6:	e133      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80092f8:	204d      	movs	r0, #77	; 0x4d
 80092fa:	183b      	adds	r3, r7, r0
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	0013      	movs	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	189b      	adds	r3, r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	18d3      	adds	r3, r2, r3
 800930c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	001a      	movs	r2, r3
 8009314:	183b      	adds	r3, r7, r0
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	18d3      	adds	r3, r2, r3
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	b29a      	uxth	r2, r3
 8009320:	2542      	movs	r5, #66	; 0x42
 8009322:	197b      	adds	r3, r7, r5
 8009324:	494f      	ldr	r1, [pc, #316]	; (8009464 <PCD_EP_ISR_Handler+0x6e8>)
 8009326:	400a      	ands	r2, r1
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	001a      	movs	r2, r3
 8009330:	183b      	adds	r3, r7, r0
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	18d3      	adds	r3, r2, r3
 8009338:	197a      	adds	r2, r7, r5
 800933a:	8812      	ldrh	r2, [r2, #0]
 800933c:	494a      	ldr	r1, [pc, #296]	; (8009468 <PCD_EP_ISR_Handler+0x6ec>)
 800933e:	430a      	orrs	r2, r1
 8009340:	b292      	uxth	r2, r2
 8009342:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009346:	78db      	ldrb	r3, [r3, #3]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d000      	beq.n	800934e <PCD_EP_ISR_Handler+0x5d2>
 800934c:	e0af      	b.n	80094ae <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800934e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009350:	2200      	movs	r2, #0
 8009352:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009356:	7b1b      	ldrb	r3, [r3, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d100      	bne.n	800935e <PCD_EP_ISR_Handler+0x5e2>
 800935c:	e09f      	b.n	800949e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800935e:	193b      	adds	r3, r7, r4
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	2240      	movs	r2, #64	; 0x40
 8009364:	4013      	ands	r3, r2
 8009366:	d046      	beq.n	80093f6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800936a:	785b      	ldrb	r3, [r3, #1]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d125      	bne.n	80093bc <PCD_EP_ISR_Handler+0x640>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2250      	movs	r2, #80	; 0x50
 800937c:	5a9b      	ldrh	r3, [r3, r2]
 800937e:	b29b      	uxth	r3, r3
 8009380:	001a      	movs	r2, r3
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	189b      	adds	r3, r3, r2
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
 8009388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	00da      	lsls	r2, r3, #3
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	18d3      	adds	r3, r2, r3
 8009392:	4a33      	ldr	r2, [pc, #204]	; (8009460 <PCD_EP_ISR_Handler+0x6e4>)
 8009394:	4694      	mov	ip, r2
 8009396:	4463      	add	r3, ip
 8009398:	623b      	str	r3, [r7, #32]
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	b29b      	uxth	r3, r3
 80093a0:	059b      	lsls	r3, r3, #22
 80093a2:	0d9b      	lsrs	r3, r3, #22
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	4a2d      	ldr	r2, [pc, #180]	; (8009468 <PCD_EP_ISR_Handler+0x6ec>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	801a      	strh	r2, [r3, #0]
 80093ba:	e070      	b.n	800949e <PCD_EP_ISR_Handler+0x722>
 80093bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093be:	785b      	ldrb	r3, [r3, #1]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d16c      	bne.n	800949e <PCD_EP_ISR_Handler+0x722>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2250      	movs	r2, #80	; 0x50
 80093d0:	5a9b      	ldrh	r3, [r3, r2]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	001a      	movs	r2, r3
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	189b      	adds	r3, r3, r2
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	00da      	lsls	r2, r3, #3
 80093e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e4:	18d3      	adds	r3, r2, r3
 80093e6:	4a1e      	ldr	r2, [pc, #120]	; (8009460 <PCD_EP_ISR_Handler+0x6e4>)
 80093e8:	4694      	mov	ip, r2
 80093ea:	4463      	add	r3, ip
 80093ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	2200      	movs	r2, #0
 80093f2:	801a      	strh	r2, [r3, #0]
 80093f4:	e053      	b.n	800949e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d133      	bne.n	800946c <PCD_EP_ISR_Handler+0x6f0>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	637b      	str	r3, [r7, #52]	; 0x34
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2250      	movs	r2, #80	; 0x50
 8009410:	5a9b      	ldrh	r3, [r3, r2]
 8009412:	b29b      	uxth	r3, r3
 8009414:	001a      	movs	r2, r3
 8009416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009418:	189b      	adds	r3, r3, r2
 800941a:	637b      	str	r3, [r7, #52]	; 0x34
 800941c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	00da      	lsls	r2, r3, #3
 8009422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009424:	18d3      	adds	r3, r2, r3
 8009426:	4a0b      	ldr	r2, [pc, #44]	; (8009454 <PCD_EP_ISR_Handler+0x6d8>)
 8009428:	4694      	mov	ip, r2
 800942a:	4463      	add	r3, ip
 800942c:	633b      	str	r3, [r7, #48]	; 0x30
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	b29b      	uxth	r3, r3
 8009434:	059b      	lsls	r3, r3, #22
 8009436:	0d9b      	lsrs	r3, r3, #22
 8009438:	b29a      	uxth	r2, r3
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	801a      	strh	r2, [r3, #0]
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	b29b      	uxth	r3, r3
 8009444:	4a08      	ldr	r2, [pc, #32]	; (8009468 <PCD_EP_ISR_Handler+0x6ec>)
 8009446:	4313      	orrs	r3, r2
 8009448:	b29a      	uxth	r2, r3
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	801a      	strh	r2, [r3, #0]
 800944e:	e026      	b.n	800949e <PCD_EP_ISR_Handler+0x722>
 8009450:	00000f8f 	.word	0x00000f8f
 8009454:	00000406 	.word	0x00000406
 8009458:	ffff8f8f 	.word	0xffff8f8f
 800945c:	ffff80c0 	.word	0xffff80c0
 8009460:	00000402 	.word	0x00000402
 8009464:	ffff8f0f 	.word	0xffff8f0f
 8009468:	ffff8000 	.word	0xffff8000
 800946c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d114      	bne.n	800949e <PCD_EP_ISR_Handler+0x722>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2250      	movs	r2, #80	; 0x50
 800947a:	5a9b      	ldrh	r3, [r3, r2]
 800947c:	b29b      	uxth	r3, r3
 800947e:	001a      	movs	r2, r3
 8009480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009482:	189b      	adds	r3, r3, r2
 8009484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	00da      	lsls	r2, r3, #3
 800948c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800948e:	18d3      	adds	r3, r2, r3
 8009490:	4a3b      	ldr	r2, [pc, #236]	; (8009580 <PCD_EP_ISR_Handler+0x804>)
 8009492:	4694      	mov	ip, r2
 8009494:	4463      	add	r3, ip
 8009496:	63bb      	str	r3, [r7, #56]	; 0x38
 8009498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949a:	2200      	movs	r2, #0
 800949c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800949e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094a0:	781a      	ldrb	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	0011      	movs	r1, r2
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7fb f98c 	bl	80047c4 <HAL_PCD_DataInStageCallback>
 80094ac:	e058      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80094ae:	234a      	movs	r3, #74	; 0x4a
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	881a      	ldrh	r2, [r3, #0]
 80094b4:	2380      	movs	r3, #128	; 0x80
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	4013      	ands	r3, r2
 80094ba:	d149      	bne.n	8009550 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2250      	movs	r2, #80	; 0x50
 80094c2:	5a9b      	ldrh	r3, [r3, r2]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	001a      	movs	r2, r3
 80094c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	00db      	lsls	r3, r3, #3
 80094ce:	18d2      	adds	r2, r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	18d3      	adds	r3, r2, r3
 80094d6:	4a2b      	ldr	r2, [pc, #172]	; (8009584 <PCD_EP_ISR_Handler+0x808>)
 80094d8:	4694      	mov	ip, r2
 80094da:	4463      	add	r3, ip
 80094dc:	881a      	ldrh	r2, [r3, #0]
 80094de:	2140      	movs	r1, #64	; 0x40
 80094e0:	187b      	adds	r3, r7, r1
 80094e2:	0592      	lsls	r2, r2, #22
 80094e4:	0d92      	lsrs	r2, r2, #22
 80094e6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80094e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	187b      	adds	r3, r7, r1
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d907      	bls.n	8009504 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80094f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f6:	699a      	ldr	r2, [r3, #24]
 80094f8:	187b      	adds	r3, r7, r1
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	1ad2      	subs	r2, r2, r3
 80094fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009500:	619a      	str	r2, [r3, #24]
 8009502:	e002      	b.n	800950a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8009504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009506:	2200      	movs	r2, #0
 8009508:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800950a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d107      	bne.n	8009522 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009514:	781a      	ldrb	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	0011      	movs	r1, r2
 800951a:	0018      	movs	r0, r3
 800951c:	f7fb f952 	bl	80047c4 <HAL_PCD_DataInStageCallback>
 8009520:	e01e      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009524:	695a      	ldr	r2, [r3, #20]
 8009526:	2140      	movs	r1, #64	; 0x40
 8009528:	187b      	adds	r3, r7, r1
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	18d2      	adds	r2, r2, r3
 800952e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009530:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009534:	69da      	ldr	r2, [r3, #28]
 8009536:	187b      	adds	r3, r7, r1
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	18d2      	adds	r2, r2, r3
 800953c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800953e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009546:	0011      	movs	r1, r2
 8009548:	0018      	movs	r0, r3
 800954a:	f003 f979 	bl	800c840 <USB_EPStartXfer>
 800954e:	e007      	b.n	8009560 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009550:	234a      	movs	r3, #74	; 0x4a
 8009552:	18fb      	adds	r3, r7, r3
 8009554:	881a      	ldrh	r2, [r3, #0]
 8009556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	0018      	movs	r0, r3
 800955c:	f000 f930 	bl	80097c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2244      	movs	r2, #68	; 0x44
 8009566:	5a9b      	ldrh	r3, [r3, r2]
 8009568:	b29b      	uxth	r3, r3
 800956a:	b21b      	sxth	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	da01      	bge.n	8009574 <PCD_EP_ISR_Handler+0x7f8>
 8009570:	f7ff fc0a 	bl	8008d88 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	0018      	movs	r0, r3
 8009578:	46bd      	mov	sp, r7
 800957a:	b016      	add	sp, #88	; 0x58
 800957c:	bdb0      	pop	{r4, r5, r7, pc}
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	00000406 	.word	0x00000406
 8009584:	00000402 	.word	0x00000402

08009588 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b089      	sub	sp, #36	; 0x24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	1dbb      	adds	r3, r7, #6
 8009594:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009596:	1dbb      	adds	r3, r7, #6
 8009598:	881a      	ldrh	r2, [r3, #0]
 800959a:	2380      	movs	r3, #128	; 0x80
 800959c:	01db      	lsls	r3, r3, #7
 800959e:	4013      	ands	r3, r2
 80095a0:	d100      	bne.n	80095a4 <HAL_PCD_EP_DB_Receive+0x1c>
 80095a2:	e07d      	b.n	80096a0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2250      	movs	r2, #80	; 0x50
 80095aa:	5a9b      	ldrh	r3, [r3, r2]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	001a      	movs	r2, r3
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	18d2      	adds	r2, r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	18d3      	adds	r3, r2, r3
 80095be:	4a7a      	ldr	r2, [pc, #488]	; (80097a8 <HAL_PCD_EP_DB_Receive+0x220>)
 80095c0:	4694      	mov	ip, r2
 80095c2:	4463      	add	r3, ip
 80095c4:	881a      	ldrh	r2, [r3, #0]
 80095c6:	211a      	movs	r1, #26
 80095c8:	187b      	adds	r3, r7, r1
 80095ca:	0592      	lsls	r2, r2, #22
 80095cc:	0d92      	lsrs	r2, r2, #22
 80095ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	699a      	ldr	r2, [r3, #24]
 80095d4:	187b      	adds	r3, r7, r1
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d307      	bcc.n	80095ec <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	699a      	ldr	r2, [r3, #24]
 80095e0:	187b      	adds	r3, r7, r1
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	1ad2      	subs	r2, r2, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	619a      	str	r2, [r3, #24]
 80095ea:	e002      	b.n	80095f2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d121      	bne.n	800963e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	001a      	movs	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	18d3      	adds	r3, r2, r3
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b29a      	uxth	r2, r3
 800960c:	2018      	movs	r0, #24
 800960e:	183b      	adds	r3, r7, r0
 8009610:	4966      	ldr	r1, [pc, #408]	; (80097ac <HAL_PCD_EP_DB_Receive+0x224>)
 8009612:	400a      	ands	r2, r1
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	183b      	adds	r3, r7, r0
 8009618:	183a      	adds	r2, r7, r0
 800961a:	8812      	ldrh	r2, [r2, #0]
 800961c:	2180      	movs	r1, #128	; 0x80
 800961e:	0189      	lsls	r1, r1, #6
 8009620:	404a      	eors	r2, r1
 8009622:	801a      	strh	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	001a      	movs	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	18d3      	adds	r3, r2, r3
 8009632:	183a      	adds	r2, r7, r0
 8009634:	8812      	ldrh	r2, [r2, #0]
 8009636:	495e      	ldr	r1, [pc, #376]	; (80097b0 <HAL_PCD_EP_DB_Receive+0x228>)
 8009638:	430a      	orrs	r2, r1
 800963a:	b292      	uxth	r2, r2
 800963c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800963e:	1dbb      	adds	r3, r7, #6
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	2240      	movs	r2, #64	; 0x40
 8009644:	4013      	ands	r3, r2
 8009646:	d01a      	beq.n	800967e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	001a      	movs	r2, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	18d3      	adds	r3, r2, r3
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	b29a      	uxth	r2, r3
 800965a:	2016      	movs	r0, #22
 800965c:	183b      	adds	r3, r7, r0
 800965e:	4955      	ldr	r1, [pc, #340]	; (80097b4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8009660:	400a      	ands	r2, r1
 8009662:	801a      	strh	r2, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	001a      	movs	r2, r3
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	18d3      	adds	r3, r2, r3
 8009672:	183a      	adds	r2, r7, r0
 8009674:	8812      	ldrh	r2, [r2, #0]
 8009676:	4950      	ldr	r1, [pc, #320]	; (80097b8 <HAL_PCD_EP_DB_Receive+0x230>)
 8009678:	430a      	orrs	r2, r1
 800967a:	b292      	uxth	r2, r2
 800967c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800967e:	241a      	movs	r4, #26
 8009680:	193b      	adds	r3, r7, r4
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d100      	bne.n	800968a <HAL_PCD_EP_DB_Receive+0x102>
 8009688:	e086      	b.n	8009798 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	6959      	ldr	r1, [r3, #20]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	891a      	ldrh	r2, [r3, #8]
 8009696:	193b      	adds	r3, r7, r4
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	f004 fb8c 	bl	800ddb6 <USB_ReadPMA>
 800969e:	e07b      	b.n	8009798 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2250      	movs	r2, #80	; 0x50
 80096a6:	5a9b      	ldrh	r3, [r3, r2]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	001a      	movs	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	18d2      	adds	r2, r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	18d3      	adds	r3, r2, r3
 80096ba:	4a40      	ldr	r2, [pc, #256]	; (80097bc <HAL_PCD_EP_DB_Receive+0x234>)
 80096bc:	4694      	mov	ip, r2
 80096be:	4463      	add	r3, ip
 80096c0:	881a      	ldrh	r2, [r3, #0]
 80096c2:	211a      	movs	r1, #26
 80096c4:	187b      	adds	r3, r7, r1
 80096c6:	0592      	lsls	r2, r2, #22
 80096c8:	0d92      	lsrs	r2, r2, #22
 80096ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	699a      	ldr	r2, [r3, #24]
 80096d0:	187b      	adds	r3, r7, r1
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d307      	bcc.n	80096e8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	699a      	ldr	r2, [r3, #24]
 80096dc:	187b      	adds	r3, r7, r1
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	1ad2      	subs	r2, r2, r3
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	619a      	str	r2, [r3, #24]
 80096e6:	e002      	b.n	80096ee <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2200      	movs	r2, #0
 80096ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d121      	bne.n	800973a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	001a      	movs	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	18d3      	adds	r3, r2, r3
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	b29a      	uxth	r2, r3
 8009708:	201e      	movs	r0, #30
 800970a:	183b      	adds	r3, r7, r0
 800970c:	4927      	ldr	r1, [pc, #156]	; (80097ac <HAL_PCD_EP_DB_Receive+0x224>)
 800970e:	400a      	ands	r2, r1
 8009710:	801a      	strh	r2, [r3, #0]
 8009712:	183b      	adds	r3, r7, r0
 8009714:	183a      	adds	r2, r7, r0
 8009716:	8812      	ldrh	r2, [r2, #0]
 8009718:	2180      	movs	r1, #128	; 0x80
 800971a:	0189      	lsls	r1, r1, #6
 800971c:	404a      	eors	r2, r1
 800971e:	801a      	strh	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	001a      	movs	r2, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	18d3      	adds	r3, r2, r3
 800972e:	183a      	adds	r2, r7, r0
 8009730:	8812      	ldrh	r2, [r2, #0]
 8009732:	491f      	ldr	r1, [pc, #124]	; (80097b0 <HAL_PCD_EP_DB_Receive+0x228>)
 8009734:	430a      	orrs	r2, r1
 8009736:	b292      	uxth	r2, r2
 8009738:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800973a:	1dbb      	adds	r3, r7, #6
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	2240      	movs	r2, #64	; 0x40
 8009740:	4013      	ands	r3, r2
 8009742:	d11a      	bne.n	800977a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	001a      	movs	r2, r3
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	18d3      	adds	r3, r2, r3
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	b29a      	uxth	r2, r3
 8009756:	201c      	movs	r0, #28
 8009758:	183b      	adds	r3, r7, r0
 800975a:	4916      	ldr	r1, [pc, #88]	; (80097b4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800975c:	400a      	ands	r2, r1
 800975e:	801a      	strh	r2, [r3, #0]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	001a      	movs	r2, r3
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	18d3      	adds	r3, r2, r3
 800976e:	183a      	adds	r2, r7, r0
 8009770:	8812      	ldrh	r2, [r2, #0]
 8009772:	4911      	ldr	r1, [pc, #68]	; (80097b8 <HAL_PCD_EP_DB_Receive+0x230>)
 8009774:	430a      	orrs	r2, r1
 8009776:	b292      	uxth	r2, r2
 8009778:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800977a:	241a      	movs	r4, #26
 800977c:	193b      	adds	r3, r7, r4
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6959      	ldr	r1, [r3, #20]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	895a      	ldrh	r2, [r3, #10]
 8009790:	193b      	adds	r3, r7, r4
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	f004 fb0f 	bl	800ddb6 <USB_ReadPMA>
    }
  }

  return count;
 8009798:	231a      	movs	r3, #26
 800979a:	18fb      	adds	r3, r7, r3
 800979c:	881b      	ldrh	r3, [r3, #0]
}
 800979e:	0018      	movs	r0, r3
 80097a0:	46bd      	mov	sp, r7
 80097a2:	b009      	add	sp, #36	; 0x24
 80097a4:	bd90      	pop	{r4, r7, pc}
 80097a6:	46c0      	nop			; (mov r8, r8)
 80097a8:	00000402 	.word	0x00000402
 80097ac:	ffffbf8f 	.word	0xffffbf8f
 80097b0:	ffff8080 	.word	0xffff8080
 80097b4:	ffff8f8f 	.word	0xffff8f8f
 80097b8:	ffff80c0 	.word	0xffff80c0
 80097bc:	00000406 	.word	0x00000406

080097c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b0a4      	sub	sp, #144	; 0x90
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	1dbb      	adds	r3, r7, #6
 80097cc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80097ce:	1dbb      	adds	r3, r7, #6
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	2240      	movs	r2, #64	; 0x40
 80097d4:	4013      	ands	r3, r2
 80097d6:	d100      	bne.n	80097da <HAL_PCD_EP_DB_Transmit+0x1a>
 80097d8:	e1e4      	b.n	8009ba4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2250      	movs	r2, #80	; 0x50
 80097e0:	5a9b      	ldrh	r3, [r3, r2]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	001a      	movs	r2, r3
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	18d2      	adds	r2, r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	18d3      	adds	r3, r2, r3
 80097f4:	4ad0      	ldr	r2, [pc, #832]	; (8009b38 <HAL_PCD_EP_DB_Transmit+0x378>)
 80097f6:	4694      	mov	ip, r2
 80097f8:	4463      	add	r3, ip
 80097fa:	881a      	ldrh	r2, [r3, #0]
 80097fc:	2186      	movs	r1, #134	; 0x86
 80097fe:	187b      	adds	r3, r7, r1
 8009800:	0592      	lsls	r2, r2, #22
 8009802:	0d92      	lsrs	r2, r2, #22
 8009804:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	187b      	adds	r3, r7, r1
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	429a      	cmp	r2, r3
 8009810:	d907      	bls.n	8009822 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	699a      	ldr	r2, [r3, #24]
 8009816:	187b      	adds	r3, r7, r1
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	619a      	str	r2, [r3, #24]
 8009820:	e002      	b.n	8009828 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2200      	movs	r2, #0
 8009826:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d000      	beq.n	8009832 <HAL_PCD_EP_DB_Transmit+0x72>
 8009830:	e0b5      	b.n	800999e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	785b      	ldrb	r3, [r3, #1]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d125      	bne.n	8009886 <HAL_PCD_EP_DB_Transmit+0xc6>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2250      	movs	r2, #80	; 0x50
 8009846:	5a9b      	ldrh	r3, [r3, r2]
 8009848:	b29b      	uxth	r3, r3
 800984a:	001a      	movs	r2, r3
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	189b      	adds	r3, r3, r2
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	00da      	lsls	r2, r3, #3
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	18d3      	adds	r3, r2, r3
 800985c:	4ab6      	ldr	r2, [pc, #728]	; (8009b38 <HAL_PCD_EP_DB_Transmit+0x378>)
 800985e:	4694      	mov	ip, r2
 8009860:	4463      	add	r3, ip
 8009862:	62bb      	str	r3, [r7, #40]	; 0x28
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	b29b      	uxth	r3, r3
 800986a:	059b      	lsls	r3, r3, #22
 800986c:	0d9b      	lsrs	r3, r3, #22
 800986e:	b29a      	uxth	r2, r3
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	801a      	strh	r2, [r3, #0]
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29b      	uxth	r3, r3
 800987a:	4ab0      	ldr	r2, [pc, #704]	; (8009b3c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800987c:	4313      	orrs	r3, r2
 800987e:	b29a      	uxth	r2, r3
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	801a      	strh	r2, [r3, #0]
 8009884:	e01b      	b.n	80098be <HAL_PCD_EP_DB_Transmit+0xfe>
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d117      	bne.n	80098be <HAL_PCD_EP_DB_Transmit+0xfe>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	637b      	str	r3, [r7, #52]	; 0x34
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2250      	movs	r2, #80	; 0x50
 800989a:	5a9b      	ldrh	r3, [r3, r2]
 800989c:	b29b      	uxth	r3, r3
 800989e:	001a      	movs	r2, r3
 80098a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a2:	189b      	adds	r3, r3, r2
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	00da      	lsls	r2, r3, #3
 80098ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ae:	18d3      	adds	r3, r2, r3
 80098b0:	4aa1      	ldr	r2, [pc, #644]	; (8009b38 <HAL_PCD_EP_DB_Transmit+0x378>)
 80098b2:	4694      	mov	ip, r2
 80098b4:	4463      	add	r3, ip
 80098b6:	633b      	str	r3, [r7, #48]	; 0x30
 80098b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ba:	2200      	movs	r2, #0
 80098bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	785b      	ldrb	r3, [r3, #1]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d125      	bne.n	8009918 <HAL_PCD_EP_DB_Transmit+0x158>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	61fb      	str	r3, [r7, #28]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2250      	movs	r2, #80	; 0x50
 80098d8:	5a9b      	ldrh	r3, [r3, r2]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	001a      	movs	r2, r3
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	189b      	adds	r3, r3, r2
 80098e2:	61fb      	str	r3, [r7, #28]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	00da      	lsls	r2, r3, #3
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	18d3      	adds	r3, r2, r3
 80098ee:	4a94      	ldr	r2, [pc, #592]	; (8009b40 <HAL_PCD_EP_DB_Transmit+0x380>)
 80098f0:	4694      	mov	ip, r2
 80098f2:	4463      	add	r3, ip
 80098f4:	61bb      	str	r3, [r7, #24]
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	059b      	lsls	r3, r3, #22
 80098fe:	0d9b      	lsrs	r3, r3, #22
 8009900:	b29a      	uxth	r2, r3
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	801a      	strh	r2, [r3, #0]
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	4a8b      	ldr	r2, [pc, #556]	; (8009b3c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800990e:	4313      	orrs	r3, r2
 8009910:	b29a      	uxth	r2, r3
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	801a      	strh	r2, [r3, #0]
 8009916:	e018      	b.n	800994a <HAL_PCD_EP_DB_Transmit+0x18a>
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d114      	bne.n	800994a <HAL_PCD_EP_DB_Transmit+0x18a>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2250      	movs	r2, #80	; 0x50
 8009926:	5a9b      	ldrh	r3, [r3, r2]
 8009928:	b29b      	uxth	r3, r3
 800992a:	001a      	movs	r2, r3
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	189b      	adds	r3, r3, r2
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	00da      	lsls	r2, r3, #3
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	18d3      	adds	r3, r2, r3
 800993c:	4a80      	ldr	r2, [pc, #512]	; (8009b40 <HAL_PCD_EP_DB_Transmit+0x380>)
 800993e:	4694      	mov	ip, r2
 8009940:	4463      	add	r3, ip
 8009942:	623b      	str	r3, [r7, #32]
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2200      	movs	r2, #0
 8009948:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	781a      	ldrb	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	0011      	movs	r1, r2
 8009952:	0018      	movs	r0, r3
 8009954:	f7fa ff36 	bl	80047c4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009958:	1dbb      	adds	r3, r7, #6
 800995a:	881a      	ldrh	r2, [r3, #0]
 800995c:	2380      	movs	r3, #128	; 0x80
 800995e:	01db      	lsls	r3, r3, #7
 8009960:	4013      	ands	r3, r2
 8009962:	d100      	bne.n	8009966 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8009964:	e309      	b.n	8009f7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	001a      	movs	r2, r3
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	18d3      	adds	r3, r2, r3
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29a      	uxth	r2, r3
 8009978:	2016      	movs	r0, #22
 800997a:	183b      	adds	r3, r7, r0
 800997c:	4971      	ldr	r1, [pc, #452]	; (8009b44 <HAL_PCD_EP_DB_Transmit+0x384>)
 800997e:	400a      	ands	r2, r1
 8009980:	801a      	strh	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	001a      	movs	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	18d3      	adds	r3, r2, r3
 8009990:	183a      	adds	r2, r7, r0
 8009992:	8812      	ldrh	r2, [r2, #0]
 8009994:	496c      	ldr	r1, [pc, #432]	; (8009b48 <HAL_PCD_EP_DB_Transmit+0x388>)
 8009996:	430a      	orrs	r2, r1
 8009998:	b292      	uxth	r2, r2
 800999a:	801a      	strh	r2, [r3, #0]
 800999c:	e2ed      	b.n	8009f7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800999e:	1dbb      	adds	r3, r7, #6
 80099a0:	881a      	ldrh	r2, [r3, #0]
 80099a2:	2380      	movs	r3, #128	; 0x80
 80099a4:	01db      	lsls	r3, r3, #7
 80099a6:	4013      	ands	r3, r2
 80099a8:	d01a      	beq.n	80099e0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	001a      	movs	r2, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	18d3      	adds	r3, r2, r3
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	208a      	movs	r0, #138	; 0x8a
 80099be:	183b      	adds	r3, r7, r0
 80099c0:	4960      	ldr	r1, [pc, #384]	; (8009b44 <HAL_PCD_EP_DB_Transmit+0x384>)
 80099c2:	400a      	ands	r2, r1
 80099c4:	801a      	strh	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	001a      	movs	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	18d3      	adds	r3, r2, r3
 80099d4:	183a      	adds	r2, r7, r0
 80099d6:	8812      	ldrh	r2, [r2, #0]
 80099d8:	495b      	ldr	r1, [pc, #364]	; (8009b48 <HAL_PCD_EP_DB_Transmit+0x388>)
 80099da:	430a      	orrs	r2, r1
 80099dc:	b292      	uxth	r2, r2
 80099de:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2224      	movs	r2, #36	; 0x24
 80099e4:	5c9b      	ldrb	r3, [r3, r2]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d000      	beq.n	80099ec <HAL_PCD_EP_DB_Transmit+0x22c>
 80099ea:	e2c6      	b.n	8009f7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	695a      	ldr	r2, [r3, #20]
 80099f0:	2186      	movs	r1, #134	; 0x86
 80099f2:	187b      	adds	r3, r7, r1
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	18d2      	adds	r2, r2, r3
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	69da      	ldr	r2, [r3, #28]
 8009a00:	187b      	adds	r3, r7, r1
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	18d2      	adds	r2, r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6a1a      	ldr	r2, [r3, #32]
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d30c      	bcc.n	8009a30 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	218c      	movs	r1, #140	; 0x8c
 8009a1c:	187a      	adds	r2, r7, r1
 8009a1e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	6a1a      	ldr	r2, [r3, #32]
 8009a24:	187b      	adds	r3, r7, r1
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	1ad2      	subs	r2, r2, r3
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	621a      	str	r2, [r3, #32]
 8009a2e:	e01a      	b.n	8009a66 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8009a38:	2386      	movs	r3, #134	; 0x86
 8009a3a:	18fb      	adds	r3, r7, r3
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	228c      	movs	r2, #140	; 0x8c
 8009a40:	18ba      	adds	r2, r7, r2
 8009a42:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2224      	movs	r2, #36	; 0x24
 8009a48:	2100      	movs	r1, #0
 8009a4a:	5499      	strb	r1, [r3, r2]
 8009a4c:	e00b      	b.n	8009a66 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2224      	movs	r2, #36	; 0x24
 8009a52:	2100      	movs	r1, #0
 8009a54:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	228c      	movs	r2, #140	; 0x8c
 8009a5c:	18ba      	adds	r2, r7, r2
 8009a5e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2200      	movs	r2, #0
 8009a64:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	785b      	ldrb	r3, [r3, #1]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d000      	beq.n	8009a70 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8009a6e:	e06d      	b.n	8009b4c <HAL_PCD_EP_DB_Transmit+0x38c>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2250      	movs	r2, #80	; 0x50
 8009a7c:	5a9b      	ldrh	r3, [r3, r2]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	001a      	movs	r2, r3
 8009a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a84:	189b      	adds	r3, r3, r2
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	00da      	lsls	r2, r3, #3
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a90:	18d3      	adds	r3, r2, r3
 8009a92:	4a29      	ldr	r2, [pc, #164]	; (8009b38 <HAL_PCD_EP_DB_Transmit+0x378>)
 8009a94:	4694      	mov	ip, r2
 8009a96:	4463      	add	r3, ip
 8009a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	059b      	lsls	r3, r3, #22
 8009aa2:	0d9b      	lsrs	r3, r3, #22
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	801a      	strh	r2, [r3, #0]
 8009aaa:	228c      	movs	r2, #140	; 0x8c
 8009aac:	18bb      	adds	r3, r7, r2
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ab2:	d91a      	bls.n	8009aea <HAL_PCD_EP_DB_Transmit+0x32a>
 8009ab4:	18bb      	adds	r3, r7, r2
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	095b      	lsrs	r3, r3, #5
 8009aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8009abc:	18bb      	adds	r3, r7, r2
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	221f      	movs	r2, #31
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	d102      	bne.n	8009acc <HAL_PCD_EP_DB_Transmit+0x30c>
 8009ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	029b      	lsls	r3, r3, #10
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	4313      	orrs	r3, r2
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4a17      	ldr	r2, [pc, #92]	; (8009b3c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	801a      	strh	r2, [r3, #0]
 8009ae8:	e04f      	b.n	8009b8a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8009aea:	238c      	movs	r3, #140	; 0x8c
 8009aec:	18fb      	adds	r3, r7, r3
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d108      	bne.n	8009b06 <HAL_PCD_EP_DB_Transmit+0x346>
 8009af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4a10      	ldr	r2, [pc, #64]	; (8009b3c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	801a      	strh	r2, [r3, #0]
 8009b04:	e041      	b.n	8009b8a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8009b06:	228c      	movs	r2, #140	; 0x8c
 8009b08:	18bb      	adds	r3, r7, r2
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	085b      	lsrs	r3, r3, #1
 8009b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b10:	18bb      	adds	r3, r7, r2
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2201      	movs	r2, #1
 8009b16:	4013      	ands	r3, r2
 8009b18:	d002      	beq.n	8009b20 <HAL_PCD_EP_DB_Transmit+0x360>
 8009b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	029b      	lsls	r3, r3, #10
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b34:	801a      	strh	r2, [r3, #0]
 8009b36:	e028      	b.n	8009b8a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8009b38:	00000402 	.word	0x00000402
 8009b3c:	ffff8000 	.word	0xffff8000
 8009b40:	00000406 	.word	0x00000406
 8009b44:	ffff8f8f 	.word	0xffff8f8f
 8009b48:	ffffc080 	.word	0xffffc080
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	785b      	ldrb	r3, [r3, #1]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d11a      	bne.n	8009b8a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	647b      	str	r3, [r7, #68]	; 0x44
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2250      	movs	r2, #80	; 0x50
 8009b60:	5a9b      	ldrh	r3, [r3, r2]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	001a      	movs	r2, r3
 8009b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b68:	189b      	adds	r3, r3, r2
 8009b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	00da      	lsls	r2, r3, #3
 8009b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b74:	18d3      	adds	r3, r2, r3
 8009b76:	4adb      	ldr	r2, [pc, #876]	; (8009ee4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8009b78:	4694      	mov	ip, r2
 8009b7a:	4463      	add	r3, ip
 8009b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8009b7e:	238c      	movs	r3, #140	; 0x8c
 8009b80:	18fb      	adds	r3, r7, r3
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b88:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6959      	ldr	r1, [r3, #20]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	891a      	ldrh	r2, [r3, #8]
 8009b96:	238c      	movs	r3, #140	; 0x8c
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	f004 f8c1 	bl	800dd24 <USB_WritePMA>
 8009ba2:	e1ea      	b.n	8009f7a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2250      	movs	r2, #80	; 0x50
 8009baa:	5a9b      	ldrh	r3, [r3, r2]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	001a      	movs	r2, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	18d2      	adds	r2, r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	18d3      	adds	r3, r2, r3
 8009bbe:	4aca      	ldr	r2, [pc, #808]	; (8009ee8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8009bc0:	4694      	mov	ip, r2
 8009bc2:	4463      	add	r3, ip
 8009bc4:	881a      	ldrh	r2, [r3, #0]
 8009bc6:	2186      	movs	r1, #134	; 0x86
 8009bc8:	187b      	adds	r3, r7, r1
 8009bca:	0592      	lsls	r2, r2, #22
 8009bcc:	0d92      	lsrs	r2, r2, #22
 8009bce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	187b      	adds	r3, r7, r1
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d307      	bcc.n	8009bec <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	699a      	ldr	r2, [r3, #24]
 8009be0:	187b      	adds	r3, r7, r1
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	1ad2      	subs	r2, r2, r3
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	619a      	str	r2, [r3, #24]
 8009bea:	e002      	b.n	8009bf2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d000      	beq.n	8009bfc <HAL_PCD_EP_DB_Transmit+0x43c>
 8009bfa:	e0bb      	b.n	8009d74 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d125      	bne.n	8009c50 <HAL_PCD_EP_DB_Transmit+0x490>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2250      	movs	r2, #80	; 0x50
 8009c10:	5a9b      	ldrh	r3, [r3, r2]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	001a      	movs	r2, r3
 8009c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c18:	189b      	adds	r3, r3, r2
 8009c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	00da      	lsls	r2, r3, #3
 8009c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c24:	18d3      	adds	r3, r2, r3
 8009c26:	4aaf      	ldr	r2, [pc, #700]	; (8009ee4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8009c28:	4694      	mov	ip, r2
 8009c2a:	4463      	add	r3, ip
 8009c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	059b      	lsls	r3, r3, #22
 8009c36:	0d9b      	lsrs	r3, r3, #22
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c3c:	801a      	strh	r2, [r3, #0]
 8009c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	4aa9      	ldr	r2, [pc, #676]	; (8009eec <HAL_PCD_EP_DB_Transmit+0x72c>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c4c:	801a      	strh	r2, [r3, #0]
 8009c4e:	e01b      	b.n	8009c88 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	785b      	ldrb	r3, [r3, #1]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d117      	bne.n	8009c88 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2250      	movs	r2, #80	; 0x50
 8009c64:	5a9b      	ldrh	r3, [r3, r2]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	001a      	movs	r2, r3
 8009c6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c6c:	189b      	adds	r3, r3, r2
 8009c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	00da      	lsls	r2, r3, #3
 8009c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c78:	18d3      	adds	r3, r2, r3
 8009c7a:	4a9a      	ldr	r2, [pc, #616]	; (8009ee4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8009c7c:	4694      	mov	ip, r2
 8009c7e:	4463      	add	r3, ip
 8009c80:	663b      	str	r3, [r7, #96]	; 0x60
 8009c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c84:	2200      	movs	r2, #0
 8009c86:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	677b      	str	r3, [r7, #116]	; 0x74
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d12b      	bne.n	8009cee <HAL_PCD_EP_DB_Transmit+0x52e>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2250      	movs	r2, #80	; 0x50
 8009ca2:	5a9b      	ldrh	r3, [r3, r2]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	001a      	movs	r2, r3
 8009ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009caa:	189b      	adds	r3, r3, r2
 8009cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	00da      	lsls	r2, r3, #3
 8009cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cb6:	18d3      	adds	r3, r2, r3
 8009cb8:	4a8b      	ldr	r2, [pc, #556]	; (8009ee8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8009cba:	4694      	mov	ip, r2
 8009cbc:	4463      	add	r3, ip
 8009cbe:	2180      	movs	r1, #128	; 0x80
 8009cc0:	187a      	adds	r2, r7, r1
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	187b      	adds	r3, r7, r1
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	059b      	lsls	r3, r3, #22
 8009cce:	0d9b      	lsrs	r3, r3, #22
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	187b      	adds	r3, r7, r1
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	801a      	strh	r2, [r3, #0]
 8009cd8:	187b      	adds	r3, r7, r1
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	4a82      	ldr	r2, [pc, #520]	; (8009eec <HAL_PCD_EP_DB_Transmit+0x72c>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	187b      	adds	r3, r7, r1
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	801a      	strh	r2, [r3, #0]
 8009cec:	e018      	b.n	8009d20 <HAL_PCD_EP_DB_Transmit+0x560>
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	785b      	ldrb	r3, [r3, #1]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d114      	bne.n	8009d20 <HAL_PCD_EP_DB_Transmit+0x560>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2250      	movs	r2, #80	; 0x50
 8009cfc:	5a9b      	ldrh	r3, [r3, r2]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	001a      	movs	r2, r3
 8009d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d04:	189b      	adds	r3, r3, r2
 8009d06:	677b      	str	r3, [r7, #116]	; 0x74
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	00da      	lsls	r2, r3, #3
 8009d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d10:	18d3      	adds	r3, r2, r3
 8009d12:	4a75      	ldr	r2, [pc, #468]	; (8009ee8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8009d14:	4694      	mov	ip, r2
 8009d16:	4463      	add	r3, ip
 8009d18:	673b      	str	r3, [r7, #112]	; 0x70
 8009d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	781a      	ldrb	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	0011      	movs	r1, r2
 8009d28:	0018      	movs	r0, r3
 8009d2a:	f7fa fd4b 	bl	80047c4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d2e:	1dbb      	adds	r3, r7, #6
 8009d30:	881a      	ldrh	r2, [r3, #0]
 8009d32:	2380      	movs	r3, #128	; 0x80
 8009d34:	01db      	lsls	r3, r3, #7
 8009d36:	4013      	ands	r3, r2
 8009d38:	d000      	beq.n	8009d3c <HAL_PCD_EP_DB_Transmit+0x57c>
 8009d3a:	e11e      	b.n	8009f7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	001a      	movs	r2, r3
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	18d3      	adds	r3, r2, r3
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	2088      	movs	r0, #136	; 0x88
 8009d50:	183b      	adds	r3, r7, r0
 8009d52:	4967      	ldr	r1, [pc, #412]	; (8009ef0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8009d54:	400a      	ands	r2, r1
 8009d56:	801a      	strh	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	001a      	movs	r2, r3
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	18d3      	adds	r3, r2, r3
 8009d66:	183a      	adds	r2, r7, r0
 8009d68:	8812      	ldrh	r2, [r2, #0]
 8009d6a:	4962      	ldr	r1, [pc, #392]	; (8009ef4 <HAL_PCD_EP_DB_Transmit+0x734>)
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	b292      	uxth	r2, r2
 8009d70:	801a      	strh	r2, [r3, #0]
 8009d72:	e102      	b.n	8009f7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d74:	1dbb      	adds	r3, r7, #6
 8009d76:	881a      	ldrh	r2, [r3, #0]
 8009d78:	2380      	movs	r3, #128	; 0x80
 8009d7a:	01db      	lsls	r3, r3, #7
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	d11a      	bne.n	8009db6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	001a      	movs	r2, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	18d3      	adds	r3, r2, r3
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	204e      	movs	r0, #78	; 0x4e
 8009d94:	183b      	adds	r3, r7, r0
 8009d96:	4956      	ldr	r1, [pc, #344]	; (8009ef0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8009d98:	400a      	ands	r2, r1
 8009d9a:	801a      	strh	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	001a      	movs	r2, r3
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	18d3      	adds	r3, r2, r3
 8009daa:	183a      	adds	r2, r7, r0
 8009dac:	8812      	ldrh	r2, [r2, #0]
 8009dae:	4951      	ldr	r1, [pc, #324]	; (8009ef4 <HAL_PCD_EP_DB_Transmit+0x734>)
 8009db0:	430a      	orrs	r2, r1
 8009db2:	b292      	uxth	r2, r2
 8009db4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2224      	movs	r2, #36	; 0x24
 8009dba:	5c9b      	ldrb	r3, [r3, r2]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d000      	beq.n	8009dc2 <HAL_PCD_EP_DB_Transmit+0x602>
 8009dc0:	e0db      	b.n	8009f7a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	695a      	ldr	r2, [r3, #20]
 8009dc6:	2186      	movs	r1, #134	; 0x86
 8009dc8:	187b      	adds	r3, r7, r1
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	18d2      	adds	r2, r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	69da      	ldr	r2, [r3, #28]
 8009dd6:	187b      	adds	r3, r7, r1
 8009dd8:	881b      	ldrh	r3, [r3, #0]
 8009dda:	18d2      	adds	r2, r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	6a1a      	ldr	r2, [r3, #32]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d30c      	bcc.n	8009e06 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	218c      	movs	r1, #140	; 0x8c
 8009df2:	187a      	adds	r2, r7, r1
 8009df4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	6a1a      	ldr	r2, [r3, #32]
 8009dfa:	187b      	adds	r3, r7, r1
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	621a      	str	r2, [r3, #32]
 8009e04:	e01a      	b.n	8009e3c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8009e0e:	2386      	movs	r3, #134	; 0x86
 8009e10:	18fb      	adds	r3, r7, r3
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	228c      	movs	r2, #140	; 0x8c
 8009e16:	18ba      	adds	r2, r7, r2
 8009e18:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2224      	movs	r2, #36	; 0x24
 8009e1e:	2100      	movs	r1, #0
 8009e20:	5499      	strb	r1, [r3, r2]
 8009e22:	e00b      	b.n	8009e3c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	228c      	movs	r2, #140	; 0x8c
 8009e2a:	18ba      	adds	r2, r7, r2
 8009e2c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2200      	movs	r2, #0
 8009e32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2224      	movs	r2, #36	; 0x24
 8009e38:	2100      	movs	r1, #0
 8009e3a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	657b      	str	r3, [r7, #84]	; 0x54
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	785b      	ldrb	r3, [r3, #1]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d000      	beq.n	8009e4c <HAL_PCD_EP_DB_Transmit+0x68c>
 8009e4a:	e06e      	b.n	8009f2a <HAL_PCD_EP_DB_Transmit+0x76a>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2250      	movs	r2, #80	; 0x50
 8009e58:	5a9b      	ldrh	r3, [r3, r2]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	001a      	movs	r2, r3
 8009e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e60:	189b      	adds	r3, r3, r2
 8009e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	00da      	lsls	r2, r3, #3
 8009e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e6c:	18d3      	adds	r3, r2, r3
 8009e6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ee8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8009e70:	4694      	mov	ip, r2
 8009e72:	4463      	add	r3, ip
 8009e74:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	059b      	lsls	r3, r3, #22
 8009e7e:	0d9b      	lsrs	r3, r3, #22
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e84:	801a      	strh	r2, [r3, #0]
 8009e86:	228c      	movs	r2, #140	; 0x8c
 8009e88:	18bb      	adds	r3, r7, r2
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8009e8e:	d91a      	bls.n	8009ec6 <HAL_PCD_EP_DB_Transmit+0x706>
 8009e90:	18bb      	adds	r3, r7, r2
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	095b      	lsrs	r3, r3, #5
 8009e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e98:	18bb      	adds	r3, r7, r2
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	221f      	movs	r2, #31
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	d102      	bne.n	8009ea8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8009ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009eaa:	881b      	ldrh	r3, [r3, #0]
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	029b      	lsls	r3, r3, #10
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	4a0c      	ldr	r2, [pc, #48]	; (8009eec <HAL_PCD_EP_DB_Transmit+0x72c>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ec2:	801a      	strh	r2, [r3, #0]
 8009ec4:	e04d      	b.n	8009f62 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8009ec6:	238c      	movs	r3, #140	; 0x8c
 8009ec8:	18fb      	adds	r3, r7, r3
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d113      	bne.n	8009ef8 <HAL_PCD_EP_DB_Transmit+0x738>
 8009ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	4a05      	ldr	r2, [pc, #20]	; (8009eec <HAL_PCD_EP_DB_Transmit+0x72c>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ede:	801a      	strh	r2, [r3, #0]
 8009ee0:	e03f      	b.n	8009f62 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8009ee2:	46c0      	nop			; (mov r8, r8)
 8009ee4:	00000402 	.word	0x00000402
 8009ee8:	00000406 	.word	0x00000406
 8009eec:	ffff8000 	.word	0xffff8000
 8009ef0:	ffff8f8f 	.word	0xffff8f8f
 8009ef4:	ffffc080 	.word	0xffffc080
 8009ef8:	228c      	movs	r2, #140	; 0x8c
 8009efa:	18bb      	adds	r3, r7, r2
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	085b      	lsrs	r3, r3, #1
 8009f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f02:	18bb      	adds	r3, r7, r2
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2201      	movs	r2, #1
 8009f08:	4013      	ands	r3, r2
 8009f0a:	d002      	beq.n	8009f12 <HAL_PCD_EP_DB_Transmit+0x752>
 8009f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f0e:	3301      	adds	r3, #1
 8009f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	029b      	lsls	r3, r3, #10
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	4313      	orrs	r3, r2
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f26:	801a      	strh	r2, [r3, #0]
 8009f28:	e01b      	b.n	8009f62 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	785b      	ldrb	r3, [r3, #1]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d117      	bne.n	8009f62 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2250      	movs	r2, #80	; 0x50
 8009f38:	5a9b      	ldrh	r3, [r3, r2]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	001a      	movs	r2, r3
 8009f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f40:	189b      	adds	r3, r3, r2
 8009f42:	657b      	str	r3, [r7, #84]	; 0x54
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	00da      	lsls	r2, r3, #3
 8009f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f4c:	18d3      	adds	r3, r2, r3
 8009f4e:	4a21      	ldr	r2, [pc, #132]	; (8009fd4 <HAL_PCD_EP_DB_Transmit+0x814>)
 8009f50:	4694      	mov	ip, r2
 8009f52:	4463      	add	r3, ip
 8009f54:	653b      	str	r3, [r7, #80]	; 0x50
 8009f56:	238c      	movs	r3, #140	; 0x8c
 8009f58:	18fb      	adds	r3, r7, r3
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f60:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6818      	ldr	r0, [r3, #0]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	6959      	ldr	r1, [r3, #20]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	895a      	ldrh	r2, [r3, #10]
 8009f6e:	238c      	movs	r3, #140	; 0x8c
 8009f70:	18fb      	adds	r3, r7, r3
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	f003 fed5 	bl	800dd24 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	001a      	movs	r2, r3
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	18d3      	adds	r3, r2, r3
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	2014      	movs	r0, #20
 8009f8e:	183b      	adds	r3, r7, r0
 8009f90:	4911      	ldr	r1, [pc, #68]	; (8009fd8 <HAL_PCD_EP_DB_Transmit+0x818>)
 8009f92:	400a      	ands	r2, r1
 8009f94:	801a      	strh	r2, [r3, #0]
 8009f96:	183b      	adds	r3, r7, r0
 8009f98:	183a      	adds	r2, r7, r0
 8009f9a:	8812      	ldrh	r2, [r2, #0]
 8009f9c:	2110      	movs	r1, #16
 8009f9e:	404a      	eors	r2, r1
 8009fa0:	801a      	strh	r2, [r3, #0]
 8009fa2:	183b      	adds	r3, r7, r0
 8009fa4:	183a      	adds	r2, r7, r0
 8009fa6:	8812      	ldrh	r2, [r2, #0]
 8009fa8:	2120      	movs	r1, #32
 8009faa:	404a      	eors	r2, r1
 8009fac:	801a      	strh	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	001a      	movs	r2, r3
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	18d3      	adds	r3, r2, r3
 8009fbc:	183a      	adds	r2, r7, r0
 8009fbe:	8812      	ldrh	r2, [r2, #0]
 8009fc0:	4906      	ldr	r1, [pc, #24]	; (8009fdc <HAL_PCD_EP_DB_Transmit+0x81c>)
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	b292      	uxth	r2, r2
 8009fc6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	0018      	movs	r0, r3
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	b024      	add	sp, #144	; 0x90
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	46c0      	nop			; (mov r8, r8)
 8009fd4:	00000406 	.word	0x00000406
 8009fd8:	ffff8fbf 	.word	0xffff8fbf
 8009fdc:	ffff8080 	.word	0xffff8080

08009fe0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8009fe0:	b590      	push	{r4, r7, lr}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	0008      	movs	r0, r1
 8009fea:	0011      	movs	r1, r2
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	240a      	movs	r4, #10
 8009ff0:	193b      	adds	r3, r7, r4
 8009ff2:	1c02      	adds	r2, r0, #0
 8009ff4:	801a      	strh	r2, [r3, #0]
 8009ff6:	2308      	movs	r3, #8
 8009ff8:	18fb      	adds	r3, r7, r3
 8009ffa:	1c0a      	adds	r2, r1, #0
 8009ffc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009ffe:	0021      	movs	r1, r4
 800a000:	187b      	adds	r3, r7, r1
 800a002:	881b      	ldrh	r3, [r3, #0]
 800a004:	2280      	movs	r2, #128	; 0x80
 800a006:	4013      	ands	r3, r2
 800a008:	b29b      	uxth	r3, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00c      	beq.n	800a028 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a00e:	187b      	adds	r3, r7, r1
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	2207      	movs	r2, #7
 800a014:	4013      	ands	r3, r2
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	0013      	movs	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	189b      	adds	r3, r3, r2
 800a01e:	00db      	lsls	r3, r3, #3
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	18d3      	adds	r3, r2, r3
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e00b      	b.n	800a040 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a028:	230a      	movs	r3, #10
 800a02a:	18fb      	adds	r3, r7, r3
 800a02c:	881a      	ldrh	r2, [r3, #0]
 800a02e:	0013      	movs	r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	189b      	adds	r3, r3, r2
 800a034:	00db      	lsls	r3, r3, #3
 800a036:	3369      	adds	r3, #105	; 0x69
 800a038:	33ff      	adds	r3, #255	; 0xff
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	18d3      	adds	r3, r2, r3
 800a03e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a040:	2308      	movs	r3, #8
 800a042:	18fb      	adds	r3, r7, r3
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d107      	bne.n	800a05a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2200      	movs	r2, #0
 800a04e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	b29a      	uxth	r2, r3
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	80da      	strh	r2, [r3, #6]
 800a058:	e00b      	b.n	800a072 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2201      	movs	r2, #1
 800a05e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	b29a      	uxth	r2, r3
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	0c1b      	lsrs	r3, r3, #16
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	0018      	movs	r0, r3
 800a076:	46bd      	mov	sp, r7
 800a078:	b007      	add	sp, #28
 800a07a:	bd90      	pop	{r4, r7, pc}

0800a07c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	23ba      	movs	r3, #186	; 0xba
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	2101      	movs	r1, #1
 800a092:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	23b8      	movs	r3, #184	; 0xb8
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	2100      	movs	r1, #0
 800a09c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2254      	movs	r2, #84	; 0x54
 800a0a2:	5a9b      	ldrh	r3, [r3, r2]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	b299      	uxth	r1, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2254      	movs	r2, #84	; 0x54
 800a0b0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2254      	movs	r2, #84	; 0x54
 800a0b6:	5a9b      	ldrh	r3, [r3, r2]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	b299      	uxth	r1, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2254      	movs	r2, #84	; 0x54
 800a0c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	b004      	add	sp, #16
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	000a      	movs	r2, r1
 800a0da:	1cfb      	adds	r3, r7, #3
 800a0dc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	b002      	add	sp, #8
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d102      	bne.n	800a0fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	f000 fb76 	bl	800a7e8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2201      	movs	r2, #1
 800a102:	4013      	ands	r3, r2
 800a104:	d100      	bne.n	800a108 <HAL_RCC_OscConfig+0x20>
 800a106:	e08e      	b.n	800a226 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800a108:	4bc5      	ldr	r3, [pc, #788]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	220c      	movs	r2, #12
 800a10e:	4013      	ands	r3, r2
 800a110:	2b04      	cmp	r3, #4
 800a112:	d00e      	beq.n	800a132 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a114:	4bc2      	ldr	r3, [pc, #776]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	220c      	movs	r2, #12
 800a11a:	4013      	ands	r3, r2
 800a11c:	2b08      	cmp	r3, #8
 800a11e:	d117      	bne.n	800a150 <HAL_RCC_OscConfig+0x68>
 800a120:	4bbf      	ldr	r3, [pc, #764]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	23c0      	movs	r3, #192	; 0xc0
 800a126:	025b      	lsls	r3, r3, #9
 800a128:	401a      	ands	r2, r3
 800a12a:	2380      	movs	r3, #128	; 0x80
 800a12c:	025b      	lsls	r3, r3, #9
 800a12e:	429a      	cmp	r2, r3
 800a130:	d10e      	bne.n	800a150 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a132:	4bbb      	ldr	r3, [pc, #748]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	2380      	movs	r3, #128	; 0x80
 800a138:	029b      	lsls	r3, r3, #10
 800a13a:	4013      	ands	r3, r2
 800a13c:	d100      	bne.n	800a140 <HAL_RCC_OscConfig+0x58>
 800a13e:	e071      	b.n	800a224 <HAL_RCC_OscConfig+0x13c>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d000      	beq.n	800a14a <HAL_RCC_OscConfig+0x62>
 800a148:	e06c      	b.n	800a224 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	f000 fb4c 	bl	800a7e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d107      	bne.n	800a168 <HAL_RCC_OscConfig+0x80>
 800a158:	4bb1      	ldr	r3, [pc, #708]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	4bb0      	ldr	r3, [pc, #704]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a15e:	2180      	movs	r1, #128	; 0x80
 800a160:	0249      	lsls	r1, r1, #9
 800a162:	430a      	orrs	r2, r1
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	e02f      	b.n	800a1c8 <HAL_RCC_OscConfig+0xe0>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10c      	bne.n	800a18a <HAL_RCC_OscConfig+0xa2>
 800a170:	4bab      	ldr	r3, [pc, #684]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	4baa      	ldr	r3, [pc, #680]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a176:	49ab      	ldr	r1, [pc, #684]	; (800a424 <HAL_RCC_OscConfig+0x33c>)
 800a178:	400a      	ands	r2, r1
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	4ba8      	ldr	r3, [pc, #672]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	4ba7      	ldr	r3, [pc, #668]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a182:	49a9      	ldr	r1, [pc, #676]	; (800a428 <HAL_RCC_OscConfig+0x340>)
 800a184:	400a      	ands	r2, r1
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	e01e      	b.n	800a1c8 <HAL_RCC_OscConfig+0xe0>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	2b05      	cmp	r3, #5
 800a190:	d10e      	bne.n	800a1b0 <HAL_RCC_OscConfig+0xc8>
 800a192:	4ba3      	ldr	r3, [pc, #652]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	4ba2      	ldr	r3, [pc, #648]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a198:	2180      	movs	r1, #128	; 0x80
 800a19a:	02c9      	lsls	r1, r1, #11
 800a19c:	430a      	orrs	r2, r1
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	4b9f      	ldr	r3, [pc, #636]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	4b9e      	ldr	r3, [pc, #632]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a1a6:	2180      	movs	r1, #128	; 0x80
 800a1a8:	0249      	lsls	r1, r1, #9
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e00b      	b.n	800a1c8 <HAL_RCC_OscConfig+0xe0>
 800a1b0:	4b9b      	ldr	r3, [pc, #620]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	4b9a      	ldr	r3, [pc, #616]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a1b6:	499b      	ldr	r1, [pc, #620]	; (800a424 <HAL_RCC_OscConfig+0x33c>)
 800a1b8:	400a      	ands	r2, r1
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	4b98      	ldr	r3, [pc, #608]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	4b97      	ldr	r3, [pc, #604]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a1c2:	4999      	ldr	r1, [pc, #612]	; (800a428 <HAL_RCC_OscConfig+0x340>)
 800a1c4:	400a      	ands	r2, r1
 800a1c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d014      	beq.n	800a1fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1d0:	f7fc f9a4 	bl	800651c <HAL_GetTick>
 800a1d4:	0003      	movs	r3, r0
 800a1d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1d8:	e008      	b.n	800a1ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a1da:	f7fc f99f 	bl	800651c <HAL_GetTick>
 800a1de:	0002      	movs	r2, r0
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b64      	cmp	r3, #100	; 0x64
 800a1e6:	d901      	bls.n	800a1ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e2fd      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1ec:	4b8c      	ldr	r3, [pc, #560]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	2380      	movs	r3, #128	; 0x80
 800a1f2:	029b      	lsls	r3, r3, #10
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	d0f0      	beq.n	800a1da <HAL_RCC_OscConfig+0xf2>
 800a1f8:	e015      	b.n	800a226 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1fa:	f7fc f98f 	bl	800651c <HAL_GetTick>
 800a1fe:	0003      	movs	r3, r0
 800a200:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a202:	e008      	b.n	800a216 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a204:	f7fc f98a 	bl	800651c <HAL_GetTick>
 800a208:	0002      	movs	r2, r0
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	2b64      	cmp	r3, #100	; 0x64
 800a210:	d901      	bls.n	800a216 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e2e8      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a216:	4b82      	ldr	r3, [pc, #520]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	2380      	movs	r3, #128	; 0x80
 800a21c:	029b      	lsls	r3, r3, #10
 800a21e:	4013      	ands	r3, r2
 800a220:	d1f0      	bne.n	800a204 <HAL_RCC_OscConfig+0x11c>
 800a222:	e000      	b.n	800a226 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a224:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2202      	movs	r2, #2
 800a22c:	4013      	ands	r3, r2
 800a22e:	d100      	bne.n	800a232 <HAL_RCC_OscConfig+0x14a>
 800a230:	e06c      	b.n	800a30c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800a232:	4b7b      	ldr	r3, [pc, #492]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	220c      	movs	r2, #12
 800a238:	4013      	ands	r3, r2
 800a23a:	d00e      	beq.n	800a25a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a23c:	4b78      	ldr	r3, [pc, #480]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	220c      	movs	r2, #12
 800a242:	4013      	ands	r3, r2
 800a244:	2b08      	cmp	r3, #8
 800a246:	d11f      	bne.n	800a288 <HAL_RCC_OscConfig+0x1a0>
 800a248:	4b75      	ldr	r3, [pc, #468]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	23c0      	movs	r3, #192	; 0xc0
 800a24e:	025b      	lsls	r3, r3, #9
 800a250:	401a      	ands	r2, r3
 800a252:	2380      	movs	r3, #128	; 0x80
 800a254:	021b      	lsls	r3, r3, #8
 800a256:	429a      	cmp	r2, r3
 800a258:	d116      	bne.n	800a288 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a25a:	4b71      	ldr	r3, [pc, #452]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2202      	movs	r2, #2
 800a260:	4013      	ands	r3, r2
 800a262:	d005      	beq.n	800a270 <HAL_RCC_OscConfig+0x188>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d001      	beq.n	800a270 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e2bb      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a270:	4b6b      	ldr	r3, [pc, #428]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	22f8      	movs	r2, #248	; 0xf8
 800a276:	4393      	bics	r3, r2
 800a278:	0019      	movs	r1, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	00da      	lsls	r2, r3, #3
 800a280:	4b67      	ldr	r3, [pc, #412]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a282:	430a      	orrs	r2, r1
 800a284:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a286:	e041      	b.n	800a30c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d024      	beq.n	800a2da <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a290:	4b63      	ldr	r3, [pc, #396]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	4b62      	ldr	r3, [pc, #392]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a296:	2101      	movs	r1, #1
 800a298:	430a      	orrs	r2, r1
 800a29a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a29c:	f7fc f93e 	bl	800651c <HAL_GetTick>
 800a2a0:	0003      	movs	r3, r0
 800a2a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2a4:	e008      	b.n	800a2b8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a2a6:	f7fc f939 	bl	800651c <HAL_GetTick>
 800a2aa:	0002      	movs	r2, r0
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d901      	bls.n	800a2b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e297      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2b8:	4b59      	ldr	r3, [pc, #356]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2202      	movs	r2, #2
 800a2be:	4013      	ands	r3, r2
 800a2c0:	d0f1      	beq.n	800a2a6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2c2:	4b57      	ldr	r3, [pc, #348]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	22f8      	movs	r2, #248	; 0xf8
 800a2c8:	4393      	bics	r3, r2
 800a2ca:	0019      	movs	r1, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	00da      	lsls	r2, r3, #3
 800a2d2:	4b53      	ldr	r3, [pc, #332]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	601a      	str	r2, [r3, #0]
 800a2d8:	e018      	b.n	800a30c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2da:	4b51      	ldr	r3, [pc, #324]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	4b50      	ldr	r3, [pc, #320]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	438a      	bics	r2, r1
 800a2e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2e6:	f7fc f919 	bl	800651c <HAL_GetTick>
 800a2ea:	0003      	movs	r3, r0
 800a2ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2ee:	e008      	b.n	800a302 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a2f0:	f7fc f914 	bl	800651c <HAL_GetTick>
 800a2f4:	0002      	movs	r2, r0
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d901      	bls.n	800a302 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e272      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a302:	4b47      	ldr	r3, [pc, #284]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2202      	movs	r2, #2
 800a308:	4013      	ands	r3, r2
 800a30a:	d1f1      	bne.n	800a2f0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2208      	movs	r2, #8
 800a312:	4013      	ands	r3, r2
 800a314:	d036      	beq.n	800a384 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d019      	beq.n	800a352 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a31e:	4b40      	ldr	r3, [pc, #256]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a322:	4b3f      	ldr	r3, [pc, #252]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a324:	2101      	movs	r1, #1
 800a326:	430a      	orrs	r2, r1
 800a328:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a32a:	f7fc f8f7 	bl	800651c <HAL_GetTick>
 800a32e:	0003      	movs	r3, r0
 800a330:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a332:	e008      	b.n	800a346 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a334:	f7fc f8f2 	bl	800651c <HAL_GetTick>
 800a338:	0002      	movs	r2, r0
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d901      	bls.n	800a346 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e250      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a346:	4b36      	ldr	r3, [pc, #216]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34a:	2202      	movs	r2, #2
 800a34c:	4013      	ands	r3, r2
 800a34e:	d0f1      	beq.n	800a334 <HAL_RCC_OscConfig+0x24c>
 800a350:	e018      	b.n	800a384 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a352:	4b33      	ldr	r3, [pc, #204]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a356:	4b32      	ldr	r3, [pc, #200]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a358:	2101      	movs	r1, #1
 800a35a:	438a      	bics	r2, r1
 800a35c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a35e:	f7fc f8dd 	bl	800651c <HAL_GetTick>
 800a362:	0003      	movs	r3, r0
 800a364:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a366:	e008      	b.n	800a37a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a368:	f7fc f8d8 	bl	800651c <HAL_GetTick>
 800a36c:	0002      	movs	r2, r0
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b02      	cmp	r3, #2
 800a374:	d901      	bls.n	800a37a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e236      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a37a:	4b29      	ldr	r3, [pc, #164]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	2202      	movs	r2, #2
 800a380:	4013      	ands	r3, r2
 800a382:	d1f1      	bne.n	800a368 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2204      	movs	r2, #4
 800a38a:	4013      	ands	r3, r2
 800a38c:	d100      	bne.n	800a390 <HAL_RCC_OscConfig+0x2a8>
 800a38e:	e0b5      	b.n	800a4fc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a390:	201f      	movs	r0, #31
 800a392:	183b      	adds	r3, r7, r0
 800a394:	2200      	movs	r2, #0
 800a396:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a398:	4b21      	ldr	r3, [pc, #132]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a39a:	69da      	ldr	r2, [r3, #28]
 800a39c:	2380      	movs	r3, #128	; 0x80
 800a39e:	055b      	lsls	r3, r3, #21
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	d110      	bne.n	800a3c6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3a4:	4b1e      	ldr	r3, [pc, #120]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a3a6:	69da      	ldr	r2, [r3, #28]
 800a3a8:	4b1d      	ldr	r3, [pc, #116]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a3aa:	2180      	movs	r1, #128	; 0x80
 800a3ac:	0549      	lsls	r1, r1, #21
 800a3ae:	430a      	orrs	r2, r1
 800a3b0:	61da      	str	r2, [r3, #28]
 800a3b2:	4b1b      	ldr	r3, [pc, #108]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a3b4:	69da      	ldr	r2, [r3, #28]
 800a3b6:	2380      	movs	r3, #128	; 0x80
 800a3b8:	055b      	lsls	r3, r3, #21
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a3c0:	183b      	adds	r3, r7, r0
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3c6:	4b19      	ldr	r3, [pc, #100]	; (800a42c <HAL_RCC_OscConfig+0x344>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	2380      	movs	r3, #128	; 0x80
 800a3cc:	005b      	lsls	r3, r3, #1
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	d11a      	bne.n	800a408 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3d2:	4b16      	ldr	r3, [pc, #88]	; (800a42c <HAL_RCC_OscConfig+0x344>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	4b15      	ldr	r3, [pc, #84]	; (800a42c <HAL_RCC_OscConfig+0x344>)
 800a3d8:	2180      	movs	r1, #128	; 0x80
 800a3da:	0049      	lsls	r1, r1, #1
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3e0:	f7fc f89c 	bl	800651c <HAL_GetTick>
 800a3e4:	0003      	movs	r3, r0
 800a3e6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3e8:	e008      	b.n	800a3fc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3ea:	f7fc f897 	bl	800651c <HAL_GetTick>
 800a3ee:	0002      	movs	r2, r0
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b64      	cmp	r3, #100	; 0x64
 800a3f6:	d901      	bls.n	800a3fc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e1f5      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3fc:	4b0b      	ldr	r3, [pc, #44]	; (800a42c <HAL_RCC_OscConfig+0x344>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	2380      	movs	r3, #128	; 0x80
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	4013      	ands	r3, r2
 800a406:	d0f0      	beq.n	800a3ea <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d10f      	bne.n	800a430 <HAL_RCC_OscConfig+0x348>
 800a410:	4b03      	ldr	r3, [pc, #12]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a412:	6a1a      	ldr	r2, [r3, #32]
 800a414:	4b02      	ldr	r3, [pc, #8]	; (800a420 <HAL_RCC_OscConfig+0x338>)
 800a416:	2101      	movs	r1, #1
 800a418:	430a      	orrs	r2, r1
 800a41a:	621a      	str	r2, [r3, #32]
 800a41c:	e036      	b.n	800a48c <HAL_RCC_OscConfig+0x3a4>
 800a41e:	46c0      	nop			; (mov r8, r8)
 800a420:	40021000 	.word	0x40021000
 800a424:	fffeffff 	.word	0xfffeffff
 800a428:	fffbffff 	.word	0xfffbffff
 800a42c:	40007000 	.word	0x40007000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10c      	bne.n	800a452 <HAL_RCC_OscConfig+0x36a>
 800a438:	4bca      	ldr	r3, [pc, #808]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a43a:	6a1a      	ldr	r2, [r3, #32]
 800a43c:	4bc9      	ldr	r3, [pc, #804]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a43e:	2101      	movs	r1, #1
 800a440:	438a      	bics	r2, r1
 800a442:	621a      	str	r2, [r3, #32]
 800a444:	4bc7      	ldr	r3, [pc, #796]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a446:	6a1a      	ldr	r2, [r3, #32]
 800a448:	4bc6      	ldr	r3, [pc, #792]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a44a:	2104      	movs	r1, #4
 800a44c:	438a      	bics	r2, r1
 800a44e:	621a      	str	r2, [r3, #32]
 800a450:	e01c      	b.n	800a48c <HAL_RCC_OscConfig+0x3a4>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	2b05      	cmp	r3, #5
 800a458:	d10c      	bne.n	800a474 <HAL_RCC_OscConfig+0x38c>
 800a45a:	4bc2      	ldr	r3, [pc, #776]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a45c:	6a1a      	ldr	r2, [r3, #32]
 800a45e:	4bc1      	ldr	r3, [pc, #772]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a460:	2104      	movs	r1, #4
 800a462:	430a      	orrs	r2, r1
 800a464:	621a      	str	r2, [r3, #32]
 800a466:	4bbf      	ldr	r3, [pc, #764]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a468:	6a1a      	ldr	r2, [r3, #32]
 800a46a:	4bbe      	ldr	r3, [pc, #760]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a46c:	2101      	movs	r1, #1
 800a46e:	430a      	orrs	r2, r1
 800a470:	621a      	str	r2, [r3, #32]
 800a472:	e00b      	b.n	800a48c <HAL_RCC_OscConfig+0x3a4>
 800a474:	4bbb      	ldr	r3, [pc, #748]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a476:	6a1a      	ldr	r2, [r3, #32]
 800a478:	4bba      	ldr	r3, [pc, #744]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a47a:	2101      	movs	r1, #1
 800a47c:	438a      	bics	r2, r1
 800a47e:	621a      	str	r2, [r3, #32]
 800a480:	4bb8      	ldr	r3, [pc, #736]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a482:	6a1a      	ldr	r2, [r3, #32]
 800a484:	4bb7      	ldr	r3, [pc, #732]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a486:	2104      	movs	r1, #4
 800a488:	438a      	bics	r2, r1
 800a48a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d014      	beq.n	800a4be <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a494:	f7fc f842 	bl	800651c <HAL_GetTick>
 800a498:	0003      	movs	r3, r0
 800a49a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a49c:	e009      	b.n	800a4b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a49e:	f7fc f83d 	bl	800651c <HAL_GetTick>
 800a4a2:	0002      	movs	r2, r0
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	4aaf      	ldr	r2, [pc, #700]	; (800a768 <HAL_RCC_OscConfig+0x680>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d901      	bls.n	800a4b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e19a      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4b2:	4bac      	ldr	r3, [pc, #688]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	d0f0      	beq.n	800a49e <HAL_RCC_OscConfig+0x3b6>
 800a4bc:	e013      	b.n	800a4e6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4be:	f7fc f82d 	bl	800651c <HAL_GetTick>
 800a4c2:	0003      	movs	r3, r0
 800a4c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4c6:	e009      	b.n	800a4dc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4c8:	f7fc f828 	bl	800651c <HAL_GetTick>
 800a4cc:	0002      	movs	r2, r0
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	4aa5      	ldr	r2, [pc, #660]	; (800a768 <HAL_RCC_OscConfig+0x680>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e185      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4dc:	4ba1      	ldr	r3, [pc, #644]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a4de:	6a1b      	ldr	r3, [r3, #32]
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	d1f0      	bne.n	800a4c8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a4e6:	231f      	movs	r3, #31
 800a4e8:	18fb      	adds	r3, r7, r3
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d105      	bne.n	800a4fc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4f0:	4b9c      	ldr	r3, [pc, #624]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a4f2:	69da      	ldr	r2, [r3, #28]
 800a4f4:	4b9b      	ldr	r3, [pc, #620]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a4f6:	499d      	ldr	r1, [pc, #628]	; (800a76c <HAL_RCC_OscConfig+0x684>)
 800a4f8:	400a      	ands	r2, r1
 800a4fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2210      	movs	r2, #16
 800a502:	4013      	ands	r3, r2
 800a504:	d063      	beq.n	800a5ce <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d12a      	bne.n	800a564 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800a50e:	4b95      	ldr	r3, [pc, #596]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a512:	4b94      	ldr	r3, [pc, #592]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a514:	2104      	movs	r1, #4
 800a516:	430a      	orrs	r2, r1
 800a518:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800a51a:	4b92      	ldr	r3, [pc, #584]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a51c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a51e:	4b91      	ldr	r3, [pc, #580]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a520:	2101      	movs	r1, #1
 800a522:	430a      	orrs	r2, r1
 800a524:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a526:	f7fb fff9 	bl	800651c <HAL_GetTick>
 800a52a:	0003      	movs	r3, r0
 800a52c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800a52e:	e008      	b.n	800a542 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800a530:	f7fb fff4 	bl	800651c <HAL_GetTick>
 800a534:	0002      	movs	r2, r0
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d901      	bls.n	800a542 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e152      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800a542:	4b88      	ldr	r3, [pc, #544]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a546:	2202      	movs	r2, #2
 800a548:	4013      	ands	r3, r2
 800a54a:	d0f1      	beq.n	800a530 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800a54c:	4b85      	ldr	r3, [pc, #532]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a550:	22f8      	movs	r2, #248	; 0xf8
 800a552:	4393      	bics	r3, r2
 800a554:	0019      	movs	r1, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	00da      	lsls	r2, r3, #3
 800a55c:	4b81      	ldr	r3, [pc, #516]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a55e:	430a      	orrs	r2, r1
 800a560:	635a      	str	r2, [r3, #52]	; 0x34
 800a562:	e034      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	3305      	adds	r3, #5
 800a56a:	d111      	bne.n	800a590 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800a56c:	4b7d      	ldr	r3, [pc, #500]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a56e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a570:	4b7c      	ldr	r3, [pc, #496]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a572:	2104      	movs	r1, #4
 800a574:	438a      	bics	r2, r1
 800a576:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800a578:	4b7a      	ldr	r3, [pc, #488]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	22f8      	movs	r2, #248	; 0xf8
 800a57e:	4393      	bics	r3, r2
 800a580:	0019      	movs	r1, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	00da      	lsls	r2, r3, #3
 800a588:	4b76      	ldr	r3, [pc, #472]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a58a:	430a      	orrs	r2, r1
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34
 800a58e:	e01e      	b.n	800a5ce <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800a590:	4b74      	ldr	r3, [pc, #464]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a594:	4b73      	ldr	r3, [pc, #460]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a596:	2104      	movs	r1, #4
 800a598:	430a      	orrs	r2, r1
 800a59a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800a59c:	4b71      	ldr	r3, [pc, #452]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a59e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5a0:	4b70      	ldr	r3, [pc, #448]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	438a      	bics	r2, r1
 800a5a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5a8:	f7fb ffb8 	bl	800651c <HAL_GetTick>
 800a5ac:	0003      	movs	r3, r0
 800a5ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800a5b0:	e008      	b.n	800a5c4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800a5b2:	f7fb ffb3 	bl	800651c <HAL_GetTick>
 800a5b6:	0002      	movs	r2, r0
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d901      	bls.n	800a5c4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e111      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800a5c4:	4b67      	ldr	r3, [pc, #412]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	d1f1      	bne.n	800a5b2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	d05c      	beq.n	800a692 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800a5d8:	4b62      	ldr	r3, [pc, #392]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	220c      	movs	r2, #12
 800a5de:	4013      	ands	r3, r2
 800a5e0:	2b0c      	cmp	r3, #12
 800a5e2:	d00e      	beq.n	800a602 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800a5e4:	4b5f      	ldr	r3, [pc, #380]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	220c      	movs	r2, #12
 800a5ea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d114      	bne.n	800a61a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800a5f0:	4b5c      	ldr	r3, [pc, #368]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	23c0      	movs	r3, #192	; 0xc0
 800a5f6:	025b      	lsls	r3, r3, #9
 800a5f8:	401a      	ands	r2, r3
 800a5fa:	23c0      	movs	r3, #192	; 0xc0
 800a5fc:	025b      	lsls	r3, r3, #9
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d10b      	bne.n	800a61a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800a602:	4b58      	ldr	r3, [pc, #352]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a606:	2380      	movs	r3, #128	; 0x80
 800a608:	029b      	lsls	r3, r3, #10
 800a60a:	4013      	ands	r3, r2
 800a60c:	d040      	beq.n	800a690 <HAL_RCC_OscConfig+0x5a8>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a1b      	ldr	r3, [r3, #32]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d03c      	beq.n	800a690 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e0e6      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d01b      	beq.n	800a65a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800a622:	4b50      	ldr	r3, [pc, #320]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a626:	4b4f      	ldr	r3, [pc, #316]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a628:	2180      	movs	r1, #128	; 0x80
 800a62a:	0249      	lsls	r1, r1, #9
 800a62c:	430a      	orrs	r2, r1
 800a62e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a630:	f7fb ff74 	bl	800651c <HAL_GetTick>
 800a634:	0003      	movs	r3, r0
 800a636:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800a638:	e008      	b.n	800a64c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a63a:	f7fb ff6f 	bl	800651c <HAL_GetTick>
 800a63e:	0002      	movs	r2, r0
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	2b02      	cmp	r3, #2
 800a646:	d901      	bls.n	800a64c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e0cd      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800a64c:	4b45      	ldr	r3, [pc, #276]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a64e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a650:	2380      	movs	r3, #128	; 0x80
 800a652:	029b      	lsls	r3, r3, #10
 800a654:	4013      	ands	r3, r2
 800a656:	d0f0      	beq.n	800a63a <HAL_RCC_OscConfig+0x552>
 800a658:	e01b      	b.n	800a692 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800a65a:	4b42      	ldr	r3, [pc, #264]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a65c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a65e:	4b41      	ldr	r3, [pc, #260]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a660:	4943      	ldr	r1, [pc, #268]	; (800a770 <HAL_RCC_OscConfig+0x688>)
 800a662:	400a      	ands	r2, r1
 800a664:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a666:	f7fb ff59 	bl	800651c <HAL_GetTick>
 800a66a:	0003      	movs	r3, r0
 800a66c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800a66e:	e008      	b.n	800a682 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a670:	f7fb ff54 	bl	800651c <HAL_GetTick>
 800a674:	0002      	movs	r2, r0
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d901      	bls.n	800a682 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e0b2      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800a682:	4b38      	ldr	r3, [pc, #224]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a686:	2380      	movs	r3, #128	; 0x80
 800a688:	029b      	lsls	r3, r3, #10
 800a68a:	4013      	ands	r3, r2
 800a68c:	d1f0      	bne.n	800a670 <HAL_RCC_OscConfig+0x588>
 800a68e:	e000      	b.n	800a692 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800a690:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b00      	cmp	r3, #0
 800a698:	d100      	bne.n	800a69c <HAL_RCC_OscConfig+0x5b4>
 800a69a:	e0a4      	b.n	800a7e6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a69c:	4b31      	ldr	r3, [pc, #196]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	220c      	movs	r2, #12
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d100      	bne.n	800a6aa <HAL_RCC_OscConfig+0x5c2>
 800a6a8:	e078      	b.n	800a79c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d14c      	bne.n	800a74c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6b2:	4b2c      	ldr	r3, [pc, #176]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	4b2b      	ldr	r3, [pc, #172]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a6b8:	492e      	ldr	r1, [pc, #184]	; (800a774 <HAL_RCC_OscConfig+0x68c>)
 800a6ba:	400a      	ands	r2, r1
 800a6bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6be:	f7fb ff2d 	bl	800651c <HAL_GetTick>
 800a6c2:	0003      	movs	r3, r0
 800a6c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a6c6:	e008      	b.n	800a6da <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6c8:	f7fb ff28 	bl	800651c <HAL_GetTick>
 800a6cc:	0002      	movs	r2, r0
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d901      	bls.n	800a6da <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e086      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a6da:	4b22      	ldr	r3, [pc, #136]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	2380      	movs	r3, #128	; 0x80
 800a6e0:	049b      	lsls	r3, r3, #18
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	d1f0      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6e6:	4b1f      	ldr	r3, [pc, #124]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ea:	220f      	movs	r2, #15
 800a6ec:	4393      	bics	r3, r2
 800a6ee:	0019      	movs	r1, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6f4:	4b1b      	ldr	r3, [pc, #108]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a6f6:	430a      	orrs	r2, r1
 800a6f8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a6fa:	4b1a      	ldr	r3, [pc, #104]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	4a1e      	ldr	r2, [pc, #120]	; (800a778 <HAL_RCC_OscConfig+0x690>)
 800a700:	4013      	ands	r3, r2
 800a702:	0019      	movs	r1, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70c:	431a      	orrs	r2, r3
 800a70e:	4b15      	ldr	r3, [pc, #84]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a710:	430a      	orrs	r2, r1
 800a712:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a714:	4b13      	ldr	r3, [pc, #76]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	4b12      	ldr	r3, [pc, #72]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a71a:	2180      	movs	r1, #128	; 0x80
 800a71c:	0449      	lsls	r1, r1, #17
 800a71e:	430a      	orrs	r2, r1
 800a720:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a722:	f7fb fefb 	bl	800651c <HAL_GetTick>
 800a726:	0003      	movs	r3, r0
 800a728:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a72a:	e008      	b.n	800a73e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a72c:	f7fb fef6 	bl	800651c <HAL_GetTick>
 800a730:	0002      	movs	r2, r0
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	2b02      	cmp	r3, #2
 800a738:	d901      	bls.n	800a73e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e054      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a73e:	4b09      	ldr	r3, [pc, #36]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	2380      	movs	r3, #128	; 0x80
 800a744:	049b      	lsls	r3, r3, #18
 800a746:	4013      	ands	r3, r2
 800a748:	d0f0      	beq.n	800a72c <HAL_RCC_OscConfig+0x644>
 800a74a:	e04c      	b.n	800a7e6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a74c:	4b05      	ldr	r3, [pc, #20]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <HAL_RCC_OscConfig+0x67c>)
 800a752:	4908      	ldr	r1, [pc, #32]	; (800a774 <HAL_RCC_OscConfig+0x68c>)
 800a754:	400a      	ands	r2, r1
 800a756:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a758:	f7fb fee0 	bl	800651c <HAL_GetTick>
 800a75c:	0003      	movs	r3, r0
 800a75e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a760:	e015      	b.n	800a78e <HAL_RCC_OscConfig+0x6a6>
 800a762:	46c0      	nop			; (mov r8, r8)
 800a764:	40021000 	.word	0x40021000
 800a768:	00001388 	.word	0x00001388
 800a76c:	efffffff 	.word	0xefffffff
 800a770:	fffeffff 	.word	0xfffeffff
 800a774:	feffffff 	.word	0xfeffffff
 800a778:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a77c:	f7fb fece 	bl	800651c <HAL_GetTick>
 800a780:	0002      	movs	r2, r0
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	2b02      	cmp	r3, #2
 800a788:	d901      	bls.n	800a78e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e02c      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a78e:	4b18      	ldr	r3, [pc, #96]	; (800a7f0 <HAL_RCC_OscConfig+0x708>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	2380      	movs	r3, #128	; 0x80
 800a794:	049b      	lsls	r3, r3, #18
 800a796:	4013      	ands	r3, r2
 800a798:	d1f0      	bne.n	800a77c <HAL_RCC_OscConfig+0x694>
 800a79a:	e024      	b.n	800a7e6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d101      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e01f      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800a7a8:	4b11      	ldr	r3, [pc, #68]	; (800a7f0 <HAL_RCC_OscConfig+0x708>)
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800a7ae:	4b10      	ldr	r3, [pc, #64]	; (800a7f0 <HAL_RCC_OscConfig+0x708>)
 800a7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7b4:	697a      	ldr	r2, [r7, #20]
 800a7b6:	23c0      	movs	r3, #192	; 0xc0
 800a7b8:	025b      	lsls	r3, r3, #9
 800a7ba:	401a      	ands	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d10e      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	220f      	movs	r2, #15
 800a7c8:	401a      	ands	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d107      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	23f0      	movs	r3, #240	; 0xf0
 800a7d6:	039b      	lsls	r3, r3, #14
 800a7d8:	401a      	ands	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d001      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e000      	b.n	800a7e8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	0018      	movs	r0, r3
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b008      	add	sp, #32
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	40021000 	.word	0x40021000

0800a7f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e0bf      	b.n	800a988 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a808:	4b61      	ldr	r3, [pc, #388]	; (800a990 <HAL_RCC_ClockConfig+0x19c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2201      	movs	r2, #1
 800a80e:	4013      	ands	r3, r2
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	429a      	cmp	r2, r3
 800a814:	d911      	bls.n	800a83a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a816:	4b5e      	ldr	r3, [pc, #376]	; (800a990 <HAL_RCC_ClockConfig+0x19c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2201      	movs	r2, #1
 800a81c:	4393      	bics	r3, r2
 800a81e:	0019      	movs	r1, r3
 800a820:	4b5b      	ldr	r3, [pc, #364]	; (800a990 <HAL_RCC_ClockConfig+0x19c>)
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a828:	4b59      	ldr	r3, [pc, #356]	; (800a990 <HAL_RCC_ClockConfig+0x19c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2201      	movs	r2, #1
 800a82e:	4013      	ands	r3, r2
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	429a      	cmp	r2, r3
 800a834:	d001      	beq.n	800a83a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e0a6      	b.n	800a988 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2202      	movs	r2, #2
 800a840:	4013      	ands	r3, r2
 800a842:	d015      	beq.n	800a870 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2204      	movs	r2, #4
 800a84a:	4013      	ands	r3, r2
 800a84c:	d006      	beq.n	800a85c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a84e:	4b51      	ldr	r3, [pc, #324]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a850:	685a      	ldr	r2, [r3, #4]
 800a852:	4b50      	ldr	r3, [pc, #320]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a854:	21e0      	movs	r1, #224	; 0xe0
 800a856:	00c9      	lsls	r1, r1, #3
 800a858:	430a      	orrs	r2, r1
 800a85a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a85c:	4b4d      	ldr	r3, [pc, #308]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	22f0      	movs	r2, #240	; 0xf0
 800a862:	4393      	bics	r3, r2
 800a864:	0019      	movs	r1, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	689a      	ldr	r2, [r3, #8]
 800a86a:	4b4a      	ldr	r3, [pc, #296]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a86c:	430a      	orrs	r2, r1
 800a86e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2201      	movs	r2, #1
 800a876:	4013      	ands	r3, r2
 800a878:	d04c      	beq.n	800a914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d107      	bne.n	800a892 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a882:	4b44      	ldr	r3, [pc, #272]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	2380      	movs	r3, #128	; 0x80
 800a888:	029b      	lsls	r3, r3, #10
 800a88a:	4013      	ands	r3, r2
 800a88c:	d120      	bne.n	800a8d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e07a      	b.n	800a988 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	2b02      	cmp	r3, #2
 800a898:	d107      	bne.n	800a8aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a89a:	4b3e      	ldr	r3, [pc, #248]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	2380      	movs	r3, #128	; 0x80
 800a8a0:	049b      	lsls	r3, r3, #18
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	d114      	bne.n	800a8d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e06e      	b.n	800a988 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d107      	bne.n	800a8c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800a8b2:	4b38      	ldr	r3, [pc, #224]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a8b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8b6:	2380      	movs	r3, #128	; 0x80
 800a8b8:	029b      	lsls	r3, r3, #10
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	d108      	bne.n	800a8d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e062      	b.n	800a988 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8c2:	4b34      	ldr	r3, [pc, #208]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	d101      	bne.n	800a8d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e05b      	b.n	800a988 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a8d0:	4b30      	ldr	r3, [pc, #192]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	2203      	movs	r2, #3
 800a8d6:	4393      	bics	r3, r2
 800a8d8:	0019      	movs	r1, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	4b2d      	ldr	r3, [pc, #180]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a8e4:	f7fb fe1a 	bl	800651c <HAL_GetTick>
 800a8e8:	0003      	movs	r3, r0
 800a8ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8ec:	e009      	b.n	800a902 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a8ee:	f7fb fe15 	bl	800651c <HAL_GetTick>
 800a8f2:	0002      	movs	r2, r0
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	4a27      	ldr	r2, [pc, #156]	; (800a998 <HAL_RCC_ClockConfig+0x1a4>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d901      	bls.n	800a902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e042      	b.n	800a988 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a902:	4b24      	ldr	r3, [pc, #144]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	220c      	movs	r2, #12
 800a908:	401a      	ands	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	429a      	cmp	r2, r3
 800a912:	d1ec      	bne.n	800a8ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a914:	4b1e      	ldr	r3, [pc, #120]	; (800a990 <HAL_RCC_ClockConfig+0x19c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2201      	movs	r2, #1
 800a91a:	4013      	ands	r3, r2
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d211      	bcs.n	800a946 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a922:	4b1b      	ldr	r3, [pc, #108]	; (800a990 <HAL_RCC_ClockConfig+0x19c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2201      	movs	r2, #1
 800a928:	4393      	bics	r3, r2
 800a92a:	0019      	movs	r1, r3
 800a92c:	4b18      	ldr	r3, [pc, #96]	; (800a990 <HAL_RCC_ClockConfig+0x19c>)
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	430a      	orrs	r2, r1
 800a932:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a934:	4b16      	ldr	r3, [pc, #88]	; (800a990 <HAL_RCC_ClockConfig+0x19c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2201      	movs	r2, #1
 800a93a:	4013      	ands	r3, r2
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d001      	beq.n	800a946 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e020      	b.n	800a988 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2204      	movs	r2, #4
 800a94c:	4013      	ands	r3, r2
 800a94e:	d009      	beq.n	800a964 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a950:	4b10      	ldr	r3, [pc, #64]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	4a11      	ldr	r2, [pc, #68]	; (800a99c <HAL_RCC_ClockConfig+0x1a8>)
 800a956:	4013      	ands	r3, r2
 800a958:	0019      	movs	r1, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68da      	ldr	r2, [r3, #12]
 800a95e:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a960:	430a      	orrs	r2, r1
 800a962:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a964:	f000 f820 	bl	800a9a8 <HAL_RCC_GetSysClockFreq>
 800a968:	0001      	movs	r1, r0
 800a96a:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <HAL_RCC_ClockConfig+0x1a0>)
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	091b      	lsrs	r3, r3, #4
 800a970:	220f      	movs	r2, #15
 800a972:	4013      	ands	r3, r2
 800a974:	4a0a      	ldr	r2, [pc, #40]	; (800a9a0 <HAL_RCC_ClockConfig+0x1ac>)
 800a976:	5cd3      	ldrb	r3, [r2, r3]
 800a978:	000a      	movs	r2, r1
 800a97a:	40da      	lsrs	r2, r3
 800a97c:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <HAL_RCC_ClockConfig+0x1b0>)
 800a97e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800a980:	2003      	movs	r0, #3
 800a982:	f7fb fd85 	bl	8006490 <HAL_InitTick>
  
  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	0018      	movs	r0, r3
 800a98a:	46bd      	mov	sp, r7
 800a98c:	b004      	add	sp, #16
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	40022000 	.word	0x40022000
 800a994:	40021000 	.word	0x40021000
 800a998:	00001388 	.word	0x00001388
 800a99c:	fffff8ff 	.word	0xfffff8ff
 800a9a0:	0800dfe8 	.word	0x0800dfe8
 800a9a4:	2000003c 	.word	0x2000003c

0800a9a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	60bb      	str	r3, [r7, #8]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	617b      	str	r3, [r7, #20]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800a9c2:	4b2d      	ldr	r3, [pc, #180]	; (800aa78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	220c      	movs	r2, #12
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	2b0c      	cmp	r3, #12
 800a9d0:	d046      	beq.n	800aa60 <HAL_RCC_GetSysClockFreq+0xb8>
 800a9d2:	d848      	bhi.n	800aa66 <HAL_RCC_GetSysClockFreq+0xbe>
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d002      	beq.n	800a9de <HAL_RCC_GetSysClockFreq+0x36>
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d003      	beq.n	800a9e4 <HAL_RCC_GetSysClockFreq+0x3c>
 800a9dc:	e043      	b.n	800aa66 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a9de:	4b27      	ldr	r3, [pc, #156]	; (800aa7c <HAL_RCC_GetSysClockFreq+0xd4>)
 800a9e0:	613b      	str	r3, [r7, #16]
      break;
 800a9e2:	e043      	b.n	800aa6c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	0c9b      	lsrs	r3, r3, #18
 800a9e8:	220f      	movs	r2, #15
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	4a24      	ldr	r2, [pc, #144]	; (800aa80 <HAL_RCC_GetSysClockFreq+0xd8>)
 800a9ee:	5cd3      	ldrb	r3, [r2, r3]
 800a9f0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800a9f2:	4b21      	ldr	r3, [pc, #132]	; (800aa78 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	220f      	movs	r2, #15
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	4a22      	ldr	r2, [pc, #136]	; (800aa84 <HAL_RCC_GetSysClockFreq+0xdc>)
 800a9fc:	5cd3      	ldrb	r3, [r2, r3]
 800a9fe:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	23c0      	movs	r3, #192	; 0xc0
 800aa04:	025b      	lsls	r3, r3, #9
 800aa06:	401a      	ands	r2, r3
 800aa08:	2380      	movs	r3, #128	; 0x80
 800aa0a:	025b      	lsls	r3, r3, #9
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d109      	bne.n	800aa24 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	481a      	ldr	r0, [pc, #104]	; (800aa7c <HAL_RCC_GetSysClockFreq+0xd4>)
 800aa14:	f7f5 fb78 	bl	8000108 <__udivsi3>
 800aa18:	0003      	movs	r3, r0
 800aa1a:	001a      	movs	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4353      	muls	r3, r2
 800aa20:	617b      	str	r3, [r7, #20]
 800aa22:	e01a      	b.n	800aa5a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	23c0      	movs	r3, #192	; 0xc0
 800aa28:	025b      	lsls	r3, r3, #9
 800aa2a:	401a      	ands	r2, r3
 800aa2c:	23c0      	movs	r3, #192	; 0xc0
 800aa2e:	025b      	lsls	r3, r3, #9
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d109      	bne.n	800aa48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	4814      	ldr	r0, [pc, #80]	; (800aa88 <HAL_RCC_GetSysClockFreq+0xe0>)
 800aa38:	f7f5 fb66 	bl	8000108 <__udivsi3>
 800aa3c:	0003      	movs	r3, r0
 800aa3e:	001a      	movs	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4353      	muls	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]
 800aa46:	e008      	b.n	800aa5a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	480c      	ldr	r0, [pc, #48]	; (800aa7c <HAL_RCC_GetSysClockFreq+0xd4>)
 800aa4c:	f7f5 fb5c 	bl	8000108 <__udivsi3>
 800aa50:	0003      	movs	r3, r0
 800aa52:	001a      	movs	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4353      	muls	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	613b      	str	r3, [r7, #16]
      break;
 800aa5e:	e005      	b.n	800aa6c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800aa60:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <HAL_RCC_GetSysClockFreq+0xe0>)
 800aa62:	613b      	str	r3, [r7, #16]
      break;
 800aa64:	e002      	b.n	800aa6c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aa66:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <HAL_RCC_GetSysClockFreq+0xd4>)
 800aa68:	613b      	str	r3, [r7, #16]
      break;
 800aa6a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800aa6c:	693b      	ldr	r3, [r7, #16]
}
 800aa6e:	0018      	movs	r0, r3
 800aa70:	46bd      	mov	sp, r7
 800aa72:	b006      	add	sp, #24
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	40021000 	.word	0x40021000
 800aa7c:	007a1200 	.word	0x007a1200
 800aa80:	0800e0e8 	.word	0x0800e0e8
 800aa84:	0800e0f8 	.word	0x0800e0f8
 800aa88:	02dc6c00 	.word	0x02dc6c00

0800aa8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	2380      	movs	r3, #128	; 0x80
 800aaa2:	025b      	lsls	r3, r3, #9
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	d100      	bne.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800aaa8:	e08e      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800aaaa:	2017      	movs	r0, #23
 800aaac:	183b      	adds	r3, r7, r0
 800aaae:	2200      	movs	r2, #0
 800aab0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aab2:	4b6e      	ldr	r3, [pc, #440]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aab4:	69da      	ldr	r2, [r3, #28]
 800aab6:	2380      	movs	r3, #128	; 0x80
 800aab8:	055b      	lsls	r3, r3, #21
 800aaba:	4013      	ands	r3, r2
 800aabc:	d110      	bne.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800aabe:	4b6b      	ldr	r3, [pc, #428]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aac0:	69da      	ldr	r2, [r3, #28]
 800aac2:	4b6a      	ldr	r3, [pc, #424]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aac4:	2180      	movs	r1, #128	; 0x80
 800aac6:	0549      	lsls	r1, r1, #21
 800aac8:	430a      	orrs	r2, r1
 800aaca:	61da      	str	r2, [r3, #28]
 800aacc:	4b67      	ldr	r3, [pc, #412]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aace:	69da      	ldr	r2, [r3, #28]
 800aad0:	2380      	movs	r3, #128	; 0x80
 800aad2:	055b      	lsls	r3, r3, #21
 800aad4:	4013      	ands	r3, r2
 800aad6:	60bb      	str	r3, [r7, #8]
 800aad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aada:	183b      	adds	r3, r7, r0
 800aadc:	2201      	movs	r2, #1
 800aade:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aae0:	4b63      	ldr	r3, [pc, #396]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	2380      	movs	r3, #128	; 0x80
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	4013      	ands	r3, r2
 800aaea:	d11a      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaec:	4b60      	ldr	r3, [pc, #384]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	4b5f      	ldr	r3, [pc, #380]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800aaf2:	2180      	movs	r1, #128	; 0x80
 800aaf4:	0049      	lsls	r1, r1, #1
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aafa:	f7fb fd0f 	bl	800651c <HAL_GetTick>
 800aafe:	0003      	movs	r3, r0
 800ab00:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab02:	e008      	b.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab04:	f7fb fd0a 	bl	800651c <HAL_GetTick>
 800ab08:	0002      	movs	r2, r0
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	2b64      	cmp	r3, #100	; 0x64
 800ab10:	d901      	bls.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e0a6      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab16:	4b56      	ldr	r3, [pc, #344]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	2380      	movs	r3, #128	; 0x80
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	4013      	ands	r3, r2
 800ab20:	d0f0      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab22:	4b52      	ldr	r3, [pc, #328]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ab24:	6a1a      	ldr	r2, [r3, #32]
 800ab26:	23c0      	movs	r3, #192	; 0xc0
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d034      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x112>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	23c0      	movs	r3, #192	; 0xc0
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d02c      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab44:	4b49      	ldr	r3, [pc, #292]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	4a4a      	ldr	r2, [pc, #296]	; (800ac74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab4e:	4b47      	ldr	r3, [pc, #284]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ab50:	6a1a      	ldr	r2, [r3, #32]
 800ab52:	4b46      	ldr	r3, [pc, #280]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ab54:	2180      	movs	r1, #128	; 0x80
 800ab56:	0249      	lsls	r1, r1, #9
 800ab58:	430a      	orrs	r2, r1
 800ab5a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab5c:	4b43      	ldr	r3, [pc, #268]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ab5e:	6a1a      	ldr	r2, [r3, #32]
 800ab60:	4b42      	ldr	r3, [pc, #264]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ab62:	4945      	ldr	r1, [pc, #276]	; (800ac78 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800ab64:	400a      	ands	r2, r1
 800ab66:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ab68:	4b40      	ldr	r3, [pc, #256]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2201      	movs	r2, #1
 800ab72:	4013      	ands	r3, r2
 800ab74:	d013      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab76:	f7fb fcd1 	bl	800651c <HAL_GetTick>
 800ab7a:	0003      	movs	r3, r0
 800ab7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab7e:	e009      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab80:	f7fb fccc 	bl	800651c <HAL_GetTick>
 800ab84:	0002      	movs	r2, r0
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	4a3c      	ldr	r2, [pc, #240]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d901      	bls.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e067      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab94:	4b35      	ldr	r3, [pc, #212]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	d0f0      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab9e:	4b33      	ldr	r3, [pc, #204]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	4a34      	ldr	r2, [pc, #208]	; (800ac74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800aba4:	4013      	ands	r3, r2
 800aba6:	0019      	movs	r1, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	4b2f      	ldr	r3, [pc, #188]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800abae:	430a      	orrs	r2, r1
 800abb0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800abb2:	2317      	movs	r3, #23
 800abb4:	18fb      	adds	r3, r7, r3
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d105      	bne.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abbc:	4b2b      	ldr	r3, [pc, #172]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800abbe:	69da      	ldr	r2, [r3, #28]
 800abc0:	4b2a      	ldr	r3, [pc, #168]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800abc2:	492f      	ldr	r1, [pc, #188]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800abc4:	400a      	ands	r2, r1
 800abc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2201      	movs	r2, #1
 800abce:	4013      	ands	r3, r2
 800abd0:	d009      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800abd2:	4b26      	ldr	r3, [pc, #152]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800abd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd6:	2203      	movs	r2, #3
 800abd8:	4393      	bics	r3, r2
 800abda:	0019      	movs	r1, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	4b22      	ldr	r3, [pc, #136]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800abe2:	430a      	orrs	r2, r1
 800abe4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2202      	movs	r2, #2
 800abec:	4013      	ands	r3, r2
 800abee:	d009      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800abf0:	4b1e      	ldr	r3, [pc, #120]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800abf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf4:	4a23      	ldr	r2, [pc, #140]	; (800ac84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800abf6:	4013      	ands	r3, r2
 800abf8:	0019      	movs	r1, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68da      	ldr	r2, [r3, #12]
 800abfe:	4b1b      	ldr	r3, [pc, #108]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ac00:	430a      	orrs	r2, r1
 800ac02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	d009      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac0e:	4b17      	ldr	r3, [pc, #92]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac12:	2210      	movs	r2, #16
 800ac14:	4393      	bics	r3, r2
 800ac16:	0019      	movs	r1, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691a      	ldr	r2, [r3, #16]
 800ac1c:	4b13      	ldr	r3, [pc, #76]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	2380      	movs	r3, #128	; 0x80
 800ac28:	029b      	lsls	r3, r3, #10
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	d009      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac2e:	4b0f      	ldr	r3, [pc, #60]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	2280      	movs	r2, #128	; 0x80
 800ac34:	4393      	bics	r3, r2
 800ac36:	0019      	movs	r1, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	699a      	ldr	r2, [r3, #24]
 800ac3c:	4b0b      	ldr	r3, [pc, #44]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	2380      	movs	r3, #128	; 0x80
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	d009      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac4e:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ac50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac52:	2240      	movs	r2, #64	; 0x40
 800ac54:	4393      	bics	r3, r2
 800ac56:	0019      	movs	r1, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	695a      	ldr	r2, [r3, #20]
 800ac5c:	4b03      	ldr	r3, [pc, #12]	; (800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	0018      	movs	r0, r3
 800ac66:	46bd      	mov	sp, r7
 800ac68:	b006      	add	sp, #24
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	40021000 	.word	0x40021000
 800ac70:	40007000 	.word	0x40007000
 800ac74:	fffffcff 	.word	0xfffffcff
 800ac78:	fffeffff 	.word	0xfffeffff
 800ac7c:	00001388 	.word	0x00001388
 800ac80:	efffffff 	.word	0xefffffff
 800ac84:	fffcffff 	.word	0xfffcffff

0800ac88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e042      	b.n	800ad20 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	223d      	movs	r2, #61	; 0x3d
 800ac9e:	5c9b      	ldrb	r3, [r3, r2]
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d107      	bne.n	800acb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	223c      	movs	r2, #60	; 0x3c
 800acaa:	2100      	movs	r1, #0
 800acac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	0018      	movs	r0, r3
 800acb2:	f7f8 fdf9 	bl	80038a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	223d      	movs	r2, #61	; 0x3d
 800acba:	2102      	movs	r1, #2
 800acbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3304      	adds	r3, #4
 800acc6:	0019      	movs	r1, r3
 800acc8:	0010      	movs	r0, r2
 800acca:	f000 fc57 	bl	800b57c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2246      	movs	r2, #70	; 0x46
 800acd2:	2101      	movs	r1, #1
 800acd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	223e      	movs	r2, #62	; 0x3e
 800acda:	2101      	movs	r1, #1
 800acdc:	5499      	strb	r1, [r3, r2]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	223f      	movs	r2, #63	; 0x3f
 800ace2:	2101      	movs	r1, #1
 800ace4:	5499      	strb	r1, [r3, r2]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2240      	movs	r2, #64	; 0x40
 800acea:	2101      	movs	r1, #1
 800acec:	5499      	strb	r1, [r3, r2]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2241      	movs	r2, #65	; 0x41
 800acf2:	2101      	movs	r1, #1
 800acf4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2242      	movs	r2, #66	; 0x42
 800acfa:	2101      	movs	r1, #1
 800acfc:	5499      	strb	r1, [r3, r2]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2243      	movs	r2, #67	; 0x43
 800ad02:	2101      	movs	r1, #1
 800ad04:	5499      	strb	r1, [r3, r2]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2244      	movs	r2, #68	; 0x44
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	5499      	strb	r1, [r3, r2]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2245      	movs	r2, #69	; 0x45
 800ad12:	2101      	movs	r1, #1
 800ad14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	223d      	movs	r2, #61	; 0x3d
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	0018      	movs	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b002      	add	sp, #8
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	223d      	movs	r2, #61	; 0x3d
 800ad34:	5c9b      	ldrb	r3, [r3, r2]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d001      	beq.n	800ad40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e03b      	b.n	800adb8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	223d      	movs	r2, #61	; 0x3d
 800ad44:	2102      	movs	r1, #2
 800ad46:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68da      	ldr	r2, [r3, #12]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2101      	movs	r1, #1
 800ad54:	430a      	orrs	r2, r1
 800ad56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a18      	ldr	r2, [pc, #96]	; (800adc0 <HAL_TIM_Base_Start_IT+0x98>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d00f      	beq.n	800ad82 <HAL_TIM_Base_Start_IT+0x5a>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	2380      	movs	r3, #128	; 0x80
 800ad68:	05db      	lsls	r3, r3, #23
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d009      	beq.n	800ad82 <HAL_TIM_Base_Start_IT+0x5a>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <HAL_TIM_Base_Start_IT+0x9c>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d004      	beq.n	800ad82 <HAL_TIM_Base_Start_IT+0x5a>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a12      	ldr	r2, [pc, #72]	; (800adc8 <HAL_TIM_Base_Start_IT+0xa0>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d111      	bne.n	800ada6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	2207      	movs	r2, #7
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2b06      	cmp	r3, #6
 800ad92:	d010      	beq.n	800adb6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2101      	movs	r1, #1
 800ada0:	430a      	orrs	r2, r1
 800ada2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ada4:	e007      	b.n	800adb6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2101      	movs	r1, #1
 800adb2:	430a      	orrs	r2, r1
 800adb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	0018      	movs	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	b004      	add	sp, #16
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	40012c00 	.word	0x40012c00
 800adc4:	40000400 	.word	0x40000400
 800adc8:	40014000 	.word	0x40014000

0800adcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e042      	b.n	800ae64 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	223d      	movs	r2, #61	; 0x3d
 800ade2:	5c9b      	ldrb	r3, [r3, r2]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d107      	bne.n	800adfa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	223c      	movs	r2, #60	; 0x3c
 800adee:	2100      	movs	r1, #0
 800adf0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	0018      	movs	r0, r3
 800adf6:	f7f8 fd93 	bl	8003920 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	223d      	movs	r2, #61	; 0x3d
 800adfe:	2102      	movs	r1, #2
 800ae00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	0019      	movs	r1, r3
 800ae0c:	0010      	movs	r0, r2
 800ae0e:	f000 fbb5 	bl	800b57c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2246      	movs	r2, #70	; 0x46
 800ae16:	2101      	movs	r1, #1
 800ae18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	223e      	movs	r2, #62	; 0x3e
 800ae1e:	2101      	movs	r1, #1
 800ae20:	5499      	strb	r1, [r3, r2]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	223f      	movs	r2, #63	; 0x3f
 800ae26:	2101      	movs	r1, #1
 800ae28:	5499      	strb	r1, [r3, r2]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2240      	movs	r2, #64	; 0x40
 800ae2e:	2101      	movs	r1, #1
 800ae30:	5499      	strb	r1, [r3, r2]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2241      	movs	r2, #65	; 0x41
 800ae36:	2101      	movs	r1, #1
 800ae38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2242      	movs	r2, #66	; 0x42
 800ae3e:	2101      	movs	r1, #1
 800ae40:	5499      	strb	r1, [r3, r2]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2243      	movs	r2, #67	; 0x43
 800ae46:	2101      	movs	r1, #1
 800ae48:	5499      	strb	r1, [r3, r2]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2244      	movs	r2, #68	; 0x44
 800ae4e:	2101      	movs	r1, #1
 800ae50:	5499      	strb	r1, [r3, r2]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2245      	movs	r2, #69	; 0x45
 800ae56:	2101      	movs	r1, #1
 800ae58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	223d      	movs	r2, #61	; 0x3d
 800ae5e:	2101      	movs	r1, #1
 800ae60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	0018      	movs	r0, r3
 800ae66:	46bd      	mov	sp, r7
 800ae68:	b002      	add	sp, #8
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d108      	bne.n	800ae8e <HAL_TIM_PWM_Start+0x22>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	223e      	movs	r2, #62	; 0x3e
 800ae80:	5c9b      	ldrb	r3, [r3, r2]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	3b01      	subs	r3, #1
 800ae86:	1e5a      	subs	r2, r3, #1
 800ae88:	4193      	sbcs	r3, r2
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	e01f      	b.n	800aece <HAL_TIM_PWM_Start+0x62>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d108      	bne.n	800aea6 <HAL_TIM_PWM_Start+0x3a>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	223f      	movs	r2, #63	; 0x3f
 800ae98:	5c9b      	ldrb	r3, [r3, r2]
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	1e5a      	subs	r2, r3, #1
 800aea0:	4193      	sbcs	r3, r2
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	e013      	b.n	800aece <HAL_TIM_PWM_Start+0x62>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	d108      	bne.n	800aebe <HAL_TIM_PWM_Start+0x52>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2240      	movs	r2, #64	; 0x40
 800aeb0:	5c9b      	ldrb	r3, [r3, r2]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	1e5a      	subs	r2, r3, #1
 800aeb8:	4193      	sbcs	r3, r2
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	e007      	b.n	800aece <HAL_TIM_PWM_Start+0x62>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2241      	movs	r2, #65	; 0x41
 800aec2:	5c9b      	ldrb	r3, [r3, r2]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	1e5a      	subs	r2, r3, #1
 800aeca:	4193      	sbcs	r3, r2
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e074      	b.n	800afc0 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <HAL_TIM_PWM_Start+0x7a>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	223e      	movs	r2, #62	; 0x3e
 800aee0:	2102      	movs	r1, #2
 800aee2:	5499      	strb	r1, [r3, r2]
 800aee4:	e013      	b.n	800af0e <HAL_TIM_PWM_Start+0xa2>
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d104      	bne.n	800aef6 <HAL_TIM_PWM_Start+0x8a>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	223f      	movs	r2, #63	; 0x3f
 800aef0:	2102      	movs	r1, #2
 800aef2:	5499      	strb	r1, [r3, r2]
 800aef4:	e00b      	b.n	800af0e <HAL_TIM_PWM_Start+0xa2>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	2b08      	cmp	r3, #8
 800aefa:	d104      	bne.n	800af06 <HAL_TIM_PWM_Start+0x9a>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2240      	movs	r2, #64	; 0x40
 800af00:	2102      	movs	r1, #2
 800af02:	5499      	strb	r1, [r3, r2]
 800af04:	e003      	b.n	800af0e <HAL_TIM_PWM_Start+0xa2>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2241      	movs	r2, #65	; 0x41
 800af0a:	2102      	movs	r1, #2
 800af0c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	2201      	movs	r2, #1
 800af16:	0018      	movs	r0, r3
 800af18:	f000 fe46 	bl	800bba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a29      	ldr	r2, [pc, #164]	; (800afc8 <HAL_TIM_PWM_Start+0x15c>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d00e      	beq.n	800af44 <HAL_TIM_PWM_Start+0xd8>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a28      	ldr	r2, [pc, #160]	; (800afcc <HAL_TIM_PWM_Start+0x160>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d009      	beq.n	800af44 <HAL_TIM_PWM_Start+0xd8>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a26      	ldr	r2, [pc, #152]	; (800afd0 <HAL_TIM_PWM_Start+0x164>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d004      	beq.n	800af44 <HAL_TIM_PWM_Start+0xd8>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a25      	ldr	r2, [pc, #148]	; (800afd4 <HAL_TIM_PWM_Start+0x168>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d101      	bne.n	800af48 <HAL_TIM_PWM_Start+0xdc>
 800af44:	2301      	movs	r3, #1
 800af46:	e000      	b.n	800af4a <HAL_TIM_PWM_Start+0xde>
 800af48:	2300      	movs	r3, #0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d008      	beq.n	800af60 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2180      	movs	r1, #128	; 0x80
 800af5a:	0209      	lsls	r1, r1, #8
 800af5c:	430a      	orrs	r2, r1
 800af5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a18      	ldr	r2, [pc, #96]	; (800afc8 <HAL_TIM_PWM_Start+0x15c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d00f      	beq.n	800af8a <HAL_TIM_PWM_Start+0x11e>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	2380      	movs	r3, #128	; 0x80
 800af70:	05db      	lsls	r3, r3, #23
 800af72:	429a      	cmp	r2, r3
 800af74:	d009      	beq.n	800af8a <HAL_TIM_PWM_Start+0x11e>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a17      	ldr	r2, [pc, #92]	; (800afd8 <HAL_TIM_PWM_Start+0x16c>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d004      	beq.n	800af8a <HAL_TIM_PWM_Start+0x11e>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a11      	ldr	r2, [pc, #68]	; (800afcc <HAL_TIM_PWM_Start+0x160>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d111      	bne.n	800afae <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	2207      	movs	r2, #7
 800af92:	4013      	ands	r3, r2
 800af94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b06      	cmp	r3, #6
 800af9a:	d010      	beq.n	800afbe <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2101      	movs	r1, #1
 800afa8:	430a      	orrs	r2, r1
 800afaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afac:	e007      	b.n	800afbe <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2101      	movs	r1, #1
 800afba:	430a      	orrs	r2, r1
 800afbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	0018      	movs	r0, r3
 800afc2:	46bd      	mov	sp, r7
 800afc4:	b004      	add	sp, #16
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	40012c00 	.word	0x40012c00
 800afcc:	40014000 	.word	0x40014000
 800afd0:	40014400 	.word	0x40014400
 800afd4:	40014800 	.word	0x40014800
 800afd8:	40000400 	.word	0x40000400

0800afdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	2202      	movs	r2, #2
 800afec:	4013      	ands	r3, r2
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d124      	bne.n	800b03c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	2202      	movs	r2, #2
 800affa:	4013      	ands	r3, r2
 800affc:	2b02      	cmp	r3, #2
 800affe:	d11d      	bne.n	800b03c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2203      	movs	r2, #3
 800b006:	4252      	negs	r2, r2
 800b008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	2203      	movs	r2, #3
 800b018:	4013      	ands	r3, r2
 800b01a:	d004      	beq.n	800b026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	0018      	movs	r0, r3
 800b020:	f000 fa94 	bl	800b54c <HAL_TIM_IC_CaptureCallback>
 800b024:	e007      	b.n	800b036 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	0018      	movs	r0, r3
 800b02a:	f000 fa87 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	0018      	movs	r0, r3
 800b032:	f000 fa93 	bl	800b55c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	2204      	movs	r2, #4
 800b044:	4013      	ands	r3, r2
 800b046:	2b04      	cmp	r3, #4
 800b048:	d125      	bne.n	800b096 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	2204      	movs	r2, #4
 800b052:	4013      	ands	r3, r2
 800b054:	2b04      	cmp	r3, #4
 800b056:	d11e      	bne.n	800b096 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2205      	movs	r2, #5
 800b05e:	4252      	negs	r2, r2
 800b060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2202      	movs	r2, #2
 800b066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	23c0      	movs	r3, #192	; 0xc0
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4013      	ands	r3, r2
 800b074:	d004      	beq.n	800b080 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	0018      	movs	r0, r3
 800b07a:	f000 fa67 	bl	800b54c <HAL_TIM_IC_CaptureCallback>
 800b07e:	e007      	b.n	800b090 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	0018      	movs	r0, r3
 800b084:	f000 fa5a 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	0018      	movs	r0, r3
 800b08c:	f000 fa66 	bl	800b55c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	2208      	movs	r2, #8
 800b09e:	4013      	ands	r3, r2
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d124      	bne.n	800b0ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	2208      	movs	r2, #8
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	2b08      	cmp	r3, #8
 800b0b0:	d11d      	bne.n	800b0ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2209      	movs	r2, #9
 800b0b8:	4252      	negs	r2, r2
 800b0ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2204      	movs	r2, #4
 800b0c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	2203      	movs	r2, #3
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	d004      	beq.n	800b0d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f000 fa3b 	bl	800b54c <HAL_TIM_IC_CaptureCallback>
 800b0d6:	e007      	b.n	800b0e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	0018      	movs	r0, r3
 800b0dc:	f000 fa2e 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f000 fa3a 	bl	800b55c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	2210      	movs	r2, #16
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	2b10      	cmp	r3, #16
 800b0fa:	d125      	bne.n	800b148 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	2210      	movs	r2, #16
 800b104:	4013      	ands	r3, r2
 800b106:	2b10      	cmp	r3, #16
 800b108:	d11e      	bne.n	800b148 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2211      	movs	r2, #17
 800b110:	4252      	negs	r2, r2
 800b112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2208      	movs	r2, #8
 800b118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	69da      	ldr	r2, [r3, #28]
 800b120:	23c0      	movs	r3, #192	; 0xc0
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4013      	ands	r3, r2
 800b126:	d004      	beq.n	800b132 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	0018      	movs	r0, r3
 800b12c:	f000 fa0e 	bl	800b54c <HAL_TIM_IC_CaptureCallback>
 800b130:	e007      	b.n	800b142 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	0018      	movs	r0, r3
 800b136:	f000 fa01 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	0018      	movs	r0, r3
 800b13e:	f000 fa0d 	bl	800b55c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	2201      	movs	r2, #1
 800b150:	4013      	ands	r3, r2
 800b152:	2b01      	cmp	r3, #1
 800b154:	d10f      	bne.n	800b176 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	2201      	movs	r2, #1
 800b15e:	4013      	ands	r3, r2
 800b160:	2b01      	cmp	r3, #1
 800b162:	d108      	bne.n	800b176 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2202      	movs	r2, #2
 800b16a:	4252      	negs	r2, r2
 800b16c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	0018      	movs	r0, r3
 800b172:	f7f8 fa87 	bl	8003684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	2280      	movs	r2, #128	; 0x80
 800b17e:	4013      	ands	r3, r2
 800b180:	2b80      	cmp	r3, #128	; 0x80
 800b182:	d10f      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	2280      	movs	r2, #128	; 0x80
 800b18c:	4013      	ands	r3, r2
 800b18e:	2b80      	cmp	r3, #128	; 0x80
 800b190:	d108      	bne.n	800b1a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2281      	movs	r2, #129	; 0x81
 800b198:	4252      	negs	r2, r2
 800b19a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	0018      	movs	r0, r3
 800b1a0:	f000 fd8c 	bl	800bcbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	2240      	movs	r2, #64	; 0x40
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	2b40      	cmp	r3, #64	; 0x40
 800b1b0:	d10f      	bne.n	800b1d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	2240      	movs	r2, #64	; 0x40
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	2b40      	cmp	r3, #64	; 0x40
 800b1be:	d108      	bne.n	800b1d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2241      	movs	r2, #65	; 0x41
 800b1c6:	4252      	negs	r2, r2
 800b1c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f000 f9cd 	bl	800b56c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	2220      	movs	r2, #32
 800b1da:	4013      	ands	r3, r2
 800b1dc:	2b20      	cmp	r3, #32
 800b1de:	d10f      	bne.n	800b200 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	2b20      	cmp	r3, #32
 800b1ec:	d108      	bne.n	800b200 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2221      	movs	r2, #33	; 0x21
 800b1f4:	4252      	negs	r2, r2
 800b1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	f000 fd56 	bl	800bcac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b200:	46c0      	nop			; (mov r8, r8)
 800b202:	46bd      	mov	sp, r7
 800b204:	b002      	add	sp, #8
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b214:	2317      	movs	r3, #23
 800b216:	18fb      	adds	r3, r7, r3
 800b218:	2200      	movs	r2, #0
 800b21a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	223c      	movs	r2, #60	; 0x3c
 800b220:	5c9b      	ldrb	r3, [r3, r2]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d101      	bne.n	800b22a <HAL_TIM_PWM_ConfigChannel+0x22>
 800b226:	2302      	movs	r3, #2
 800b228:	e0ad      	b.n	800b386 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	223c      	movs	r2, #60	; 0x3c
 800b22e:	2101      	movs	r1, #1
 800b230:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2b0c      	cmp	r3, #12
 800b236:	d100      	bne.n	800b23a <HAL_TIM_PWM_ConfigChannel+0x32>
 800b238:	e076      	b.n	800b328 <HAL_TIM_PWM_ConfigChannel+0x120>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b0c      	cmp	r3, #12
 800b23e:	d900      	bls.n	800b242 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800b240:	e095      	b.n	800b36e <HAL_TIM_PWM_ConfigChannel+0x166>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b08      	cmp	r3, #8
 800b246:	d04e      	beq.n	800b2e6 <HAL_TIM_PWM_ConfigChannel+0xde>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b08      	cmp	r3, #8
 800b24c:	d900      	bls.n	800b250 <HAL_TIM_PWM_ConfigChannel+0x48>
 800b24e:	e08e      	b.n	800b36e <HAL_TIM_PWM_ConfigChannel+0x166>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d003      	beq.n	800b25e <HAL_TIM_PWM_ConfigChannel+0x56>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b04      	cmp	r3, #4
 800b25a:	d021      	beq.n	800b2a0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800b25c:	e087      	b.n	800b36e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	0011      	movs	r1, r2
 800b266:	0018      	movs	r0, r3
 800b268:	f000 fa08 	bl	800b67c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	699a      	ldr	r2, [r3, #24]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2108      	movs	r1, #8
 800b278:	430a      	orrs	r2, r1
 800b27a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699a      	ldr	r2, [r3, #24]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2104      	movs	r1, #4
 800b288:	438a      	bics	r2, r1
 800b28a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6999      	ldr	r1, [r3, #24]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	691a      	ldr	r2, [r3, #16]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	430a      	orrs	r2, r1
 800b29c:	619a      	str	r2, [r3, #24]
      break;
 800b29e:	e06b      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	0011      	movs	r1, r2
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	f000 fa6f 	bl	800b78c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	699a      	ldr	r2, [r3, #24]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2180      	movs	r1, #128	; 0x80
 800b2ba:	0109      	lsls	r1, r1, #4
 800b2bc:	430a      	orrs	r2, r1
 800b2be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699a      	ldr	r2, [r3, #24]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4931      	ldr	r1, [pc, #196]	; (800b390 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800b2cc:	400a      	ands	r2, r1
 800b2ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	6999      	ldr	r1, [r3, #24]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	021a      	lsls	r2, r3, #8
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	619a      	str	r2, [r3, #24]
      break;
 800b2e4:	e048      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	0011      	movs	r1, r2
 800b2ee:	0018      	movs	r0, r3
 800b2f0:	f000 fad0 	bl	800b894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	69da      	ldr	r2, [r3, #28]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2108      	movs	r1, #8
 800b300:	430a      	orrs	r2, r1
 800b302:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	69da      	ldr	r2, [r3, #28]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2104      	movs	r1, #4
 800b310:	438a      	bics	r2, r1
 800b312:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	69d9      	ldr	r1, [r3, #28]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	691a      	ldr	r2, [r3, #16]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	430a      	orrs	r2, r1
 800b324:	61da      	str	r2, [r3, #28]
      break;
 800b326:	e027      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	0011      	movs	r1, r2
 800b330:	0018      	movs	r0, r3
 800b332:	f000 fb35 	bl	800b9a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	69da      	ldr	r2, [r3, #28]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2180      	movs	r1, #128	; 0x80
 800b342:	0109      	lsls	r1, r1, #4
 800b344:	430a      	orrs	r2, r1
 800b346:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69da      	ldr	r2, [r3, #28]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	490f      	ldr	r1, [pc, #60]	; (800b390 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800b354:	400a      	ands	r2, r1
 800b356:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	69d9      	ldr	r1, [r3, #28]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	021a      	lsls	r2, r3, #8
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	430a      	orrs	r2, r1
 800b36a:	61da      	str	r2, [r3, #28]
      break;
 800b36c:	e004      	b.n	800b378 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800b36e:	2317      	movs	r3, #23
 800b370:	18fb      	adds	r3, r7, r3
 800b372:	2201      	movs	r2, #1
 800b374:	701a      	strb	r2, [r3, #0]
      break;
 800b376:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	223c      	movs	r2, #60	; 0x3c
 800b37c:	2100      	movs	r1, #0
 800b37e:	5499      	strb	r1, [r3, r2]

  return status;
 800b380:	2317      	movs	r3, #23
 800b382:	18fb      	adds	r3, r7, r3
 800b384:	781b      	ldrb	r3, [r3, #0]
}
 800b386:	0018      	movs	r0, r3
 800b388:	46bd      	mov	sp, r7
 800b38a:	b006      	add	sp, #24
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	46c0      	nop			; (mov r8, r8)
 800b390:	fffffbff 	.word	0xfffffbff

0800b394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b39e:	230f      	movs	r3, #15
 800b3a0:	18fb      	adds	r3, r7, r3
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	223c      	movs	r2, #60	; 0x3c
 800b3aa:	5c9b      	ldrb	r3, [r3, r2]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_TIM_ConfigClockSource+0x20>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e0bc      	b.n	800b52e <HAL_TIM_ConfigClockSource+0x19a>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	223c      	movs	r2, #60	; 0x3c
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	223d      	movs	r2, #61	; 0x3d
 800b3c0:	2102      	movs	r1, #2
 800b3c2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2277      	movs	r2, #119	; 0x77
 800b3d0:	4393      	bics	r3, r2
 800b3d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	4a58      	ldr	r2, [pc, #352]	; (800b538 <HAL_TIM_ConfigClockSource+0x1a4>)
 800b3d8:	4013      	ands	r3, r2
 800b3da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2280      	movs	r2, #128	; 0x80
 800b3ea:	0192      	lsls	r2, r2, #6
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d040      	beq.n	800b472 <HAL_TIM_ConfigClockSource+0xde>
 800b3f0:	2280      	movs	r2, #128	; 0x80
 800b3f2:	0192      	lsls	r2, r2, #6
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d900      	bls.n	800b3fa <HAL_TIM_ConfigClockSource+0x66>
 800b3f8:	e088      	b.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
 800b3fa:	2280      	movs	r2, #128	; 0x80
 800b3fc:	0152      	lsls	r2, r2, #5
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d100      	bne.n	800b404 <HAL_TIM_ConfigClockSource+0x70>
 800b402:	e088      	b.n	800b516 <HAL_TIM_ConfigClockSource+0x182>
 800b404:	2280      	movs	r2, #128	; 0x80
 800b406:	0152      	lsls	r2, r2, #5
 800b408:	4293      	cmp	r3, r2
 800b40a:	d900      	bls.n	800b40e <HAL_TIM_ConfigClockSource+0x7a>
 800b40c:	e07e      	b.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
 800b40e:	2b70      	cmp	r3, #112	; 0x70
 800b410:	d018      	beq.n	800b444 <HAL_TIM_ConfigClockSource+0xb0>
 800b412:	d900      	bls.n	800b416 <HAL_TIM_ConfigClockSource+0x82>
 800b414:	e07a      	b.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
 800b416:	2b60      	cmp	r3, #96	; 0x60
 800b418:	d04f      	beq.n	800b4ba <HAL_TIM_ConfigClockSource+0x126>
 800b41a:	d900      	bls.n	800b41e <HAL_TIM_ConfigClockSource+0x8a>
 800b41c:	e076      	b.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
 800b41e:	2b50      	cmp	r3, #80	; 0x50
 800b420:	d03b      	beq.n	800b49a <HAL_TIM_ConfigClockSource+0x106>
 800b422:	d900      	bls.n	800b426 <HAL_TIM_ConfigClockSource+0x92>
 800b424:	e072      	b.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
 800b426:	2b40      	cmp	r3, #64	; 0x40
 800b428:	d057      	beq.n	800b4da <HAL_TIM_ConfigClockSource+0x146>
 800b42a:	d900      	bls.n	800b42e <HAL_TIM_ConfigClockSource+0x9a>
 800b42c:	e06e      	b.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
 800b42e:	2b30      	cmp	r3, #48	; 0x30
 800b430:	d063      	beq.n	800b4fa <HAL_TIM_ConfigClockSource+0x166>
 800b432:	d86b      	bhi.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
 800b434:	2b20      	cmp	r3, #32
 800b436:	d060      	beq.n	800b4fa <HAL_TIM_ConfigClockSource+0x166>
 800b438:	d868      	bhi.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d05d      	beq.n	800b4fa <HAL_TIM_ConfigClockSource+0x166>
 800b43e:	2b10      	cmp	r3, #16
 800b440:	d05b      	beq.n	800b4fa <HAL_TIM_ConfigClockSource+0x166>
 800b442:	e063      	b.n	800b50c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b454:	f000 fb88 	bl	800bb68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2277      	movs	r2, #119	; 0x77
 800b464:	4313      	orrs	r3, r2
 800b466:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	609a      	str	r2, [r3, #8]
      break;
 800b470:	e052      	b.n	800b518 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b482:	f000 fb71 	bl	800bb68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2180      	movs	r1, #128	; 0x80
 800b492:	01c9      	lsls	r1, r1, #7
 800b494:	430a      	orrs	r2, r1
 800b496:	609a      	str	r2, [r3, #8]
      break;
 800b498:	e03e      	b.n	800b518 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4a6:	001a      	movs	r2, r3
 800b4a8:	f000 fae4 	bl	800ba74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2150      	movs	r1, #80	; 0x50
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f000 fb3e 	bl	800bb34 <TIM_ITRx_SetConfig>
      break;
 800b4b8:	e02e      	b.n	800b518 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4c6:	001a      	movs	r2, r3
 800b4c8:	f000 fb02 	bl	800bad0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2160      	movs	r1, #96	; 0x60
 800b4d2:	0018      	movs	r0, r3
 800b4d4:	f000 fb2e 	bl	800bb34 <TIM_ITRx_SetConfig>
      break;
 800b4d8:	e01e      	b.n	800b518 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4e6:	001a      	movs	r2, r3
 800b4e8:	f000 fac4 	bl	800ba74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2140      	movs	r1, #64	; 0x40
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f000 fb1e 	bl	800bb34 <TIM_ITRx_SetConfig>
      break;
 800b4f8:	e00e      	b.n	800b518 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	0019      	movs	r1, r3
 800b504:	0010      	movs	r0, r2
 800b506:	f000 fb15 	bl	800bb34 <TIM_ITRx_SetConfig>
      break;
 800b50a:	e005      	b.n	800b518 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800b50c:	230f      	movs	r3, #15
 800b50e:	18fb      	adds	r3, r7, r3
 800b510:	2201      	movs	r2, #1
 800b512:	701a      	strb	r2, [r3, #0]
      break;
 800b514:	e000      	b.n	800b518 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800b516:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	223d      	movs	r2, #61	; 0x3d
 800b51c:	2101      	movs	r1, #1
 800b51e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	223c      	movs	r2, #60	; 0x3c
 800b524:	2100      	movs	r1, #0
 800b526:	5499      	strb	r1, [r3, r2]

  return status;
 800b528:	230f      	movs	r3, #15
 800b52a:	18fb      	adds	r3, r7, r3
 800b52c:	781b      	ldrb	r3, [r3, #0]
}
 800b52e:	0018      	movs	r0, r3
 800b530:	46bd      	mov	sp, r7
 800b532:	b004      	add	sp, #16
 800b534:	bd80      	pop	{r7, pc}
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	ffff00ff 	.word	0xffff00ff

0800b53c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b544:	46c0      	nop			; (mov r8, r8)
 800b546:	46bd      	mov	sp, r7
 800b548:	b002      	add	sp, #8
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b554:	46c0      	nop			; (mov r8, r8)
 800b556:	46bd      	mov	sp, r7
 800b558:	b002      	add	sp, #8
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b564:	46c0      	nop			; (mov r8, r8)
 800b566:	46bd      	mov	sp, r7
 800b568:	b002      	add	sp, #8
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b574:	46c0      	nop			; (mov r8, r8)
 800b576:	46bd      	mov	sp, r7
 800b578:	b002      	add	sp, #8
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a34      	ldr	r2, [pc, #208]	; (800b660 <TIM_Base_SetConfig+0xe4>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d008      	beq.n	800b5a6 <TIM_Base_SetConfig+0x2a>
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	2380      	movs	r3, #128	; 0x80
 800b598:	05db      	lsls	r3, r3, #23
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d003      	beq.n	800b5a6 <TIM_Base_SetConfig+0x2a>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4a30      	ldr	r2, [pc, #192]	; (800b664 <TIM_Base_SetConfig+0xe8>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d108      	bne.n	800b5b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2270      	movs	r2, #112	; 0x70
 800b5aa:	4393      	bics	r3, r2
 800b5ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a29      	ldr	r2, [pc, #164]	; (800b660 <TIM_Base_SetConfig+0xe4>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d018      	beq.n	800b5f2 <TIM_Base_SetConfig+0x76>
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	2380      	movs	r3, #128	; 0x80
 800b5c4:	05db      	lsls	r3, r3, #23
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d013      	beq.n	800b5f2 <TIM_Base_SetConfig+0x76>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a25      	ldr	r2, [pc, #148]	; (800b664 <TIM_Base_SetConfig+0xe8>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d00f      	beq.n	800b5f2 <TIM_Base_SetConfig+0x76>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a24      	ldr	r2, [pc, #144]	; (800b668 <TIM_Base_SetConfig+0xec>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d00b      	beq.n	800b5f2 <TIM_Base_SetConfig+0x76>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a23      	ldr	r2, [pc, #140]	; (800b66c <TIM_Base_SetConfig+0xf0>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d007      	beq.n	800b5f2 <TIM_Base_SetConfig+0x76>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a22      	ldr	r2, [pc, #136]	; (800b670 <TIM_Base_SetConfig+0xf4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d003      	beq.n	800b5f2 <TIM_Base_SetConfig+0x76>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a21      	ldr	r2, [pc, #132]	; (800b674 <TIM_Base_SetConfig+0xf8>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d108      	bne.n	800b604 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4a20      	ldr	r2, [pc, #128]	; (800b678 <TIM_Base_SetConfig+0xfc>)
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2280      	movs	r2, #128	; 0x80
 800b608:	4393      	bics	r3, r2
 800b60a:	001a      	movs	r2, r3
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	695b      	ldr	r3, [r3, #20]
 800b610:	4313      	orrs	r3, r2
 800b612:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	689a      	ldr	r2, [r3, #8]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a0c      	ldr	r2, [pc, #48]	; (800b660 <TIM_Base_SetConfig+0xe4>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d00b      	beq.n	800b64a <TIM_Base_SetConfig+0xce>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a0d      	ldr	r2, [pc, #52]	; (800b66c <TIM_Base_SetConfig+0xf0>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d007      	beq.n	800b64a <TIM_Base_SetConfig+0xce>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a0c      	ldr	r2, [pc, #48]	; (800b670 <TIM_Base_SetConfig+0xf4>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d003      	beq.n	800b64a <TIM_Base_SetConfig+0xce>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a0b      	ldr	r2, [pc, #44]	; (800b674 <TIM_Base_SetConfig+0xf8>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d103      	bne.n	800b652 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	691a      	ldr	r2, [r3, #16]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	615a      	str	r2, [r3, #20]
}
 800b658:	46c0      	nop			; (mov r8, r8)
 800b65a:	46bd      	mov	sp, r7
 800b65c:	b004      	add	sp, #16
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	40012c00 	.word	0x40012c00
 800b664:	40000400 	.word	0x40000400
 800b668:	40002000 	.word	0x40002000
 800b66c:	40014000 	.word	0x40014000
 800b670:	40014400 	.word	0x40014400
 800b674:	40014800 	.word	0x40014800
 800b678:	fffffcff 	.word	0xfffffcff

0800b67c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a1b      	ldr	r3, [r3, #32]
 800b68a:	2201      	movs	r2, #1
 800b68c:	4393      	bics	r3, r2
 800b68e:	001a      	movs	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	699b      	ldr	r3, [r3, #24]
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2270      	movs	r2, #112	; 0x70
 800b6aa:	4393      	bics	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2203      	movs	r2, #3
 800b6b2:	4393      	bics	r3, r2
 800b6b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	4393      	bics	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a27      	ldr	r2, [pc, #156]	; (800b774 <TIM_OC1_SetConfig+0xf8>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00b      	beq.n	800b6f2 <TIM_OC1_SetConfig+0x76>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a26      	ldr	r2, [pc, #152]	; (800b778 <TIM_OC1_SetConfig+0xfc>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d007      	beq.n	800b6f2 <TIM_OC1_SetConfig+0x76>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a25      	ldr	r2, [pc, #148]	; (800b77c <TIM_OC1_SetConfig+0x100>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d003      	beq.n	800b6f2 <TIM_OC1_SetConfig+0x76>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a24      	ldr	r2, [pc, #144]	; (800b780 <TIM_OC1_SetConfig+0x104>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d10c      	bne.n	800b70c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2208      	movs	r2, #8
 800b6f6:	4393      	bics	r3, r2
 800b6f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	4313      	orrs	r3, r2
 800b702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2204      	movs	r2, #4
 800b708:	4393      	bics	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a19      	ldr	r2, [pc, #100]	; (800b774 <TIM_OC1_SetConfig+0xf8>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d00b      	beq.n	800b72c <TIM_OC1_SetConfig+0xb0>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a18      	ldr	r2, [pc, #96]	; (800b778 <TIM_OC1_SetConfig+0xfc>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d007      	beq.n	800b72c <TIM_OC1_SetConfig+0xb0>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4a17      	ldr	r2, [pc, #92]	; (800b77c <TIM_OC1_SetConfig+0x100>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d003      	beq.n	800b72c <TIM_OC1_SetConfig+0xb0>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a16      	ldr	r2, [pc, #88]	; (800b780 <TIM_OC1_SetConfig+0x104>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d111      	bne.n	800b750 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	4a15      	ldr	r2, [pc, #84]	; (800b784 <TIM_OC1_SetConfig+0x108>)
 800b730:	4013      	ands	r3, r2
 800b732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	4a14      	ldr	r2, [pc, #80]	; (800b788 <TIM_OC1_SetConfig+0x10c>)
 800b738:	4013      	ands	r3, r2
 800b73a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	4313      	orrs	r3, r2
 800b744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	621a      	str	r2, [r3, #32]
}
 800b76a:	46c0      	nop			; (mov r8, r8)
 800b76c:	46bd      	mov	sp, r7
 800b76e:	b006      	add	sp, #24
 800b770:	bd80      	pop	{r7, pc}
 800b772:	46c0      	nop			; (mov r8, r8)
 800b774:	40012c00 	.word	0x40012c00
 800b778:	40014000 	.word	0x40014000
 800b77c:	40014400 	.word	0x40014400
 800b780:	40014800 	.word	0x40014800
 800b784:	fffffeff 	.word	0xfffffeff
 800b788:	fffffdff 	.word	0xfffffdff

0800b78c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	2210      	movs	r2, #16
 800b79c:	4393      	bics	r3, r2
 800b79e:	001a      	movs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
 800b7a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	4a2e      	ldr	r2, [pc, #184]	; (800b874 <TIM_OC2_SetConfig+0xe8>)
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	4a2d      	ldr	r2, [pc, #180]	; (800b878 <TIM_OC2_SetConfig+0xec>)
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	021b      	lsls	r3, r3, #8
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	2220      	movs	r2, #32
 800b7d6:	4393      	bics	r3, r2
 800b7d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a24      	ldr	r2, [pc, #144]	; (800b87c <TIM_OC2_SetConfig+0xf0>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d10d      	bne.n	800b80a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2280      	movs	r2, #128	; 0x80
 800b7f2:	4393      	bics	r3, r2
 800b7f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	697a      	ldr	r2, [r7, #20]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2240      	movs	r2, #64	; 0x40
 800b806:	4393      	bics	r3, r2
 800b808:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a1b      	ldr	r2, [pc, #108]	; (800b87c <TIM_OC2_SetConfig+0xf0>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d00b      	beq.n	800b82a <TIM_OC2_SetConfig+0x9e>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a1a      	ldr	r2, [pc, #104]	; (800b880 <TIM_OC2_SetConfig+0xf4>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d007      	beq.n	800b82a <TIM_OC2_SetConfig+0x9e>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a19      	ldr	r2, [pc, #100]	; (800b884 <TIM_OC2_SetConfig+0xf8>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d003      	beq.n	800b82a <TIM_OC2_SetConfig+0x9e>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a18      	ldr	r2, [pc, #96]	; (800b888 <TIM_OC2_SetConfig+0xfc>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d113      	bne.n	800b852 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	4a17      	ldr	r2, [pc, #92]	; (800b88c <TIM_OC2_SetConfig+0x100>)
 800b82e:	4013      	ands	r3, r2
 800b830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	4a16      	ldr	r2, [pc, #88]	; (800b890 <TIM_OC2_SetConfig+0x104>)
 800b836:	4013      	ands	r3, r2
 800b838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	4313      	orrs	r3, r2
 800b844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	621a      	str	r2, [r3, #32]
}
 800b86c:	46c0      	nop			; (mov r8, r8)
 800b86e:	46bd      	mov	sp, r7
 800b870:	b006      	add	sp, #24
 800b872:	bd80      	pop	{r7, pc}
 800b874:	ffff8fff 	.word	0xffff8fff
 800b878:	fffffcff 	.word	0xfffffcff
 800b87c:	40012c00 	.word	0x40012c00
 800b880:	40014000 	.word	0x40014000
 800b884:	40014400 	.word	0x40014400
 800b888:	40014800 	.word	0x40014800
 800b88c:	fffffbff 	.word	0xfffffbff
 800b890:	fffff7ff 	.word	0xfffff7ff

0800b894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	4a35      	ldr	r2, [pc, #212]	; (800b978 <TIM_OC3_SetConfig+0xe4>)
 800b8a4:	401a      	ands	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2270      	movs	r2, #112	; 0x70
 800b8c0:	4393      	bics	r3, r2
 800b8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	4393      	bics	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	4a28      	ldr	r2, [pc, #160]	; (800b97c <TIM_OC3_SetConfig+0xe8>)
 800b8da:	4013      	ands	r3, r2
 800b8dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	021b      	lsls	r3, r3, #8
 800b8e4:	697a      	ldr	r2, [r7, #20]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4a24      	ldr	r2, [pc, #144]	; (800b980 <TIM_OC3_SetConfig+0xec>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d10d      	bne.n	800b90e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	4a23      	ldr	r2, [pc, #140]	; (800b984 <TIM_OC3_SetConfig+0xf0>)
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	021b      	lsls	r3, r3, #8
 800b900:	697a      	ldr	r2, [r7, #20]
 800b902:	4313      	orrs	r3, r2
 800b904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	4a1f      	ldr	r2, [pc, #124]	; (800b988 <TIM_OC3_SetConfig+0xf4>)
 800b90a:	4013      	ands	r3, r2
 800b90c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <TIM_OC3_SetConfig+0xec>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00b      	beq.n	800b92e <TIM_OC3_SetConfig+0x9a>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a1c      	ldr	r2, [pc, #112]	; (800b98c <TIM_OC3_SetConfig+0xf8>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d007      	beq.n	800b92e <TIM_OC3_SetConfig+0x9a>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a1b      	ldr	r2, [pc, #108]	; (800b990 <TIM_OC3_SetConfig+0xfc>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d003      	beq.n	800b92e <TIM_OC3_SetConfig+0x9a>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a1a      	ldr	r2, [pc, #104]	; (800b994 <TIM_OC3_SetConfig+0x100>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d113      	bne.n	800b956 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	4a19      	ldr	r2, [pc, #100]	; (800b998 <TIM_OC3_SetConfig+0x104>)
 800b932:	4013      	ands	r3, r2
 800b934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	4a18      	ldr	r2, [pc, #96]	; (800b99c <TIM_OC3_SetConfig+0x108>)
 800b93a:	4013      	ands	r3, r2
 800b93c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	011b      	lsls	r3, r3, #4
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4313      	orrs	r3, r2
 800b948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	011b      	lsls	r3, r3, #4
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	4313      	orrs	r3, r2
 800b954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	621a      	str	r2, [r3, #32]
}
 800b970:	46c0      	nop			; (mov r8, r8)
 800b972:	46bd      	mov	sp, r7
 800b974:	b006      	add	sp, #24
 800b976:	bd80      	pop	{r7, pc}
 800b978:	fffffeff 	.word	0xfffffeff
 800b97c:	fffffdff 	.word	0xfffffdff
 800b980:	40012c00 	.word	0x40012c00
 800b984:	fffff7ff 	.word	0xfffff7ff
 800b988:	fffffbff 	.word	0xfffffbff
 800b98c:	40014000 	.word	0x40014000
 800b990:	40014400 	.word	0x40014400
 800b994:	40014800 	.word	0x40014800
 800b998:	ffffefff 	.word	0xffffefff
 800b99c:	ffffdfff 	.word	0xffffdfff

0800b9a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	4a28      	ldr	r2, [pc, #160]	; (800ba50 <TIM_OC4_SetConfig+0xb0>)
 800b9b0:	401a      	ands	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	69db      	ldr	r3, [r3, #28]
 800b9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4a22      	ldr	r2, [pc, #136]	; (800ba54 <TIM_OC4_SetConfig+0xb4>)
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4a21      	ldr	r2, [pc, #132]	; (800ba58 <TIM_OC4_SetConfig+0xb8>)
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	021b      	lsls	r3, r3, #8
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	4a1d      	ldr	r2, [pc, #116]	; (800ba5c <TIM_OC4_SetConfig+0xbc>)
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	031b      	lsls	r3, r3, #12
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a19      	ldr	r2, [pc, #100]	; (800ba60 <TIM_OC4_SetConfig+0xc0>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d00b      	beq.n	800ba18 <TIM_OC4_SetConfig+0x78>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a18      	ldr	r2, [pc, #96]	; (800ba64 <TIM_OC4_SetConfig+0xc4>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d007      	beq.n	800ba18 <TIM_OC4_SetConfig+0x78>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a17      	ldr	r2, [pc, #92]	; (800ba68 <TIM_OC4_SetConfig+0xc8>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d003      	beq.n	800ba18 <TIM_OC4_SetConfig+0x78>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a16      	ldr	r2, [pc, #88]	; (800ba6c <TIM_OC4_SetConfig+0xcc>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d109      	bne.n	800ba2c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	4a15      	ldr	r2, [pc, #84]	; (800ba70 <TIM_OC4_SetConfig+0xd0>)
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	695b      	ldr	r3, [r3, #20]
 800ba24:	019b      	lsls	r3, r3, #6
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	621a      	str	r2, [r3, #32]
}
 800ba46:	46c0      	nop			; (mov r8, r8)
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	b006      	add	sp, #24
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	46c0      	nop			; (mov r8, r8)
 800ba50:	ffffefff 	.word	0xffffefff
 800ba54:	ffff8fff 	.word	0xffff8fff
 800ba58:	fffffcff 	.word	0xfffffcff
 800ba5c:	ffffdfff 	.word	0xffffdfff
 800ba60:	40012c00 	.word	0x40012c00
 800ba64:	40014000 	.word	0x40014000
 800ba68:	40014400 	.word	0x40014400
 800ba6c:	40014800 	.word	0x40014800
 800ba70:	ffffbfff 	.word	0xffffbfff

0800ba74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6a1b      	ldr	r3, [r3, #32]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	4393      	bics	r3, r2
 800ba8e:	001a      	movs	r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	22f0      	movs	r2, #240	; 0xf0
 800ba9e:	4393      	bics	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	011b      	lsls	r3, r3, #4
 800baa6:	693a      	ldr	r2, [r7, #16]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	220a      	movs	r2, #10
 800bab0:	4393      	bics	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4313      	orrs	r3, r2
 800baba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	693a      	ldr	r2, [r7, #16]
 800bac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	621a      	str	r2, [r3, #32]
}
 800bac8:	46c0      	nop			; (mov r8, r8)
 800baca:	46bd      	mov	sp, r7
 800bacc:	b006      	add	sp, #24
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	2210      	movs	r2, #16
 800bae2:	4393      	bics	r3, r2
 800bae4:	001a      	movs	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	4a0d      	ldr	r2, [pc, #52]	; (800bb30 <TIM_TI2_ConfigInputStage+0x60>)
 800bafa:	4013      	ands	r3, r2
 800bafc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	031b      	lsls	r3, r3, #12
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	22a0      	movs	r2, #160	; 0xa0
 800bb0c:	4393      	bics	r3, r2
 800bb0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	011b      	lsls	r3, r3, #4
 800bb14:	693a      	ldr	r2, [r7, #16]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	621a      	str	r2, [r3, #32]
}
 800bb26:	46c0      	nop			; (mov r8, r8)
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	b006      	add	sp, #24
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	46c0      	nop			; (mov r8, r8)
 800bb30:	ffff0fff 	.word	0xffff0fff

0800bb34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2270      	movs	r2, #112	; 0x70
 800bb48:	4393      	bics	r3, r2
 800bb4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	2207      	movs	r2, #7
 800bb54:	4313      	orrs	r3, r2
 800bb56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	609a      	str	r2, [r3, #8]
}
 800bb5e:	46c0      	nop			; (mov r8, r8)
 800bb60:	46bd      	mov	sp, r7
 800bb62:	b004      	add	sp, #16
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	4a09      	ldr	r2, [pc, #36]	; (800bba4 <TIM_ETR_SetConfig+0x3c>)
 800bb80:	4013      	ands	r3, r2
 800bb82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	021a      	lsls	r2, r3, #8
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	697a      	ldr	r2, [r7, #20]
 800bb9a:	609a      	str	r2, [r3, #8]
}
 800bb9c:	46c0      	nop			; (mov r8, r8)
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	b006      	add	sp, #24
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	ffff00ff 	.word	0xffff00ff

0800bba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	221f      	movs	r2, #31
 800bbb8:	4013      	ands	r3, r2
 800bbba:	2201      	movs	r2, #1
 800bbbc:	409a      	lsls	r2, r3
 800bbbe:	0013      	movs	r3, r2
 800bbc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	43d2      	mvns	r2, r2
 800bbca:	401a      	ands	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6a1a      	ldr	r2, [r3, #32]
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	211f      	movs	r1, #31
 800bbd8:	400b      	ands	r3, r1
 800bbda:	6879      	ldr	r1, [r7, #4]
 800bbdc:	4099      	lsls	r1, r3
 800bbde:	000b      	movs	r3, r1
 800bbe0:	431a      	orrs	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	621a      	str	r2, [r3, #32]
}
 800bbe6:	46c0      	nop			; (mov r8, r8)
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	b006      	add	sp, #24
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	223c      	movs	r2, #60	; 0x3c
 800bbfe:	5c9b      	ldrb	r3, [r3, r2]
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d101      	bne.n	800bc08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc04:	2302      	movs	r3, #2
 800bc06:	e047      	b.n	800bc98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	223c      	movs	r2, #60	; 0x3c
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	223d      	movs	r2, #61	; 0x3d
 800bc14:	2102      	movs	r1, #2
 800bc16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2270      	movs	r2, #112	; 0x70
 800bc2c:	4393      	bics	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a16      	ldr	r2, [pc, #88]	; (800bca0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d00f      	beq.n	800bc6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	2380      	movs	r3, #128	; 0x80
 800bc52:	05db      	lsls	r3, r3, #23
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d009      	beq.n	800bc6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4a11      	ldr	r2, [pc, #68]	; (800bca4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d004      	beq.n	800bc6c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a10      	ldr	r2, [pc, #64]	; (800bca8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d10c      	bne.n	800bc86 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	2280      	movs	r2, #128	; 0x80
 800bc70:	4393      	bics	r3, r2
 800bc72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	223d      	movs	r2, #61	; 0x3d
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	223c      	movs	r2, #60	; 0x3c
 800bc92:	2100      	movs	r1, #0
 800bc94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	0018      	movs	r0, r3
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	b004      	add	sp, #16
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	40012c00 	.word	0x40012c00
 800bca4:	40000400 	.word	0x40000400
 800bca8:	40014000 	.word	0x40014000

0800bcac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcb4:	46c0      	nop			; (mov r8, r8)
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	b002      	add	sp, #8
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcc4:	46c0      	nop			; (mov r8, r8)
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	b002      	add	sp, #8
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2244      	movs	r2, #68	; 0x44
 800bcd8:	2100      	movs	r1, #0
 800bcda:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcdc:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <USB_EnableGlobalInt+0x28>)
 800bcde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	b299      	uxth	r1, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2240      	movs	r2, #64	; 0x40
 800bce8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	0018      	movs	r0, r3
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	b004      	add	sp, #16
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	0000bf80 	.word	0x0000bf80

0800bcf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd00:	4b09      	ldr	r3, [pc, #36]	; (800bd28 <USB_DisableGlobalInt+0x30>)
 800bd02:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2240      	movs	r2, #64	; 0x40
 800bd08:	5a9b      	ldrh	r3, [r3, r2]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	b292      	uxth	r2, r2
 800bd10:	43d2      	mvns	r2, r2
 800bd12:	b292      	uxth	r2, r2
 800bd14:	4013      	ands	r3, r2
 800bd16:	b299      	uxth	r1, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2240      	movs	r2, #64	; 0x40
 800bd1c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	0018      	movs	r0, r3
 800bd22:	46bd      	mov	sp, r7
 800bd24:	b004      	add	sp, #16
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	0000bf80 	.word	0x0000bf80

0800bd2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	b590      	push	{r4, r7, lr}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	2004      	movs	r0, #4
 800bd38:	2410      	movs	r4, #16
 800bd3a:	1900      	adds	r0, r0, r4
 800bd3c:	2408      	movs	r4, #8
 800bd3e:	46a4      	mov	ip, r4
 800bd40:	44bc      	add	ip, r7
 800bd42:	4460      	add	r0, ip
 800bd44:	6001      	str	r1, [r0, #0]
 800bd46:	6042      	str	r2, [r0, #4]
 800bd48:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2240      	movs	r2, #64	; 0x40
 800bd4e:	2101      	movs	r1, #1
 800bd50:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2240      	movs	r2, #64	; 0x40
 800bd56:	2100      	movs	r1, #0
 800bd58:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2244      	movs	r2, #68	; 0x44
 800bd5e:	2100      	movs	r1, #0
 800bd60:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2250      	movs	r2, #80	; 0x50
 800bd66:	2100      	movs	r1, #0
 800bd68:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	0018      	movs	r0, r3
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	b003      	add	sp, #12
 800bd72:	bc90      	pop	{r4, r7}
 800bd74:	bc08      	pop	{r3}
 800bd76:	b004      	add	sp, #16
 800bd78:	4718      	bx	r3
	...

0800bd7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b09c      	sub	sp, #112	; 0x70
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd86:	236f      	movs	r3, #111	; 0x6f
 800bd88:	18fb      	adds	r3, r7, r3
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	18d3      	adds	r3, r2, r3
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	236c      	movs	r3, #108	; 0x6c
 800bd9e:	18fb      	adds	r3, r7, r3
 800bda0:	49a3      	ldr	r1, [pc, #652]	; (800c030 <USB_ActivateEndpoint+0x2b4>)
 800bda2:	400a      	ands	r2, r1
 800bda4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	78db      	ldrb	r3, [r3, #3]
 800bdaa:	2b03      	cmp	r3, #3
 800bdac:	d017      	beq.n	800bdde <USB_ActivateEndpoint+0x62>
 800bdae:	dc28      	bgt.n	800be02 <USB_ActivateEndpoint+0x86>
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d00e      	beq.n	800bdd2 <USB_ActivateEndpoint+0x56>
 800bdb4:	dc25      	bgt.n	800be02 <USB_ActivateEndpoint+0x86>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d002      	beq.n	800bdc0 <USB_ActivateEndpoint+0x44>
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d018      	beq.n	800bdf0 <USB_ActivateEndpoint+0x74>
 800bdbe:	e020      	b.n	800be02 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bdc0:	226c      	movs	r2, #108	; 0x6c
 800bdc2:	18bb      	adds	r3, r7, r2
 800bdc4:	18ba      	adds	r2, r7, r2
 800bdc6:	8812      	ldrh	r2, [r2, #0]
 800bdc8:	2180      	movs	r1, #128	; 0x80
 800bdca:	0089      	lsls	r1, r1, #2
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	801a      	strh	r2, [r3, #0]
      break;
 800bdd0:	e01c      	b.n	800be0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800bdd2:	226c      	movs	r2, #108	; 0x6c
 800bdd4:	18bb      	adds	r3, r7, r2
 800bdd6:	18ba      	adds	r2, r7, r2
 800bdd8:	8812      	ldrh	r2, [r2, #0]
 800bdda:	801a      	strh	r2, [r3, #0]
      break;
 800bddc:	e016      	b.n	800be0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bdde:	226c      	movs	r2, #108	; 0x6c
 800bde0:	18bb      	adds	r3, r7, r2
 800bde2:	18ba      	adds	r2, r7, r2
 800bde4:	8812      	ldrh	r2, [r2, #0]
 800bde6:	21c0      	movs	r1, #192	; 0xc0
 800bde8:	00c9      	lsls	r1, r1, #3
 800bdea:	430a      	orrs	r2, r1
 800bdec:	801a      	strh	r2, [r3, #0]
      break;
 800bdee:	e00d      	b.n	800be0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bdf0:	226c      	movs	r2, #108	; 0x6c
 800bdf2:	18bb      	adds	r3, r7, r2
 800bdf4:	18ba      	adds	r2, r7, r2
 800bdf6:	8812      	ldrh	r2, [r2, #0]
 800bdf8:	2180      	movs	r1, #128	; 0x80
 800bdfa:	00c9      	lsls	r1, r1, #3
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	801a      	strh	r2, [r3, #0]
      break;
 800be00:	e004      	b.n	800be0c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800be02:	236f      	movs	r3, #111	; 0x6f
 800be04:	18fb      	adds	r3, r7, r3
 800be06:	2201      	movs	r2, #1
 800be08:	701a      	strb	r2, [r3, #0]
      break;
 800be0a:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	18d3      	adds	r3, r2, r3
 800be16:	226c      	movs	r2, #108	; 0x6c
 800be18:	18ba      	adds	r2, r7, r2
 800be1a:	8812      	ldrh	r2, [r2, #0]
 800be1c:	4985      	ldr	r1, [pc, #532]	; (800c034 <USB_ActivateEndpoint+0x2b8>)
 800be1e:	430a      	orrs	r2, r1
 800be20:	b292      	uxth	r2, r2
 800be22:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	18d3      	adds	r3, r2, r3
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	b29b      	uxth	r3, r3
 800be32:	b21b      	sxth	r3, r3
 800be34:	4a80      	ldr	r2, [pc, #512]	; (800c038 <USB_ActivateEndpoint+0x2bc>)
 800be36:	4013      	ands	r3, r2
 800be38:	b21a      	sxth	r2, r3
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	b21b      	sxth	r3, r3
 800be40:	4313      	orrs	r3, r2
 800be42:	b21a      	sxth	r2, r3
 800be44:	2166      	movs	r1, #102	; 0x66
 800be46:	187b      	adds	r3, r7, r1
 800be48:	801a      	strh	r2, [r3, #0]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	18d3      	adds	r3, r2, r3
 800be54:	187a      	adds	r2, r7, r1
 800be56:	8812      	ldrh	r2, [r2, #0]
 800be58:	4976      	ldr	r1, [pc, #472]	; (800c034 <USB_ActivateEndpoint+0x2b8>)
 800be5a:	430a      	orrs	r2, r1
 800be5c:	b292      	uxth	r2, r2
 800be5e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	7b1b      	ldrb	r3, [r3, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d000      	beq.n	800be6a <USB_ActivateEndpoint+0xee>
 800be68:	e178      	b.n	800c15c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	785b      	ldrb	r3, [r3, #1]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d100      	bne.n	800be74 <USB_ActivateEndpoint+0xf8>
 800be72:	e07a      	b.n	800bf6a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	61bb      	str	r3, [r7, #24]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2250      	movs	r2, #80	; 0x50
 800be7c:	5a9b      	ldrh	r3, [r3, r2]
 800be7e:	b29b      	uxth	r3, r3
 800be80:	001a      	movs	r2, r3
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	189b      	adds	r3, r3, r2
 800be86:	61bb      	str	r3, [r7, #24]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	00da      	lsls	r2, r3, #3
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	18d3      	adds	r3, r2, r3
 800be92:	2280      	movs	r2, #128	; 0x80
 800be94:	00d2      	lsls	r2, r2, #3
 800be96:	4694      	mov	ip, r2
 800be98:	4463      	add	r3, ip
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	88db      	ldrh	r3, [r3, #6]
 800bea0:	085b      	lsrs	r3, r3, #1
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	18db      	adds	r3, r3, r3
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	18d2      	adds	r2, r2, r3
 800beb6:	2112      	movs	r1, #18
 800beb8:	187b      	adds	r3, r7, r1
 800beba:	8812      	ldrh	r2, [r2, #0]
 800bebc:	801a      	strh	r2, [r3, #0]
 800bebe:	187b      	adds	r3, r7, r1
 800bec0:	881b      	ldrh	r3, [r3, #0]
 800bec2:	2240      	movs	r2, #64	; 0x40
 800bec4:	4013      	ands	r3, r2
 800bec6:	d016      	beq.n	800bef6 <USB_ActivateEndpoint+0x17a>
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	18d3      	adds	r3, r2, r3
 800bed2:	881b      	ldrh	r3, [r3, #0]
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	2010      	movs	r0, #16
 800bed8:	183b      	adds	r3, r7, r0
 800beda:	4957      	ldr	r1, [pc, #348]	; (800c038 <USB_ActivateEndpoint+0x2bc>)
 800bedc:	400a      	ands	r2, r1
 800bede:	801a      	strh	r2, [r3, #0]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	18d3      	adds	r3, r2, r3
 800beea:	183a      	adds	r2, r7, r0
 800beec:	8812      	ldrh	r2, [r2, #0]
 800beee:	4953      	ldr	r1, [pc, #332]	; (800c03c <USB_ActivateEndpoint+0x2c0>)
 800bef0:	430a      	orrs	r2, r1
 800bef2:	b292      	uxth	r2, r2
 800bef4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	78db      	ldrb	r3, [r3, #3]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d01d      	beq.n	800bf3a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	18d3      	adds	r3, r2, r3
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	200c      	movs	r0, #12
 800bf0e:	183b      	adds	r3, r7, r0
 800bf10:	494b      	ldr	r1, [pc, #300]	; (800c040 <USB_ActivateEndpoint+0x2c4>)
 800bf12:	400a      	ands	r2, r1
 800bf14:	801a      	strh	r2, [r3, #0]
 800bf16:	183b      	adds	r3, r7, r0
 800bf18:	183a      	adds	r2, r7, r0
 800bf1a:	8812      	ldrh	r2, [r2, #0]
 800bf1c:	2120      	movs	r1, #32
 800bf1e:	404a      	eors	r2, r1
 800bf20:	801a      	strh	r2, [r3, #0]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	18d3      	adds	r3, r2, r3
 800bf2c:	183a      	adds	r2, r7, r0
 800bf2e:	8812      	ldrh	r2, [r2, #0]
 800bf30:	4940      	ldr	r1, [pc, #256]	; (800c034 <USB_ActivateEndpoint+0x2b8>)
 800bf32:	430a      	orrs	r2, r1
 800bf34:	b292      	uxth	r2, r2
 800bf36:	801a      	strh	r2, [r3, #0]
 800bf38:	e2b4      	b.n	800c4a4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	18d3      	adds	r3, r2, r3
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	b29a      	uxth	r2, r3
 800bf48:	200e      	movs	r0, #14
 800bf4a:	183b      	adds	r3, r7, r0
 800bf4c:	493c      	ldr	r1, [pc, #240]	; (800c040 <USB_ActivateEndpoint+0x2c4>)
 800bf4e:	400a      	ands	r2, r1
 800bf50:	801a      	strh	r2, [r3, #0]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	18d3      	adds	r3, r2, r3
 800bf5c:	183a      	adds	r2, r7, r0
 800bf5e:	8812      	ldrh	r2, [r2, #0]
 800bf60:	4934      	ldr	r1, [pc, #208]	; (800c034 <USB_ActivateEndpoint+0x2b8>)
 800bf62:	430a      	orrs	r2, r1
 800bf64:	b292      	uxth	r2, r2
 800bf66:	801a      	strh	r2, [r3, #0]
 800bf68:	e29c      	b.n	800c4a4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2250      	movs	r2, #80	; 0x50
 800bf72:	5a9b      	ldrh	r3, [r3, r2]
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	001a      	movs	r2, r3
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	189b      	adds	r3, r3, r2
 800bf7c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	00da      	lsls	r2, r3, #3
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	18d3      	adds	r3, r2, r3
 800bf88:	4a2e      	ldr	r2, [pc, #184]	; (800c044 <USB_ActivateEndpoint+0x2c8>)
 800bf8a:	4694      	mov	ip, r2
 800bf8c:	4463      	add	r3, ip
 800bf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	88db      	ldrh	r3, [r3, #6]
 800bf94:	085b      	lsrs	r3, r3, #1
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	18db      	adds	r3, r3, r3
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2250      	movs	r2, #80	; 0x50
 800bfa8:	5a9b      	ldrh	r3, [r3, r2]
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	001a      	movs	r2, r3
 800bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb0:	189b      	adds	r3, r3, r2
 800bfb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	00da      	lsls	r2, r3, #3
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	18d3      	adds	r3, r2, r3
 800bfbe:	4a22      	ldr	r2, [pc, #136]	; (800c048 <USB_ActivateEndpoint+0x2cc>)
 800bfc0:	4694      	mov	ip, r2
 800bfc2:	4463      	add	r3, ip
 800bfc4:	627b      	str	r3, [r7, #36]	; 0x24
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	059b      	lsls	r3, r3, #22
 800bfce:	0d9b      	lsrs	r3, r3, #22
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd4:	801a      	strh	r2, [r3, #0]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	2b3e      	cmp	r3, #62	; 0x3e
 800bfdc:	d91a      	bls.n	800c014 <USB_ActivateEndpoint+0x298>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	095b      	lsrs	r3, r3, #5
 800bfe4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	221f      	movs	r2, #31
 800bfec:	4013      	ands	r3, r2
 800bfee:	d102      	bne.n	800bff6 <USB_ActivateEndpoint+0x27a>
 800bff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bff2:	3b01      	subs	r3, #1
 800bff4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff8:	881b      	ldrh	r3, [r3, #0]
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bffe:	b29b      	uxth	r3, r3
 800c000:	029b      	lsls	r3, r3, #10
 800c002:	b29b      	uxth	r3, r3
 800c004:	4313      	orrs	r3, r2
 800c006:	b29b      	uxth	r3, r3
 800c008:	4a10      	ldr	r2, [pc, #64]	; (800c04c <USB_ActivateEndpoint+0x2d0>)
 800c00a:	4313      	orrs	r3, r2
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	801a      	strh	r2, [r3, #0]
 800c012:	e034      	b.n	800c07e <USB_ActivateEndpoint+0x302>
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d119      	bne.n	800c050 <USB_ActivateEndpoint+0x2d4>
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	b29b      	uxth	r3, r3
 800c022:	4a0a      	ldr	r2, [pc, #40]	; (800c04c <USB_ActivateEndpoint+0x2d0>)
 800c024:	4313      	orrs	r3, r2
 800c026:	b29a      	uxth	r2, r3
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	801a      	strh	r2, [r3, #0]
 800c02c:	e027      	b.n	800c07e <USB_ActivateEndpoint+0x302>
 800c02e:	46c0      	nop			; (mov r8, r8)
 800c030:	ffff898f 	.word	0xffff898f
 800c034:	ffff8080 	.word	0xffff8080
 800c038:	ffff8f8f 	.word	0xffff8f8f
 800c03c:	ffff80c0 	.word	0xffff80c0
 800c040:	ffff8fbf 	.word	0xffff8fbf
 800c044:	00000404 	.word	0x00000404
 800c048:	00000406 	.word	0x00000406
 800c04c:	ffff8000 	.word	0xffff8000
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	085b      	lsrs	r3, r3, #1
 800c056:	66bb      	str	r3, [r7, #104]	; 0x68
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	2201      	movs	r2, #1
 800c05e:	4013      	ands	r3, r2
 800c060:	d002      	beq.n	800c068 <USB_ActivateEndpoint+0x2ec>
 800c062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c064:	3301      	adds	r3, #1
 800c066:	66bb      	str	r3, [r7, #104]	; 0x68
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c070:	b29b      	uxth	r3, r3
 800c072:	029b      	lsls	r3, r3, #10
 800c074:	b29b      	uxth	r3, r3
 800c076:	4313      	orrs	r3, r2
 800c078:	b29a      	uxth	r2, r3
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	18d2      	adds	r2, r2, r3
 800c088:	2122      	movs	r1, #34	; 0x22
 800c08a:	187b      	adds	r3, r7, r1
 800c08c:	8812      	ldrh	r2, [r2, #0]
 800c08e:	801a      	strh	r2, [r3, #0]
 800c090:	187b      	adds	r3, r7, r1
 800c092:	881a      	ldrh	r2, [r3, #0]
 800c094:	2380      	movs	r3, #128	; 0x80
 800c096:	01db      	lsls	r3, r3, #7
 800c098:	4013      	ands	r3, r2
 800c09a:	d016      	beq.n	800c0ca <USB_ActivateEndpoint+0x34e>
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	18d3      	adds	r3, r2, r3
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	2020      	movs	r0, #32
 800c0ac:	183b      	adds	r3, r7, r0
 800c0ae:	49dd      	ldr	r1, [pc, #884]	; (800c424 <USB_ActivateEndpoint+0x6a8>)
 800c0b0:	400a      	ands	r2, r1
 800c0b2:	801a      	strh	r2, [r3, #0]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	18d3      	adds	r3, r2, r3
 800c0be:	183a      	adds	r2, r7, r0
 800c0c0:	8812      	ldrh	r2, [r2, #0]
 800c0c2:	49d9      	ldr	r1, [pc, #868]	; (800c428 <USB_ActivateEndpoint+0x6ac>)
 800c0c4:	430a      	orrs	r2, r1
 800c0c6:	b292      	uxth	r2, r2
 800c0c8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d125      	bne.n	800c11e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	18d3      	adds	r3, r2, r3
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	201c      	movs	r0, #28
 800c0e2:	183b      	adds	r3, r7, r0
 800c0e4:	49d1      	ldr	r1, [pc, #836]	; (800c42c <USB_ActivateEndpoint+0x6b0>)
 800c0e6:	400a      	ands	r2, r1
 800c0e8:	801a      	strh	r2, [r3, #0]
 800c0ea:	183b      	adds	r3, r7, r0
 800c0ec:	183a      	adds	r2, r7, r0
 800c0ee:	8812      	ldrh	r2, [r2, #0]
 800c0f0:	2180      	movs	r1, #128	; 0x80
 800c0f2:	0149      	lsls	r1, r1, #5
 800c0f4:	404a      	eors	r2, r1
 800c0f6:	801a      	strh	r2, [r3, #0]
 800c0f8:	183b      	adds	r3, r7, r0
 800c0fa:	183a      	adds	r2, r7, r0
 800c0fc:	8812      	ldrh	r2, [r2, #0]
 800c0fe:	2180      	movs	r1, #128	; 0x80
 800c100:	0189      	lsls	r1, r1, #6
 800c102:	404a      	eors	r2, r1
 800c104:	801a      	strh	r2, [r3, #0]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	18d3      	adds	r3, r2, r3
 800c110:	183a      	adds	r2, r7, r0
 800c112:	8812      	ldrh	r2, [r2, #0]
 800c114:	49c6      	ldr	r1, [pc, #792]	; (800c430 <USB_ActivateEndpoint+0x6b4>)
 800c116:	430a      	orrs	r2, r1
 800c118:	b292      	uxth	r2, r2
 800c11a:	801a      	strh	r2, [r3, #0]
 800c11c:	e1c2      	b.n	800c4a4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	18d3      	adds	r3, r2, r3
 800c128:	881b      	ldrh	r3, [r3, #0]
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	201e      	movs	r0, #30
 800c12e:	183b      	adds	r3, r7, r0
 800c130:	49be      	ldr	r1, [pc, #760]	; (800c42c <USB_ActivateEndpoint+0x6b0>)
 800c132:	400a      	ands	r2, r1
 800c134:	801a      	strh	r2, [r3, #0]
 800c136:	183b      	adds	r3, r7, r0
 800c138:	183a      	adds	r2, r7, r0
 800c13a:	8812      	ldrh	r2, [r2, #0]
 800c13c:	2180      	movs	r1, #128	; 0x80
 800c13e:	0189      	lsls	r1, r1, #6
 800c140:	404a      	eors	r2, r1
 800c142:	801a      	strh	r2, [r3, #0]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	18d3      	adds	r3, r2, r3
 800c14e:	183a      	adds	r2, r7, r0
 800c150:	8812      	ldrh	r2, [r2, #0]
 800c152:	49b7      	ldr	r1, [pc, #732]	; (800c430 <USB_ActivateEndpoint+0x6b4>)
 800c154:	430a      	orrs	r2, r1
 800c156:	b292      	uxth	r2, r2
 800c158:	801a      	strh	r2, [r3, #0]
 800c15a:	e1a3      	b.n	800c4a4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	78db      	ldrb	r3, [r3, #3]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d117      	bne.n	800c194 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	18d3      	adds	r3, r2, r3
 800c16e:	881b      	ldrh	r3, [r3, #0]
 800c170:	b29a      	uxth	r2, r3
 800c172:	2062      	movs	r0, #98	; 0x62
 800c174:	183b      	adds	r3, r7, r0
 800c176:	49ab      	ldr	r1, [pc, #684]	; (800c424 <USB_ActivateEndpoint+0x6a8>)
 800c178:	400a      	ands	r2, r1
 800c17a:	801a      	strh	r2, [r3, #0]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	18d3      	adds	r3, r2, r3
 800c186:	183a      	adds	r2, r7, r0
 800c188:	8812      	ldrh	r2, [r2, #0]
 800c18a:	49aa      	ldr	r1, [pc, #680]	; (800c434 <USB_ActivateEndpoint+0x6b8>)
 800c18c:	430a      	orrs	r2, r1
 800c18e:	b292      	uxth	r2, r2
 800c190:	801a      	strh	r2, [r3, #0]
 800c192:	e016      	b.n	800c1c2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	18d3      	adds	r3, r2, r3
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	2064      	movs	r0, #100	; 0x64
 800c1a4:	183b      	adds	r3, r7, r0
 800c1a6:	49a4      	ldr	r1, [pc, #656]	; (800c438 <USB_ActivateEndpoint+0x6bc>)
 800c1a8:	400a      	ands	r2, r1
 800c1aa:	801a      	strh	r2, [r3, #0]
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	18d3      	adds	r3, r2, r3
 800c1b6:	183a      	adds	r2, r7, r0
 800c1b8:	8812      	ldrh	r2, [r2, #0]
 800c1ba:	499d      	ldr	r1, [pc, #628]	; (800c430 <USB_ActivateEndpoint+0x6b4>)
 800c1bc:	430a      	orrs	r2, r1
 800c1be:	b292      	uxth	r2, r2
 800c1c0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2250      	movs	r2, #80	; 0x50
 800c1ca:	5a9b      	ldrh	r3, [r3, r2]
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	001a      	movs	r2, r3
 800c1d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1d2:	189b      	adds	r3, r3, r2
 800c1d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	00da      	lsls	r2, r3, #3
 800c1dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1de:	18d3      	adds	r3, r2, r3
 800c1e0:	2280      	movs	r2, #128	; 0x80
 800c1e2:	00d2      	lsls	r2, r2, #3
 800c1e4:	4694      	mov	ip, r2
 800c1e6:	4463      	add	r3, ip
 800c1e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	891b      	ldrh	r3, [r3, #8]
 800c1ee:	085b      	lsrs	r3, r3, #1
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	18db      	adds	r3, r3, r3
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1f8:	801a      	strh	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	657b      	str	r3, [r7, #84]	; 0x54
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2250      	movs	r2, #80	; 0x50
 800c202:	5a9b      	ldrh	r3, [r3, r2]
 800c204:	b29b      	uxth	r3, r3
 800c206:	001a      	movs	r2, r3
 800c208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c20a:	189b      	adds	r3, r3, r2
 800c20c:	657b      	str	r3, [r7, #84]	; 0x54
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	00da      	lsls	r2, r3, #3
 800c214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c216:	18d3      	adds	r3, r2, r3
 800c218:	4a88      	ldr	r2, [pc, #544]	; (800c43c <USB_ActivateEndpoint+0x6c0>)
 800c21a:	4694      	mov	ip, r2
 800c21c:	4463      	add	r3, ip
 800c21e:	653b      	str	r3, [r7, #80]	; 0x50
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	895b      	ldrh	r3, [r3, #10]
 800c224:	085b      	lsrs	r3, r3, #1
 800c226:	b29b      	uxth	r3, r3
 800c228:	18db      	adds	r3, r3, r3
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c22e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	785b      	ldrb	r3, [r3, #1]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d000      	beq.n	800c23a <USB_ActivateEndpoint+0x4be>
 800c238:	e087      	b.n	800c34a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	18d2      	adds	r2, r2, r3
 800c244:	2140      	movs	r1, #64	; 0x40
 800c246:	187b      	adds	r3, r7, r1
 800c248:	8812      	ldrh	r2, [r2, #0]
 800c24a:	801a      	strh	r2, [r3, #0]
 800c24c:	187b      	adds	r3, r7, r1
 800c24e:	881a      	ldrh	r2, [r3, #0]
 800c250:	2380      	movs	r3, #128	; 0x80
 800c252:	01db      	lsls	r3, r3, #7
 800c254:	4013      	ands	r3, r2
 800c256:	d016      	beq.n	800c286 <USB_ActivateEndpoint+0x50a>
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	18d3      	adds	r3, r2, r3
 800c262:	881b      	ldrh	r3, [r3, #0]
 800c264:	b29a      	uxth	r2, r3
 800c266:	203e      	movs	r0, #62	; 0x3e
 800c268:	183b      	adds	r3, r7, r0
 800c26a:	496e      	ldr	r1, [pc, #440]	; (800c424 <USB_ActivateEndpoint+0x6a8>)
 800c26c:	400a      	ands	r2, r1
 800c26e:	801a      	strh	r2, [r3, #0]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	18d3      	adds	r3, r2, r3
 800c27a:	183a      	adds	r2, r7, r0
 800c27c:	8812      	ldrh	r2, [r2, #0]
 800c27e:	496a      	ldr	r1, [pc, #424]	; (800c428 <USB_ActivateEndpoint+0x6ac>)
 800c280:	430a      	orrs	r2, r1
 800c282:	b292      	uxth	r2, r2
 800c284:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	18d2      	adds	r2, r2, r3
 800c290:	213c      	movs	r1, #60	; 0x3c
 800c292:	187b      	adds	r3, r7, r1
 800c294:	8812      	ldrh	r2, [r2, #0]
 800c296:	801a      	strh	r2, [r3, #0]
 800c298:	187b      	adds	r3, r7, r1
 800c29a:	881b      	ldrh	r3, [r3, #0]
 800c29c:	2240      	movs	r2, #64	; 0x40
 800c29e:	4013      	ands	r3, r2
 800c2a0:	d016      	beq.n	800c2d0 <USB_ActivateEndpoint+0x554>
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	18d3      	adds	r3, r2, r3
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	203a      	movs	r0, #58	; 0x3a
 800c2b2:	183b      	adds	r3, r7, r0
 800c2b4:	495b      	ldr	r1, [pc, #364]	; (800c424 <USB_ActivateEndpoint+0x6a8>)
 800c2b6:	400a      	ands	r2, r1
 800c2b8:	801a      	strh	r2, [r3, #0]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	18d3      	adds	r3, r2, r3
 800c2c4:	183a      	adds	r2, r7, r0
 800c2c6:	8812      	ldrh	r2, [r2, #0]
 800c2c8:	495d      	ldr	r1, [pc, #372]	; (800c440 <USB_ActivateEndpoint+0x6c4>)
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	b292      	uxth	r2, r2
 800c2ce:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	18d3      	adds	r3, r2, r3
 800c2da:	881b      	ldrh	r3, [r3, #0]
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	2038      	movs	r0, #56	; 0x38
 800c2e0:	183b      	adds	r3, r7, r0
 800c2e2:	4952      	ldr	r1, [pc, #328]	; (800c42c <USB_ActivateEndpoint+0x6b0>)
 800c2e4:	400a      	ands	r2, r1
 800c2e6:	801a      	strh	r2, [r3, #0]
 800c2e8:	183b      	adds	r3, r7, r0
 800c2ea:	183a      	adds	r2, r7, r0
 800c2ec:	8812      	ldrh	r2, [r2, #0]
 800c2ee:	2180      	movs	r1, #128	; 0x80
 800c2f0:	0149      	lsls	r1, r1, #5
 800c2f2:	404a      	eors	r2, r1
 800c2f4:	801a      	strh	r2, [r3, #0]
 800c2f6:	183b      	adds	r3, r7, r0
 800c2f8:	183a      	adds	r2, r7, r0
 800c2fa:	8812      	ldrh	r2, [r2, #0]
 800c2fc:	2180      	movs	r1, #128	; 0x80
 800c2fe:	0189      	lsls	r1, r1, #6
 800c300:	404a      	eors	r2, r1
 800c302:	801a      	strh	r2, [r3, #0]
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	18d3      	adds	r3, r2, r3
 800c30e:	183a      	adds	r2, r7, r0
 800c310:	8812      	ldrh	r2, [r2, #0]
 800c312:	4947      	ldr	r1, [pc, #284]	; (800c430 <USB_ActivateEndpoint+0x6b4>)
 800c314:	430a      	orrs	r2, r1
 800c316:	b292      	uxth	r2, r2
 800c318:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	18d3      	adds	r3, r2, r3
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	b29a      	uxth	r2, r3
 800c328:	2036      	movs	r0, #54	; 0x36
 800c32a:	183b      	adds	r3, r7, r0
 800c32c:	4945      	ldr	r1, [pc, #276]	; (800c444 <USB_ActivateEndpoint+0x6c8>)
 800c32e:	400a      	ands	r2, r1
 800c330:	801a      	strh	r2, [r3, #0]
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	18d3      	adds	r3, r2, r3
 800c33c:	183a      	adds	r2, r7, r0
 800c33e:	8812      	ldrh	r2, [r2, #0]
 800c340:	493b      	ldr	r1, [pc, #236]	; (800c430 <USB_ActivateEndpoint+0x6b4>)
 800c342:	430a      	orrs	r2, r1
 800c344:	b292      	uxth	r2, r2
 800c346:	801a      	strh	r2, [r3, #0]
 800c348:	e0ac      	b.n	800c4a4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	18d2      	adds	r2, r2, r3
 800c354:	214e      	movs	r1, #78	; 0x4e
 800c356:	187b      	adds	r3, r7, r1
 800c358:	8812      	ldrh	r2, [r2, #0]
 800c35a:	801a      	strh	r2, [r3, #0]
 800c35c:	187b      	adds	r3, r7, r1
 800c35e:	881a      	ldrh	r2, [r3, #0]
 800c360:	2380      	movs	r3, #128	; 0x80
 800c362:	01db      	lsls	r3, r3, #7
 800c364:	4013      	ands	r3, r2
 800c366:	d016      	beq.n	800c396 <USB_ActivateEndpoint+0x61a>
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	18d3      	adds	r3, r2, r3
 800c372:	881b      	ldrh	r3, [r3, #0]
 800c374:	b29a      	uxth	r2, r3
 800c376:	204c      	movs	r0, #76	; 0x4c
 800c378:	183b      	adds	r3, r7, r0
 800c37a:	492a      	ldr	r1, [pc, #168]	; (800c424 <USB_ActivateEndpoint+0x6a8>)
 800c37c:	400a      	ands	r2, r1
 800c37e:	801a      	strh	r2, [r3, #0]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	18d3      	adds	r3, r2, r3
 800c38a:	183a      	adds	r2, r7, r0
 800c38c:	8812      	ldrh	r2, [r2, #0]
 800c38e:	4926      	ldr	r1, [pc, #152]	; (800c428 <USB_ActivateEndpoint+0x6ac>)
 800c390:	430a      	orrs	r2, r1
 800c392:	b292      	uxth	r2, r2
 800c394:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	18d2      	adds	r2, r2, r3
 800c3a0:	214a      	movs	r1, #74	; 0x4a
 800c3a2:	187b      	adds	r3, r7, r1
 800c3a4:	8812      	ldrh	r2, [r2, #0]
 800c3a6:	801a      	strh	r2, [r3, #0]
 800c3a8:	187b      	adds	r3, r7, r1
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	2240      	movs	r2, #64	; 0x40
 800c3ae:	4013      	ands	r3, r2
 800c3b0:	d016      	beq.n	800c3e0 <USB_ActivateEndpoint+0x664>
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	18d3      	adds	r3, r2, r3
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	2048      	movs	r0, #72	; 0x48
 800c3c2:	183b      	adds	r3, r7, r0
 800c3c4:	4917      	ldr	r1, [pc, #92]	; (800c424 <USB_ActivateEndpoint+0x6a8>)
 800c3c6:	400a      	ands	r2, r1
 800c3c8:	801a      	strh	r2, [r3, #0]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	18d3      	adds	r3, r2, r3
 800c3d4:	183a      	adds	r2, r7, r0
 800c3d6:	8812      	ldrh	r2, [r2, #0]
 800c3d8:	4919      	ldr	r1, [pc, #100]	; (800c440 <USB_ActivateEndpoint+0x6c4>)
 800c3da:	430a      	orrs	r2, r1
 800c3dc:	b292      	uxth	r2, r2
 800c3de:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	78db      	ldrb	r3, [r3, #3]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d02f      	beq.n	800c448 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	18d3      	adds	r3, r2, r3
 800c3f2:	881b      	ldrh	r3, [r3, #0]
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	2044      	movs	r0, #68	; 0x44
 800c3f8:	183b      	adds	r3, r7, r0
 800c3fa:	4912      	ldr	r1, [pc, #72]	; (800c444 <USB_ActivateEndpoint+0x6c8>)
 800c3fc:	400a      	ands	r2, r1
 800c3fe:	801a      	strh	r2, [r3, #0]
 800c400:	183b      	adds	r3, r7, r0
 800c402:	183a      	adds	r2, r7, r0
 800c404:	8812      	ldrh	r2, [r2, #0]
 800c406:	2120      	movs	r1, #32
 800c408:	404a      	eors	r2, r1
 800c40a:	801a      	strh	r2, [r3, #0]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	18d3      	adds	r3, r2, r3
 800c416:	183a      	adds	r2, r7, r0
 800c418:	8812      	ldrh	r2, [r2, #0]
 800c41a:	4905      	ldr	r1, [pc, #20]	; (800c430 <USB_ActivateEndpoint+0x6b4>)
 800c41c:	430a      	orrs	r2, r1
 800c41e:	b292      	uxth	r2, r2
 800c420:	801a      	strh	r2, [r3, #0]
 800c422:	e028      	b.n	800c476 <USB_ActivateEndpoint+0x6fa>
 800c424:	ffff8f8f 	.word	0xffff8f8f
 800c428:	ffffc080 	.word	0xffffc080
 800c42c:	ffffbf8f 	.word	0xffffbf8f
 800c430:	ffff8080 	.word	0xffff8080
 800c434:	ffff8180 	.word	0xffff8180
 800c438:	ffff8e8f 	.word	0xffff8e8f
 800c43c:	00000404 	.word	0x00000404
 800c440:	ffff80c0 	.word	0xffff80c0
 800c444:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	18d3      	adds	r3, r2, r3
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	b29a      	uxth	r2, r3
 800c456:	2046      	movs	r0, #70	; 0x46
 800c458:	183b      	adds	r3, r7, r0
 800c45a:	4916      	ldr	r1, [pc, #88]	; (800c4b4 <USB_ActivateEndpoint+0x738>)
 800c45c:	400a      	ands	r2, r1
 800c45e:	801a      	strh	r2, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	18d3      	adds	r3, r2, r3
 800c46a:	183a      	adds	r2, r7, r0
 800c46c:	8812      	ldrh	r2, [r2, #0]
 800c46e:	4912      	ldr	r1, [pc, #72]	; (800c4b8 <USB_ActivateEndpoint+0x73c>)
 800c470:	430a      	orrs	r2, r1
 800c472:	b292      	uxth	r2, r2
 800c474:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	18d3      	adds	r3, r2, r3
 800c480:	881b      	ldrh	r3, [r3, #0]
 800c482:	b29a      	uxth	r2, r3
 800c484:	2042      	movs	r0, #66	; 0x42
 800c486:	183b      	adds	r3, r7, r0
 800c488:	490c      	ldr	r1, [pc, #48]	; (800c4bc <USB_ActivateEndpoint+0x740>)
 800c48a:	400a      	ands	r2, r1
 800c48c:	801a      	strh	r2, [r3, #0]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	18d3      	adds	r3, r2, r3
 800c498:	183a      	adds	r2, r7, r0
 800c49a:	8812      	ldrh	r2, [r2, #0]
 800c49c:	4906      	ldr	r1, [pc, #24]	; (800c4b8 <USB_ActivateEndpoint+0x73c>)
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	b292      	uxth	r2, r2
 800c4a2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c4a4:	236f      	movs	r3, #111	; 0x6f
 800c4a6:	18fb      	adds	r3, r7, r3
 800c4a8:	781b      	ldrb	r3, [r3, #0]
}
 800c4aa:	0018      	movs	r0, r3
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	b01c      	add	sp, #112	; 0x70
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	46c0      	nop			; (mov r8, r8)
 800c4b4:	ffff8fbf 	.word	0xffff8fbf
 800c4b8:	ffff8080 	.word	0xffff8080
 800c4bc:	ffffbf8f 	.word	0xffffbf8f

0800c4c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08c      	sub	sp, #48	; 0x30
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	7b1b      	ldrb	r3, [r3, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d000      	beq.n	800c4d4 <USB_DeactivateEndpoint+0x14>
 800c4d2:	e07e      	b.n	800c5d2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	785b      	ldrb	r3, [r3, #1]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d03c      	beq.n	800c556 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	18d2      	adds	r2, r2, r3
 800c4e6:	210c      	movs	r1, #12
 800c4e8:	187b      	adds	r3, r7, r1
 800c4ea:	8812      	ldrh	r2, [r2, #0]
 800c4ec:	801a      	strh	r2, [r3, #0]
 800c4ee:	187b      	adds	r3, r7, r1
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	2240      	movs	r2, #64	; 0x40
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	d016      	beq.n	800c526 <USB_DeactivateEndpoint+0x66>
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	18d3      	adds	r3, r2, r3
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	b29a      	uxth	r2, r3
 800c506:	200a      	movs	r0, #10
 800c508:	183b      	adds	r3, r7, r0
 800c50a:	49c7      	ldr	r1, [pc, #796]	; (800c828 <USB_DeactivateEndpoint+0x368>)
 800c50c:	400a      	ands	r2, r1
 800c50e:	801a      	strh	r2, [r3, #0]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	18d3      	adds	r3, r2, r3
 800c51a:	183a      	adds	r2, r7, r0
 800c51c:	8812      	ldrh	r2, [r2, #0]
 800c51e:	49c3      	ldr	r1, [pc, #780]	; (800c82c <USB_DeactivateEndpoint+0x36c>)
 800c520:	430a      	orrs	r2, r1
 800c522:	b292      	uxth	r2, r2
 800c524:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	18d3      	adds	r3, r2, r3
 800c530:	881b      	ldrh	r3, [r3, #0]
 800c532:	b29a      	uxth	r2, r3
 800c534:	2008      	movs	r0, #8
 800c536:	183b      	adds	r3, r7, r0
 800c538:	49bd      	ldr	r1, [pc, #756]	; (800c830 <USB_DeactivateEndpoint+0x370>)
 800c53a:	400a      	ands	r2, r1
 800c53c:	801a      	strh	r2, [r3, #0]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	18d3      	adds	r3, r2, r3
 800c548:	183a      	adds	r2, r7, r0
 800c54a:	8812      	ldrh	r2, [r2, #0]
 800c54c:	49b9      	ldr	r1, [pc, #740]	; (800c834 <USB_DeactivateEndpoint+0x374>)
 800c54e:	430a      	orrs	r2, r1
 800c550:	b292      	uxth	r2, r2
 800c552:	801a      	strh	r2, [r3, #0]
 800c554:	e163      	b.n	800c81e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	18d2      	adds	r2, r2, r3
 800c560:	2112      	movs	r1, #18
 800c562:	187b      	adds	r3, r7, r1
 800c564:	8812      	ldrh	r2, [r2, #0]
 800c566:	801a      	strh	r2, [r3, #0]
 800c568:	187b      	adds	r3, r7, r1
 800c56a:	881a      	ldrh	r2, [r3, #0]
 800c56c:	2380      	movs	r3, #128	; 0x80
 800c56e:	01db      	lsls	r3, r3, #7
 800c570:	4013      	ands	r3, r2
 800c572:	d016      	beq.n	800c5a2 <USB_DeactivateEndpoint+0xe2>
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	18d3      	adds	r3, r2, r3
 800c57e:	881b      	ldrh	r3, [r3, #0]
 800c580:	b29a      	uxth	r2, r3
 800c582:	2010      	movs	r0, #16
 800c584:	183b      	adds	r3, r7, r0
 800c586:	49a8      	ldr	r1, [pc, #672]	; (800c828 <USB_DeactivateEndpoint+0x368>)
 800c588:	400a      	ands	r2, r1
 800c58a:	801a      	strh	r2, [r3, #0]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	18d3      	adds	r3, r2, r3
 800c596:	183a      	adds	r2, r7, r0
 800c598:	8812      	ldrh	r2, [r2, #0]
 800c59a:	49a7      	ldr	r1, [pc, #668]	; (800c838 <USB_DeactivateEndpoint+0x378>)
 800c59c:	430a      	orrs	r2, r1
 800c59e:	b292      	uxth	r2, r2
 800c5a0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	18d3      	adds	r3, r2, r3
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	200e      	movs	r0, #14
 800c5b2:	183b      	adds	r3, r7, r0
 800c5b4:	49a1      	ldr	r1, [pc, #644]	; (800c83c <USB_DeactivateEndpoint+0x37c>)
 800c5b6:	400a      	ands	r2, r1
 800c5b8:	801a      	strh	r2, [r3, #0]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	18d3      	adds	r3, r2, r3
 800c5c4:	183a      	adds	r2, r7, r0
 800c5c6:	8812      	ldrh	r2, [r2, #0]
 800c5c8:	499a      	ldr	r1, [pc, #616]	; (800c834 <USB_DeactivateEndpoint+0x374>)
 800c5ca:	430a      	orrs	r2, r1
 800c5cc:	b292      	uxth	r2, r2
 800c5ce:	801a      	strh	r2, [r3, #0]
 800c5d0:	e125      	b.n	800c81e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d000      	beq.n	800c5dc <USB_DeactivateEndpoint+0x11c>
 800c5da:	e090      	b.n	800c6fe <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	18d2      	adds	r2, r2, r3
 800c5e6:	2120      	movs	r1, #32
 800c5e8:	187b      	adds	r3, r7, r1
 800c5ea:	8812      	ldrh	r2, [r2, #0]
 800c5ec:	801a      	strh	r2, [r3, #0]
 800c5ee:	187b      	adds	r3, r7, r1
 800c5f0:	881a      	ldrh	r2, [r3, #0]
 800c5f2:	2380      	movs	r3, #128	; 0x80
 800c5f4:	01db      	lsls	r3, r3, #7
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	d016      	beq.n	800c628 <USB_DeactivateEndpoint+0x168>
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	18d3      	adds	r3, r2, r3
 800c604:	881b      	ldrh	r3, [r3, #0]
 800c606:	b29a      	uxth	r2, r3
 800c608:	201e      	movs	r0, #30
 800c60a:	183b      	adds	r3, r7, r0
 800c60c:	4986      	ldr	r1, [pc, #536]	; (800c828 <USB_DeactivateEndpoint+0x368>)
 800c60e:	400a      	ands	r2, r1
 800c610:	801a      	strh	r2, [r3, #0]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	18d3      	adds	r3, r2, r3
 800c61c:	183a      	adds	r2, r7, r0
 800c61e:	8812      	ldrh	r2, [r2, #0]
 800c620:	4985      	ldr	r1, [pc, #532]	; (800c838 <USB_DeactivateEndpoint+0x378>)
 800c622:	430a      	orrs	r2, r1
 800c624:	b292      	uxth	r2, r2
 800c626:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	18d2      	adds	r2, r2, r3
 800c632:	211c      	movs	r1, #28
 800c634:	187b      	adds	r3, r7, r1
 800c636:	8812      	ldrh	r2, [r2, #0]
 800c638:	801a      	strh	r2, [r3, #0]
 800c63a:	187b      	adds	r3, r7, r1
 800c63c:	881b      	ldrh	r3, [r3, #0]
 800c63e:	2240      	movs	r2, #64	; 0x40
 800c640:	4013      	ands	r3, r2
 800c642:	d016      	beq.n	800c672 <USB_DeactivateEndpoint+0x1b2>
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	18d3      	adds	r3, r2, r3
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	b29a      	uxth	r2, r3
 800c652:	201a      	movs	r0, #26
 800c654:	183b      	adds	r3, r7, r0
 800c656:	4974      	ldr	r1, [pc, #464]	; (800c828 <USB_DeactivateEndpoint+0x368>)
 800c658:	400a      	ands	r2, r1
 800c65a:	801a      	strh	r2, [r3, #0]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	18d3      	adds	r3, r2, r3
 800c666:	183a      	adds	r2, r7, r0
 800c668:	8812      	ldrh	r2, [r2, #0]
 800c66a:	4970      	ldr	r1, [pc, #448]	; (800c82c <USB_DeactivateEndpoint+0x36c>)
 800c66c:	430a      	orrs	r2, r1
 800c66e:	b292      	uxth	r2, r2
 800c670:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	18d3      	adds	r3, r2, r3
 800c67c:	881b      	ldrh	r3, [r3, #0]
 800c67e:	b29a      	uxth	r2, r3
 800c680:	2018      	movs	r0, #24
 800c682:	183b      	adds	r3, r7, r0
 800c684:	4968      	ldr	r1, [pc, #416]	; (800c828 <USB_DeactivateEndpoint+0x368>)
 800c686:	400a      	ands	r2, r1
 800c688:	801a      	strh	r2, [r3, #0]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	18d3      	adds	r3, r2, r3
 800c694:	183a      	adds	r2, r7, r0
 800c696:	8812      	ldrh	r2, [r2, #0]
 800c698:	4964      	ldr	r1, [pc, #400]	; (800c82c <USB_DeactivateEndpoint+0x36c>)
 800c69a:	430a      	orrs	r2, r1
 800c69c:	b292      	uxth	r2, r2
 800c69e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	18d3      	adds	r3, r2, r3
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	2016      	movs	r0, #22
 800c6b0:	183b      	adds	r3, r7, r0
 800c6b2:	4962      	ldr	r1, [pc, #392]	; (800c83c <USB_DeactivateEndpoint+0x37c>)
 800c6b4:	400a      	ands	r2, r1
 800c6b6:	801a      	strh	r2, [r3, #0]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	18d3      	adds	r3, r2, r3
 800c6c2:	183a      	adds	r2, r7, r0
 800c6c4:	8812      	ldrh	r2, [r2, #0]
 800c6c6:	495b      	ldr	r1, [pc, #364]	; (800c834 <USB_DeactivateEndpoint+0x374>)
 800c6c8:	430a      	orrs	r2, r1
 800c6ca:	b292      	uxth	r2, r2
 800c6cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	18d3      	adds	r3, r2, r3
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	2014      	movs	r0, #20
 800c6de:	183b      	adds	r3, r7, r0
 800c6e0:	4953      	ldr	r1, [pc, #332]	; (800c830 <USB_DeactivateEndpoint+0x370>)
 800c6e2:	400a      	ands	r2, r1
 800c6e4:	801a      	strh	r2, [r3, #0]
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	18d3      	adds	r3, r2, r3
 800c6f0:	183a      	adds	r2, r7, r0
 800c6f2:	8812      	ldrh	r2, [r2, #0]
 800c6f4:	494f      	ldr	r1, [pc, #316]	; (800c834 <USB_DeactivateEndpoint+0x374>)
 800c6f6:	430a      	orrs	r2, r1
 800c6f8:	b292      	uxth	r2, r2
 800c6fa:	801a      	strh	r2, [r3, #0]
 800c6fc:	e08f      	b.n	800c81e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	18d2      	adds	r2, r2, r3
 800c708:	212e      	movs	r1, #46	; 0x2e
 800c70a:	187b      	adds	r3, r7, r1
 800c70c:	8812      	ldrh	r2, [r2, #0]
 800c70e:	801a      	strh	r2, [r3, #0]
 800c710:	187b      	adds	r3, r7, r1
 800c712:	881a      	ldrh	r2, [r3, #0]
 800c714:	2380      	movs	r3, #128	; 0x80
 800c716:	01db      	lsls	r3, r3, #7
 800c718:	4013      	ands	r3, r2
 800c71a:	d016      	beq.n	800c74a <USB_DeactivateEndpoint+0x28a>
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	18d3      	adds	r3, r2, r3
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	b29a      	uxth	r2, r3
 800c72a:	202c      	movs	r0, #44	; 0x2c
 800c72c:	183b      	adds	r3, r7, r0
 800c72e:	493e      	ldr	r1, [pc, #248]	; (800c828 <USB_DeactivateEndpoint+0x368>)
 800c730:	400a      	ands	r2, r1
 800c732:	801a      	strh	r2, [r3, #0]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	18d3      	adds	r3, r2, r3
 800c73e:	183a      	adds	r2, r7, r0
 800c740:	8812      	ldrh	r2, [r2, #0]
 800c742:	493d      	ldr	r1, [pc, #244]	; (800c838 <USB_DeactivateEndpoint+0x378>)
 800c744:	430a      	orrs	r2, r1
 800c746:	b292      	uxth	r2, r2
 800c748:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	18d2      	adds	r2, r2, r3
 800c754:	212a      	movs	r1, #42	; 0x2a
 800c756:	187b      	adds	r3, r7, r1
 800c758:	8812      	ldrh	r2, [r2, #0]
 800c75a:	801a      	strh	r2, [r3, #0]
 800c75c:	187b      	adds	r3, r7, r1
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	2240      	movs	r2, #64	; 0x40
 800c762:	4013      	ands	r3, r2
 800c764:	d016      	beq.n	800c794 <USB_DeactivateEndpoint+0x2d4>
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	18d3      	adds	r3, r2, r3
 800c770:	881b      	ldrh	r3, [r3, #0]
 800c772:	b29a      	uxth	r2, r3
 800c774:	2028      	movs	r0, #40	; 0x28
 800c776:	183b      	adds	r3, r7, r0
 800c778:	492b      	ldr	r1, [pc, #172]	; (800c828 <USB_DeactivateEndpoint+0x368>)
 800c77a:	400a      	ands	r2, r1
 800c77c:	801a      	strh	r2, [r3, #0]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	18d3      	adds	r3, r2, r3
 800c788:	183a      	adds	r2, r7, r0
 800c78a:	8812      	ldrh	r2, [r2, #0]
 800c78c:	4927      	ldr	r1, [pc, #156]	; (800c82c <USB_DeactivateEndpoint+0x36c>)
 800c78e:	430a      	orrs	r2, r1
 800c790:	b292      	uxth	r2, r2
 800c792:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	18d3      	adds	r3, r2, r3
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	2026      	movs	r0, #38	; 0x26
 800c7a4:	183b      	adds	r3, r7, r0
 800c7a6:	4920      	ldr	r1, [pc, #128]	; (800c828 <USB_DeactivateEndpoint+0x368>)
 800c7a8:	400a      	ands	r2, r1
 800c7aa:	801a      	strh	r2, [r3, #0]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	18d3      	adds	r3, r2, r3
 800c7b6:	183a      	adds	r2, r7, r0
 800c7b8:	8812      	ldrh	r2, [r2, #0]
 800c7ba:	491f      	ldr	r1, [pc, #124]	; (800c838 <USB_DeactivateEndpoint+0x378>)
 800c7bc:	430a      	orrs	r2, r1
 800c7be:	b292      	uxth	r2, r2
 800c7c0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	18d3      	adds	r3, r2, r3
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	2024      	movs	r0, #36	; 0x24
 800c7d2:	183b      	adds	r3, r7, r0
 800c7d4:	4916      	ldr	r1, [pc, #88]	; (800c830 <USB_DeactivateEndpoint+0x370>)
 800c7d6:	400a      	ands	r2, r1
 800c7d8:	801a      	strh	r2, [r3, #0]
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	18d3      	adds	r3, r2, r3
 800c7e4:	183a      	adds	r2, r7, r0
 800c7e6:	8812      	ldrh	r2, [r2, #0]
 800c7e8:	4912      	ldr	r1, [pc, #72]	; (800c834 <USB_DeactivateEndpoint+0x374>)
 800c7ea:	430a      	orrs	r2, r1
 800c7ec:	b292      	uxth	r2, r2
 800c7ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	18d3      	adds	r3, r2, r3
 800c7fa:	881b      	ldrh	r3, [r3, #0]
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	2022      	movs	r0, #34	; 0x22
 800c800:	183b      	adds	r3, r7, r0
 800c802:	490e      	ldr	r1, [pc, #56]	; (800c83c <USB_DeactivateEndpoint+0x37c>)
 800c804:	400a      	ands	r2, r1
 800c806:	801a      	strh	r2, [r3, #0]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	18d3      	adds	r3, r2, r3
 800c812:	183a      	adds	r2, r7, r0
 800c814:	8812      	ldrh	r2, [r2, #0]
 800c816:	4907      	ldr	r1, [pc, #28]	; (800c834 <USB_DeactivateEndpoint+0x374>)
 800c818:	430a      	orrs	r2, r1
 800c81a:	b292      	uxth	r2, r2
 800c81c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	0018      	movs	r0, r3
 800c822:	46bd      	mov	sp, r7
 800c824:	b00c      	add	sp, #48	; 0x30
 800c826:	bd80      	pop	{r7, pc}
 800c828:	ffff8f8f 	.word	0xffff8f8f
 800c82c:	ffff80c0 	.word	0xffff80c0
 800c830:	ffff8fbf 	.word	0xffff8fbf
 800c834:	ffff8080 	.word	0xffff8080
 800c838:	ffffc080 	.word	0xffffc080
 800c83c:	ffffbf8f 	.word	0xffffbf8f

0800c840 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c840:	b590      	push	{r4, r7, lr}
 800c842:	b0c3      	sub	sp, #268	; 0x10c
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	785b      	ldrb	r3, [r3, #1]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d001      	beq.n	800c856 <USB_EPStartXfer+0x16>
 800c852:	f000 fd2d 	bl	800d2b0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	699a      	ldr	r2, [r3, #24]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d905      	bls.n	800c86e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	1d7a      	adds	r2, r7, #5
 800c868:	32ff      	adds	r2, #255	; 0xff
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	e004      	b.n	800c878 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	1d7a      	adds	r2, r7, #5
 800c874:	32ff      	adds	r2, #255	; 0xff
 800c876:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	7b1b      	ldrb	r3, [r3, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d125      	bne.n	800c8cc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	6959      	ldr	r1, [r3, #20]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	88da      	ldrh	r2, [r3, #6]
 800c888:	1d7b      	adds	r3, r7, #5
 800c88a:	33ff      	adds	r3, #255	; 0xff
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	b29b      	uxth	r3, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f001 fa47 	bl	800dd24 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	613b      	str	r3, [r7, #16]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2250      	movs	r2, #80	; 0x50
 800c89e:	5a9b      	ldrh	r3, [r3, r2]
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	001a      	movs	r2, r3
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	189b      	adds	r3, r3, r2
 800c8a8:	613b      	str	r3, [r7, #16]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	00da      	lsls	r2, r3, #3
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	18d3      	adds	r3, r2, r3
 800c8b4:	4ad7      	ldr	r2, [pc, #860]	; (800cc14 <USB_EPStartXfer+0x3d4>)
 800c8b6:	4694      	mov	ip, r2
 800c8b8:	4463      	add	r3, ip
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	1d7b      	adds	r3, r7, #5
 800c8be:	33ff      	adds	r3, #255	; 0xff
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	801a      	strh	r2, [r3, #0]
 800c8c8:	f000 fccd 	bl	800d266 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	78db      	ldrb	r3, [r3, #3]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d000      	beq.n	800c8d6 <USB_EPStartXfer+0x96>
 800c8d4:	e362      	b.n	800cf9c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	6a1a      	ldr	r2, [r3, #32]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d800      	bhi.n	800c8e4 <USB_EPStartXfer+0xa4>
 800c8e2:	e309      	b.n	800cef8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	18d3      	adds	r3, r2, r3
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	2056      	movs	r0, #86	; 0x56
 800c8f4:	183b      	adds	r3, r7, r0
 800c8f6:	49c8      	ldr	r1, [pc, #800]	; (800cc18 <USB_EPStartXfer+0x3d8>)
 800c8f8:	400a      	ands	r2, r1
 800c8fa:	801a      	strh	r2, [r3, #0]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	18d3      	adds	r3, r2, r3
 800c906:	183a      	adds	r2, r7, r0
 800c908:	8812      	ldrh	r2, [r2, #0]
 800c90a:	49c4      	ldr	r1, [pc, #784]	; (800cc1c <USB_EPStartXfer+0x3dc>)
 800c90c:	430a      	orrs	r2, r1
 800c90e:	b292      	uxth	r2, r2
 800c910:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	6a1a      	ldr	r2, [r3, #32]
 800c916:	1d7b      	adds	r3, r7, #5
 800c918:	33ff      	adds	r3, #255	; 0xff
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	1ad2      	subs	r2, r2, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	18d3      	adds	r3, r2, r3
 800c92c:	881b      	ldrh	r3, [r3, #0]
 800c92e:	b29b      	uxth	r3, r3
 800c930:	001a      	movs	r2, r3
 800c932:	2340      	movs	r3, #64	; 0x40
 800c934:	4013      	ands	r3, r2
 800c936:	d100      	bne.n	800c93a <USB_EPStartXfer+0xfa>
 800c938:	e176      	b.n	800cc28 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	633b      	str	r3, [r7, #48]	; 0x30
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	785b      	ldrb	r3, [r3, #1]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d000      	beq.n	800c948 <USB_EPStartXfer+0x108>
 800c946:	e074      	b.n	800ca32 <USB_EPStartXfer+0x1f2>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2250      	movs	r2, #80	; 0x50
 800c950:	5a9b      	ldrh	r3, [r3, r2]
 800c952:	b29b      	uxth	r3, r3
 800c954:	001a      	movs	r2, r3
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	189b      	adds	r3, r3, r2
 800c95a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	00da      	lsls	r2, r3, #3
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	18d3      	adds	r3, r2, r3
 800c966:	4aae      	ldr	r2, [pc, #696]	; (800cc20 <USB_EPStartXfer+0x3e0>)
 800c968:	4694      	mov	ip, r2
 800c96a:	4463      	add	r3, ip
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	b29b      	uxth	r3, r3
 800c974:	059b      	lsls	r3, r3, #22
 800c976:	0d9b      	lsrs	r3, r3, #22
 800c978:	b29a      	uxth	r2, r3
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	801a      	strh	r2, [r3, #0]
 800c97e:	1d7b      	adds	r3, r7, #5
 800c980:	33ff      	adds	r3, #255	; 0xff
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b3e      	cmp	r3, #62	; 0x3e
 800c986:	d924      	bls.n	800c9d2 <USB_EPStartXfer+0x192>
 800c988:	1d7b      	adds	r3, r7, #5
 800c98a:	33ff      	adds	r3, #255	; 0xff
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	095b      	lsrs	r3, r3, #5
 800c990:	1c7a      	adds	r2, r7, #1
 800c992:	32ff      	adds	r2, #255	; 0xff
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	1d7b      	adds	r3, r7, #5
 800c998:	33ff      	adds	r3, #255	; 0xff
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	221f      	movs	r2, #31
 800c99e:	4013      	ands	r3, r2
 800c9a0:	d106      	bne.n	800c9b0 <USB_EPStartXfer+0x170>
 800c9a2:	1c7b      	adds	r3, r7, #1
 800c9a4:	33ff      	adds	r3, #255	; 0xff
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	1c7a      	adds	r2, r7, #1
 800c9ac:	32ff      	adds	r2, #255	; 0xff
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	881b      	ldrh	r3, [r3, #0]
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	1c7b      	adds	r3, r7, #1
 800c9b8:	33ff      	adds	r3, #255	; 0xff
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	029b      	lsls	r3, r3, #10
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	4a97      	ldr	r2, [pc, #604]	; (800cc24 <USB_EPStartXfer+0x3e4>)
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	801a      	strh	r2, [r3, #0]
 800c9d0:	e04a      	b.n	800ca68 <USB_EPStartXfer+0x228>
 800c9d2:	1d7b      	adds	r3, r7, #5
 800c9d4:	33ff      	adds	r3, #255	; 0xff
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d108      	bne.n	800c9ee <USB_EPStartXfer+0x1ae>
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	4a90      	ldr	r2, [pc, #576]	; (800cc24 <USB_EPStartXfer+0x3e4>)
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	801a      	strh	r2, [r3, #0]
 800c9ec:	e03c      	b.n	800ca68 <USB_EPStartXfer+0x228>
 800c9ee:	1d7b      	adds	r3, r7, #5
 800c9f0:	33ff      	adds	r3, #255	; 0xff
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	085b      	lsrs	r3, r3, #1
 800c9f6:	1c7a      	adds	r2, r7, #1
 800c9f8:	32ff      	adds	r2, #255	; 0xff
 800c9fa:	6013      	str	r3, [r2, #0]
 800c9fc:	1d7b      	adds	r3, r7, #5
 800c9fe:	33ff      	adds	r3, #255	; 0xff
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2201      	movs	r2, #1
 800ca04:	4013      	ands	r3, r2
 800ca06:	d006      	beq.n	800ca16 <USB_EPStartXfer+0x1d6>
 800ca08:	1c7b      	adds	r3, r7, #1
 800ca0a:	33ff      	adds	r3, #255	; 0xff
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	1c7a      	adds	r2, r7, #1
 800ca12:	32ff      	adds	r2, #255	; 0xff
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	1c7b      	adds	r3, r7, #1
 800ca1e:	33ff      	adds	r3, #255	; 0xff
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	029b      	lsls	r3, r3, #10
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2e:	801a      	strh	r2, [r3, #0]
 800ca30:	e01a      	b.n	800ca68 <USB_EPStartXfer+0x228>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	785b      	ldrb	r3, [r3, #1]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d116      	bne.n	800ca68 <USB_EPStartXfer+0x228>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2250      	movs	r2, #80	; 0x50
 800ca3e:	5a9b      	ldrh	r3, [r3, r2]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	001a      	movs	r2, r3
 800ca44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca46:	189b      	adds	r3, r3, r2
 800ca48:	633b      	str	r3, [r7, #48]	; 0x30
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	00da      	lsls	r2, r3, #3
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	18d3      	adds	r3, r2, r3
 800ca54:	4a72      	ldr	r2, [pc, #456]	; (800cc20 <USB_EPStartXfer+0x3e0>)
 800ca56:	4694      	mov	ip, r2
 800ca58:	4463      	add	r3, ip
 800ca5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca5c:	1d7b      	adds	r3, r7, #5
 800ca5e:	33ff      	adds	r3, #255	; 0xff
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ca68:	2076      	movs	r0, #118	; 0x76
 800ca6a:	183b      	adds	r3, r7, r0
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	8952      	ldrh	r2, [r2, #10]
 800ca70:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	6959      	ldr	r1, [r3, #20]
 800ca76:	1d7b      	adds	r3, r7, #5
 800ca78:	33ff      	adds	r3, #255	; 0xff
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	b29c      	uxth	r4, r3
 800ca7e:	183b      	adds	r3, r7, r0
 800ca80:	881a      	ldrh	r2, [r3, #0]
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	0023      	movs	r3, r4
 800ca86:	f001 f94d 	bl	800dd24 <USB_WritePMA>
            ep->xfer_buff += len;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	695a      	ldr	r2, [r3, #20]
 800ca8e:	1d7b      	adds	r3, r7, #5
 800ca90:	33ff      	adds	r3, #255	; 0xff
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	18d2      	adds	r2, r2, r3
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	6a1a      	ldr	r2, [r3, #32]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d908      	bls.n	800cab8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	6a1a      	ldr	r2, [r3, #32]
 800caaa:	1d7b      	adds	r3, r7, #5
 800caac:	33ff      	adds	r3, #255	; 0xff
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	1ad2      	subs	r2, r2, r3
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	621a      	str	r2, [r3, #32]
 800cab6:	e007      	b.n	800cac8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	6a1b      	ldr	r3, [r3, #32]
 800cabc:	1d7a      	adds	r2, r7, #5
 800cabe:	32ff      	adds	r2, #255	; 0xff
 800cac0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2200      	movs	r2, #0
 800cac6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	785b      	ldrb	r3, [r3, #1]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d000      	beq.n	800cad2 <USB_EPStartXfer+0x292>
 800cad0:	e070      	b.n	800cbb4 <USB_EPStartXfer+0x374>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	61bb      	str	r3, [r7, #24]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2250      	movs	r2, #80	; 0x50
 800cada:	5a9b      	ldrh	r3, [r3, r2]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	001a      	movs	r2, r3
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	189b      	adds	r3, r3, r2
 800cae4:	61bb      	str	r3, [r7, #24]
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	00da      	lsls	r2, r3, #3
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	18d3      	adds	r3, r2, r3
 800caf0:	4a48      	ldr	r2, [pc, #288]	; (800cc14 <USB_EPStartXfer+0x3d4>)
 800caf2:	4694      	mov	ip, r2
 800caf4:	4463      	add	r3, ip
 800caf6:	617b      	str	r3, [r7, #20]
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	059b      	lsls	r3, r3, #22
 800cb00:	0d9b      	lsrs	r3, r3, #22
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	801a      	strh	r2, [r3, #0]
 800cb08:	1d7b      	adds	r3, r7, #5
 800cb0a:	33ff      	adds	r3, #255	; 0xff
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b3e      	cmp	r3, #62	; 0x3e
 800cb10:	d922      	bls.n	800cb58 <USB_EPStartXfer+0x318>
 800cb12:	1d7b      	adds	r3, r7, #5
 800cb14:	33ff      	adds	r3, #255	; 0xff
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	095b      	lsrs	r3, r3, #5
 800cb1a:	21fc      	movs	r1, #252	; 0xfc
 800cb1c:	187a      	adds	r2, r7, r1
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	1d7b      	adds	r3, r7, #5
 800cb22:	33ff      	adds	r3, #255	; 0xff
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	221f      	movs	r2, #31
 800cb28:	4013      	ands	r3, r2
 800cb2a:	d104      	bne.n	800cb36 <USB_EPStartXfer+0x2f6>
 800cb2c:	187b      	adds	r3, r7, r1
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	3b01      	subs	r3, #1
 800cb32:	187a      	adds	r2, r7, r1
 800cb34:	6013      	str	r3, [r2, #0]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	23fc      	movs	r3, #252	; 0xfc
 800cb3e:	18fb      	adds	r3, r7, r3
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	029b      	lsls	r3, r3, #10
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	4a35      	ldr	r2, [pc, #212]	; (800cc24 <USB_EPStartXfer+0x3e4>)
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	801a      	strh	r2, [r3, #0]
 800cb56:	e04a      	b.n	800cbee <USB_EPStartXfer+0x3ae>
 800cb58:	1d7b      	adds	r3, r7, #5
 800cb5a:	33ff      	adds	r3, #255	; 0xff
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d108      	bne.n	800cb74 <USB_EPStartXfer+0x334>
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	4a2e      	ldr	r2, [pc, #184]	; (800cc24 <USB_EPStartXfer+0x3e4>)
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	801a      	strh	r2, [r3, #0]
 800cb72:	e03c      	b.n	800cbee <USB_EPStartXfer+0x3ae>
 800cb74:	1d7b      	adds	r3, r7, #5
 800cb76:	33ff      	adds	r3, #255	; 0xff
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	085b      	lsrs	r3, r3, #1
 800cb7c:	21fc      	movs	r1, #252	; 0xfc
 800cb7e:	187a      	adds	r2, r7, r1
 800cb80:	6013      	str	r3, [r2, #0]
 800cb82:	1d7b      	adds	r3, r7, #5
 800cb84:	33ff      	adds	r3, #255	; 0xff
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	d004      	beq.n	800cb98 <USB_EPStartXfer+0x358>
 800cb8e:	187b      	adds	r3, r7, r1
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	187a      	adds	r2, r7, r1
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	881b      	ldrh	r3, [r3, #0]
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	23fc      	movs	r3, #252	; 0xfc
 800cba0:	18fb      	adds	r3, r7, r3
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	029b      	lsls	r3, r3, #10
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	801a      	strh	r2, [r3, #0]
 800cbb2:	e01c      	b.n	800cbee <USB_EPStartXfer+0x3ae>
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	785b      	ldrb	r3, [r3, #1]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d118      	bne.n	800cbee <USB_EPStartXfer+0x3ae>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	623b      	str	r3, [r7, #32]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2250      	movs	r2, #80	; 0x50
 800cbc4:	5a9b      	ldrh	r3, [r3, r2]
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	001a      	movs	r2, r3
 800cbca:	6a3b      	ldr	r3, [r7, #32]
 800cbcc:	189b      	adds	r3, r3, r2
 800cbce:	623b      	str	r3, [r7, #32]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	00da      	lsls	r2, r3, #3
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	18d3      	adds	r3, r2, r3
 800cbda:	4a0e      	ldr	r2, [pc, #56]	; (800cc14 <USB_EPStartXfer+0x3d4>)
 800cbdc:	4694      	mov	ip, r2
 800cbde:	4463      	add	r3, ip
 800cbe0:	61fb      	str	r3, [r7, #28]
 800cbe2:	1d7b      	adds	r3, r7, #5
 800cbe4:	33ff      	adds	r3, #255	; 0xff
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cbee:	2076      	movs	r0, #118	; 0x76
 800cbf0:	183b      	adds	r3, r7, r0
 800cbf2:	683a      	ldr	r2, [r7, #0]
 800cbf4:	8912      	ldrh	r2, [r2, #8]
 800cbf6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	6959      	ldr	r1, [r3, #20]
 800cbfc:	1d7b      	adds	r3, r7, #5
 800cbfe:	33ff      	adds	r3, #255	; 0xff
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	b29c      	uxth	r4, r3
 800cc04:	183b      	adds	r3, r7, r0
 800cc06:	881a      	ldrh	r2, [r3, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	0023      	movs	r3, r4
 800cc0c:	f001 f88a 	bl	800dd24 <USB_WritePMA>
 800cc10:	e329      	b.n	800d266 <USB_EPStartXfer+0xa26>
 800cc12:	46c0      	nop			; (mov r8, r8)
 800cc14:	00000402 	.word	0x00000402
 800cc18:	ffff8f8f 	.word	0xffff8f8f
 800cc1c:	ffff8180 	.word	0xffff8180
 800cc20:	00000406 	.word	0x00000406
 800cc24:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	785b      	ldrb	r3, [r3, #1]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d000      	beq.n	800cc32 <USB_EPStartXfer+0x3f2>
 800cc30:	e070      	b.n	800cd14 <USB_EPStartXfer+0x4d4>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2250      	movs	r2, #80	; 0x50
 800cc3a:	5a9b      	ldrh	r3, [r3, r2]
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	001a      	movs	r2, r3
 800cc40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc42:	189b      	adds	r3, r3, r2
 800cc44:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	00da      	lsls	r2, r3, #3
 800cc4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc4e:	18d3      	adds	r3, r2, r3
 800cc50:	4acd      	ldr	r2, [pc, #820]	; (800cf88 <USB_EPStartXfer+0x748>)
 800cc52:	4694      	mov	ip, r2
 800cc54:	4463      	add	r3, ip
 800cc56:	647b      	str	r3, [r7, #68]	; 0x44
 800cc58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc5a:	881b      	ldrh	r3, [r3, #0]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	059b      	lsls	r3, r3, #22
 800cc60:	0d9b      	lsrs	r3, r3, #22
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc66:	801a      	strh	r2, [r3, #0]
 800cc68:	1d7b      	adds	r3, r7, #5
 800cc6a:	33ff      	adds	r3, #255	; 0xff
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b3e      	cmp	r3, #62	; 0x3e
 800cc70:	d922      	bls.n	800ccb8 <USB_EPStartXfer+0x478>
 800cc72:	1d7b      	adds	r3, r7, #5
 800cc74:	33ff      	adds	r3, #255	; 0xff
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	095b      	lsrs	r3, r3, #5
 800cc7a:	21f8      	movs	r1, #248	; 0xf8
 800cc7c:	187a      	adds	r2, r7, r1
 800cc7e:	6013      	str	r3, [r2, #0]
 800cc80:	1d7b      	adds	r3, r7, #5
 800cc82:	33ff      	adds	r3, #255	; 0xff
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	221f      	movs	r2, #31
 800cc88:	4013      	ands	r3, r2
 800cc8a:	d104      	bne.n	800cc96 <USB_EPStartXfer+0x456>
 800cc8c:	187b      	adds	r3, r7, r1
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	187a      	adds	r2, r7, r1
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	23f8      	movs	r3, #248	; 0xf8
 800cc9e:	18fb      	adds	r3, r7, r3
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	029b      	lsls	r3, r3, #10
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	4ab7      	ldr	r2, [pc, #732]	; (800cf8c <USB_EPStartXfer+0x74c>)
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb4:	801a      	strh	r2, [r3, #0]
 800ccb6:	e04a      	b.n	800cd4e <USB_EPStartXfer+0x50e>
 800ccb8:	1d7b      	adds	r3, r7, #5
 800ccba:	33ff      	adds	r3, #255	; 0xff
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d108      	bne.n	800ccd4 <USB_EPStartXfer+0x494>
 800ccc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc4:	881b      	ldrh	r3, [r3, #0]
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	4ab0      	ldr	r2, [pc, #704]	; (800cf8c <USB_EPStartXfer+0x74c>)
 800ccca:	4313      	orrs	r3, r2
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd0:	801a      	strh	r2, [r3, #0]
 800ccd2:	e03c      	b.n	800cd4e <USB_EPStartXfer+0x50e>
 800ccd4:	1d7b      	adds	r3, r7, #5
 800ccd6:	33ff      	adds	r3, #255	; 0xff
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	085b      	lsrs	r3, r3, #1
 800ccdc:	21f8      	movs	r1, #248	; 0xf8
 800ccde:	187a      	adds	r2, r7, r1
 800cce0:	6013      	str	r3, [r2, #0]
 800cce2:	1d7b      	adds	r3, r7, #5
 800cce4:	33ff      	adds	r3, #255	; 0xff
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2201      	movs	r2, #1
 800ccea:	4013      	ands	r3, r2
 800ccec:	d004      	beq.n	800ccf8 <USB_EPStartXfer+0x4b8>
 800ccee:	187b      	adds	r3, r7, r1
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	187a      	adds	r2, r7, r1
 800ccf6:	6013      	str	r3, [r2, #0]
 800ccf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccfa:	881b      	ldrh	r3, [r3, #0]
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	23f8      	movs	r3, #248	; 0xf8
 800cd00:	18fb      	adds	r3, r7, r3
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	029b      	lsls	r3, r3, #10
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd10:	801a      	strh	r2, [r3, #0]
 800cd12:	e01c      	b.n	800cd4e <USB_EPStartXfer+0x50e>
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	785b      	ldrb	r3, [r3, #1]
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d118      	bne.n	800cd4e <USB_EPStartXfer+0x50e>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	653b      	str	r3, [r7, #80]	; 0x50
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2250      	movs	r2, #80	; 0x50
 800cd24:	5a9b      	ldrh	r3, [r3, r2]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	001a      	movs	r2, r3
 800cd2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd2c:	189b      	adds	r3, r3, r2
 800cd2e:	653b      	str	r3, [r7, #80]	; 0x50
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	00da      	lsls	r2, r3, #3
 800cd36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd38:	18d3      	adds	r3, r2, r3
 800cd3a:	4a93      	ldr	r2, [pc, #588]	; (800cf88 <USB_EPStartXfer+0x748>)
 800cd3c:	4694      	mov	ip, r2
 800cd3e:	4463      	add	r3, ip
 800cd40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd42:	1d7b      	adds	r3, r7, #5
 800cd44:	33ff      	adds	r3, #255	; 0xff
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cd4e:	2076      	movs	r0, #118	; 0x76
 800cd50:	183b      	adds	r3, r7, r0
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	8912      	ldrh	r2, [r2, #8]
 800cd56:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	6959      	ldr	r1, [r3, #20]
 800cd5c:	1d7b      	adds	r3, r7, #5
 800cd5e:	33ff      	adds	r3, #255	; 0xff
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	b29c      	uxth	r4, r3
 800cd64:	183b      	adds	r3, r7, r0
 800cd66:	881a      	ldrh	r2, [r3, #0]
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	0023      	movs	r3, r4
 800cd6c:	f000 ffda 	bl	800dd24 <USB_WritePMA>
            ep->xfer_buff += len;
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	695a      	ldr	r2, [r3, #20]
 800cd74:	1d7b      	adds	r3, r7, #5
 800cd76:	33ff      	adds	r3, #255	; 0xff
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	18d2      	adds	r2, r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	6a1a      	ldr	r2, [r3, #32]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d908      	bls.n	800cd9e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	6a1a      	ldr	r2, [r3, #32]
 800cd90:	1d7b      	adds	r3, r7, #5
 800cd92:	33ff      	adds	r3, #255	; 0xff
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	1ad2      	subs	r2, r2, r3
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	621a      	str	r2, [r3, #32]
 800cd9c:	e007      	b.n	800cdae <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	1d7a      	adds	r2, r7, #5
 800cda4:	32ff      	adds	r2, #255	; 0xff
 800cda6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	643b      	str	r3, [r7, #64]	; 0x40
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	785b      	ldrb	r3, [r3, #1]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d000      	beq.n	800cdbc <USB_EPStartXfer+0x57c>
 800cdba:	e070      	b.n	800ce9e <USB_EPStartXfer+0x65e>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2250      	movs	r2, #80	; 0x50
 800cdc4:	5a9b      	ldrh	r3, [r3, r2]
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	001a      	movs	r2, r3
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	189b      	adds	r3, r3, r2
 800cdce:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	00da      	lsls	r2, r3, #3
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd8:	18d3      	adds	r3, r2, r3
 800cdda:	4a6d      	ldr	r2, [pc, #436]	; (800cf90 <USB_EPStartXfer+0x750>)
 800cddc:	4694      	mov	ip, r2
 800cdde:	4463      	add	r3, ip
 800cde0:	637b      	str	r3, [r7, #52]	; 0x34
 800cde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde4:	881b      	ldrh	r3, [r3, #0]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	059b      	lsls	r3, r3, #22
 800cdea:	0d9b      	lsrs	r3, r3, #22
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf0:	801a      	strh	r2, [r3, #0]
 800cdf2:	1d7b      	adds	r3, r7, #5
 800cdf4:	33ff      	adds	r3, #255	; 0xff
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b3e      	cmp	r3, #62	; 0x3e
 800cdfa:	d922      	bls.n	800ce42 <USB_EPStartXfer+0x602>
 800cdfc:	1d7b      	adds	r3, r7, #5
 800cdfe:	33ff      	adds	r3, #255	; 0xff
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	095b      	lsrs	r3, r3, #5
 800ce04:	21f4      	movs	r1, #244	; 0xf4
 800ce06:	187a      	adds	r2, r7, r1
 800ce08:	6013      	str	r3, [r2, #0]
 800ce0a:	1d7b      	adds	r3, r7, #5
 800ce0c:	33ff      	adds	r3, #255	; 0xff
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	221f      	movs	r2, #31
 800ce12:	4013      	ands	r3, r2
 800ce14:	d104      	bne.n	800ce20 <USB_EPStartXfer+0x5e0>
 800ce16:	187b      	adds	r3, r7, r1
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	187a      	adds	r2, r7, r1
 800ce1e:	6013      	str	r3, [r2, #0]
 800ce20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	23f4      	movs	r3, #244	; 0xf4
 800ce28:	18fb      	adds	r3, r7, r3
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	029b      	lsls	r3, r3, #10
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	4313      	orrs	r3, r2
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	4a55      	ldr	r2, [pc, #340]	; (800cf8c <USB_EPStartXfer+0x74c>)
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3e:	801a      	strh	r2, [r3, #0]
 800ce40:	e048      	b.n	800ced4 <USB_EPStartXfer+0x694>
 800ce42:	1d7b      	adds	r3, r7, #5
 800ce44:	33ff      	adds	r3, #255	; 0xff
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d108      	bne.n	800ce5e <USB_EPStartXfer+0x61e>
 800ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	4a4e      	ldr	r2, [pc, #312]	; (800cf8c <USB_EPStartXfer+0x74c>)
 800ce54:	4313      	orrs	r3, r2
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5a:	801a      	strh	r2, [r3, #0]
 800ce5c:	e03a      	b.n	800ced4 <USB_EPStartXfer+0x694>
 800ce5e:	1d7b      	adds	r3, r7, #5
 800ce60:	33ff      	adds	r3, #255	; 0xff
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	085b      	lsrs	r3, r3, #1
 800ce66:	21f4      	movs	r1, #244	; 0xf4
 800ce68:	187a      	adds	r2, r7, r1
 800ce6a:	6013      	str	r3, [r2, #0]
 800ce6c:	1d7b      	adds	r3, r7, #5
 800ce6e:	33ff      	adds	r3, #255	; 0xff
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2201      	movs	r2, #1
 800ce74:	4013      	ands	r3, r2
 800ce76:	d004      	beq.n	800ce82 <USB_EPStartXfer+0x642>
 800ce78:	187b      	adds	r3, r7, r1
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	187a      	adds	r2, r7, r1
 800ce80:	6013      	str	r3, [r2, #0]
 800ce82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	23f4      	movs	r3, #244	; 0xf4
 800ce8a:	18fb      	adds	r3, r7, r3
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	029b      	lsls	r3, r3, #10
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	4313      	orrs	r3, r2
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9a:	801a      	strh	r2, [r3, #0]
 800ce9c:	e01a      	b.n	800ced4 <USB_EPStartXfer+0x694>
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	785b      	ldrb	r3, [r3, #1]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d116      	bne.n	800ced4 <USB_EPStartXfer+0x694>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2250      	movs	r2, #80	; 0x50
 800ceaa:	5a9b      	ldrh	r3, [r3, r2]
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	001a      	movs	r2, r3
 800ceb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb2:	189b      	adds	r3, r3, r2
 800ceb4:	643b      	str	r3, [r7, #64]	; 0x40
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	00da      	lsls	r2, r3, #3
 800cebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cebe:	18d3      	adds	r3, r2, r3
 800cec0:	4a33      	ldr	r2, [pc, #204]	; (800cf90 <USB_EPStartXfer+0x750>)
 800cec2:	4694      	mov	ip, r2
 800cec4:	4463      	add	r3, ip
 800cec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cec8:	1d7b      	adds	r3, r7, #5
 800ceca:	33ff      	adds	r3, #255	; 0xff
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	b29a      	uxth	r2, r3
 800ced0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ced2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ced4:	2076      	movs	r0, #118	; 0x76
 800ced6:	183b      	adds	r3, r7, r0
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	8952      	ldrh	r2, [r2, #10]
 800cedc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	6959      	ldr	r1, [r3, #20]
 800cee2:	1d7b      	adds	r3, r7, #5
 800cee4:	33ff      	adds	r3, #255	; 0xff
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	b29c      	uxth	r4, r3
 800ceea:	183b      	adds	r3, r7, r0
 800ceec:	881a      	ldrh	r2, [r3, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	0023      	movs	r3, r4
 800cef2:	f000 ff17 	bl	800dd24 <USB_WritePMA>
 800cef6:	e1b6      	b.n	800d266 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	6a1b      	ldr	r3, [r3, #32]
 800cefc:	1d7a      	adds	r2, r7, #5
 800cefe:	32ff      	adds	r2, #255	; 0xff
 800cf00:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	18d3      	adds	r3, r2, r3
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	2062      	movs	r0, #98	; 0x62
 800cf12:	183b      	adds	r3, r7, r0
 800cf14:	491f      	ldr	r1, [pc, #124]	; (800cf94 <USB_EPStartXfer+0x754>)
 800cf16:	400a      	ands	r2, r1
 800cf18:	801a      	strh	r2, [r3, #0]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	18d3      	adds	r3, r2, r3
 800cf24:	183a      	adds	r2, r7, r0
 800cf26:	8812      	ldrh	r2, [r2, #0]
 800cf28:	491b      	ldr	r1, [pc, #108]	; (800cf98 <USB_EPStartXfer+0x758>)
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	b292      	uxth	r2, r2
 800cf2e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2250      	movs	r2, #80	; 0x50
 800cf38:	5a9b      	ldrh	r3, [r3, r2]
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	001a      	movs	r2, r3
 800cf3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf40:	189b      	adds	r3, r3, r2
 800cf42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	00da      	lsls	r2, r3, #3
 800cf4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf4c:	18d3      	adds	r3, r2, r3
 800cf4e:	4a0e      	ldr	r2, [pc, #56]	; (800cf88 <USB_EPStartXfer+0x748>)
 800cf50:	4694      	mov	ip, r2
 800cf52:	4463      	add	r3, ip
 800cf54:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf56:	1d7b      	adds	r3, r7, #5
 800cf58:	33ff      	adds	r3, #255	; 0xff
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cf62:	2076      	movs	r0, #118	; 0x76
 800cf64:	183b      	adds	r3, r7, r0
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	8912      	ldrh	r2, [r2, #8]
 800cf6a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	6959      	ldr	r1, [r3, #20]
 800cf70:	1d7b      	adds	r3, r7, #5
 800cf72:	33ff      	adds	r3, #255	; 0xff
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	b29c      	uxth	r4, r3
 800cf78:	183b      	adds	r3, r7, r0
 800cf7a:	881a      	ldrh	r2, [r3, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	0023      	movs	r3, r4
 800cf80:	f000 fed0 	bl	800dd24 <USB_WritePMA>
 800cf84:	e16f      	b.n	800d266 <USB_EPStartXfer+0xa26>
 800cf86:	46c0      	nop			; (mov r8, r8)
 800cf88:	00000402 	.word	0x00000402
 800cf8c:	ffff8000 	.word	0xffff8000
 800cf90:	00000406 	.word	0x00000406
 800cf94:	ffff8e8f 	.word	0xffff8e8f
 800cf98:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	6a1a      	ldr	r2, [r3, #32]
 800cfa0:	1d7b      	adds	r3, r7, #5
 800cfa2:	33ff      	adds	r3, #255	; 0xff
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	1ad2      	subs	r2, r2, r3
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	18d3      	adds	r3, r2, r3
 800cfb6:	881b      	ldrh	r3, [r3, #0]
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	001a      	movs	r2, r3
 800cfbc:	2340      	movs	r3, #64	; 0x40
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	d100      	bne.n	800cfc4 <USB_EPStartXfer+0x784>
 800cfc2:	e0a4      	b.n	800d10e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	673b      	str	r3, [r7, #112]	; 0x70
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	785b      	ldrb	r3, [r3, #1]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d000      	beq.n	800cfd2 <USB_EPStartXfer+0x792>
 800cfd0:	e070      	b.n	800d0b4 <USB_EPStartXfer+0x874>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2250      	movs	r2, #80	; 0x50
 800cfda:	5a9b      	ldrh	r3, [r3, r2]
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	001a      	movs	r2, r3
 800cfe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfe2:	189b      	adds	r3, r3, r2
 800cfe4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	00da      	lsls	r2, r3, #3
 800cfec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfee:	18d3      	adds	r3, r2, r3
 800cff0:	4abc      	ldr	r2, [pc, #752]	; (800d2e4 <USB_EPStartXfer+0xaa4>)
 800cff2:	4694      	mov	ip, r2
 800cff4:	4463      	add	r3, ip
 800cff6:	667b      	str	r3, [r7, #100]	; 0x64
 800cff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cffa:	881b      	ldrh	r3, [r3, #0]
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	059b      	lsls	r3, r3, #22
 800d000:	0d9b      	lsrs	r3, r3, #22
 800d002:	b29a      	uxth	r2, r3
 800d004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d006:	801a      	strh	r2, [r3, #0]
 800d008:	1d7b      	adds	r3, r7, #5
 800d00a:	33ff      	adds	r3, #255	; 0xff
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b3e      	cmp	r3, #62	; 0x3e
 800d010:	d922      	bls.n	800d058 <USB_EPStartXfer+0x818>
 800d012:	1d7b      	adds	r3, r7, #5
 800d014:	33ff      	adds	r3, #255	; 0xff
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	095b      	lsrs	r3, r3, #5
 800d01a:	21f0      	movs	r1, #240	; 0xf0
 800d01c:	187a      	adds	r2, r7, r1
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	1d7b      	adds	r3, r7, #5
 800d022:	33ff      	adds	r3, #255	; 0xff
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	221f      	movs	r2, #31
 800d028:	4013      	ands	r3, r2
 800d02a:	d104      	bne.n	800d036 <USB_EPStartXfer+0x7f6>
 800d02c:	187b      	adds	r3, r7, r1
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	3b01      	subs	r3, #1
 800d032:	187a      	adds	r2, r7, r1
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d038:	881b      	ldrh	r3, [r3, #0]
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	23f0      	movs	r3, #240	; 0xf0
 800d03e:	18fb      	adds	r3, r7, r3
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	b29b      	uxth	r3, r3
 800d044:	029b      	lsls	r3, r3, #10
 800d046:	b29b      	uxth	r3, r3
 800d048:	4313      	orrs	r3, r2
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	4aa6      	ldr	r2, [pc, #664]	; (800d2e8 <USB_EPStartXfer+0xaa8>)
 800d04e:	4313      	orrs	r3, r2
 800d050:	b29a      	uxth	r2, r3
 800d052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d054:	801a      	strh	r2, [r3, #0]
 800d056:	e048      	b.n	800d0ea <USB_EPStartXfer+0x8aa>
 800d058:	1d7b      	adds	r3, r7, #5
 800d05a:	33ff      	adds	r3, #255	; 0xff
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d108      	bne.n	800d074 <USB_EPStartXfer+0x834>
 800d062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	b29b      	uxth	r3, r3
 800d068:	4a9f      	ldr	r2, [pc, #636]	; (800d2e8 <USB_EPStartXfer+0xaa8>)
 800d06a:	4313      	orrs	r3, r2
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d070:	801a      	strh	r2, [r3, #0]
 800d072:	e03a      	b.n	800d0ea <USB_EPStartXfer+0x8aa>
 800d074:	1d7b      	adds	r3, r7, #5
 800d076:	33ff      	adds	r3, #255	; 0xff
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	085b      	lsrs	r3, r3, #1
 800d07c:	21f0      	movs	r1, #240	; 0xf0
 800d07e:	187a      	adds	r2, r7, r1
 800d080:	6013      	str	r3, [r2, #0]
 800d082:	1d7b      	adds	r3, r7, #5
 800d084:	33ff      	adds	r3, #255	; 0xff
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2201      	movs	r2, #1
 800d08a:	4013      	ands	r3, r2
 800d08c:	d004      	beq.n	800d098 <USB_EPStartXfer+0x858>
 800d08e:	187b      	adds	r3, r7, r1
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	3301      	adds	r3, #1
 800d094:	187a      	adds	r2, r7, r1
 800d096:	6013      	str	r3, [r2, #0]
 800d098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d09a:	881b      	ldrh	r3, [r3, #0]
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	23f0      	movs	r3, #240	; 0xf0
 800d0a0:	18fb      	adds	r3, r7, r3
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	029b      	lsls	r3, r3, #10
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0b0:	801a      	strh	r2, [r3, #0]
 800d0b2:	e01a      	b.n	800d0ea <USB_EPStartXfer+0x8aa>
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	785b      	ldrb	r3, [r3, #1]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d116      	bne.n	800d0ea <USB_EPStartXfer+0x8aa>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2250      	movs	r2, #80	; 0x50
 800d0c0:	5a9b      	ldrh	r3, [r3, r2]
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	001a      	movs	r2, r3
 800d0c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0c8:	189b      	adds	r3, r3, r2
 800d0ca:	673b      	str	r3, [r7, #112]	; 0x70
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	00da      	lsls	r2, r3, #3
 800d0d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d0d4:	18d3      	adds	r3, r2, r3
 800d0d6:	4a83      	ldr	r2, [pc, #524]	; (800d2e4 <USB_EPStartXfer+0xaa4>)
 800d0d8:	4694      	mov	ip, r2
 800d0da:	4463      	add	r3, ip
 800d0dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0de:	1d7b      	adds	r3, r7, #5
 800d0e0:	33ff      	adds	r3, #255	; 0xff
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d0ea:	2076      	movs	r0, #118	; 0x76
 800d0ec:	183b      	adds	r3, r7, r0
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	8952      	ldrh	r2, [r2, #10]
 800d0f2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	6959      	ldr	r1, [r3, #20]
 800d0f8:	1d7b      	adds	r3, r7, #5
 800d0fa:	33ff      	adds	r3, #255	; 0xff
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	b29c      	uxth	r4, r3
 800d100:	183b      	adds	r3, r7, r0
 800d102:	881a      	ldrh	r2, [r3, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	0023      	movs	r3, r4
 800d108:	f000 fe0c 	bl	800dd24 <USB_WritePMA>
 800d10c:	e0ab      	b.n	800d266 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	785b      	ldrb	r3, [r3, #1]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d000      	beq.n	800d118 <USB_EPStartXfer+0x8d8>
 800d116:	e070      	b.n	800d1fa <USB_EPStartXfer+0x9ba>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2250      	movs	r2, #80	; 0x50
 800d120:	5a9b      	ldrh	r3, [r3, r2]
 800d122:	b29b      	uxth	r3, r3
 800d124:	001a      	movs	r2, r3
 800d126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d128:	189b      	adds	r3, r3, r2
 800d12a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	00da      	lsls	r2, r3, #3
 800d132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d134:	18d3      	adds	r3, r2, r3
 800d136:	4a6d      	ldr	r2, [pc, #436]	; (800d2ec <USB_EPStartXfer+0xaac>)
 800d138:	4694      	mov	ip, r2
 800d13a:	4463      	add	r3, ip
 800d13c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	b29b      	uxth	r3, r3
 800d144:	059b      	lsls	r3, r3, #22
 800d146:	0d9b      	lsrs	r3, r3, #22
 800d148:	b29a      	uxth	r2, r3
 800d14a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d14c:	801a      	strh	r2, [r3, #0]
 800d14e:	1d7b      	adds	r3, r7, #5
 800d150:	33ff      	adds	r3, #255	; 0xff
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b3e      	cmp	r3, #62	; 0x3e
 800d156:	d922      	bls.n	800d19e <USB_EPStartXfer+0x95e>
 800d158:	1d7b      	adds	r3, r7, #5
 800d15a:	33ff      	adds	r3, #255	; 0xff
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	095b      	lsrs	r3, r3, #5
 800d160:	21ec      	movs	r1, #236	; 0xec
 800d162:	187a      	adds	r2, r7, r1
 800d164:	6013      	str	r3, [r2, #0]
 800d166:	1d7b      	adds	r3, r7, #5
 800d168:	33ff      	adds	r3, #255	; 0xff
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	221f      	movs	r2, #31
 800d16e:	4013      	ands	r3, r2
 800d170:	d104      	bne.n	800d17c <USB_EPStartXfer+0x93c>
 800d172:	187b      	adds	r3, r7, r1
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3b01      	subs	r3, #1
 800d178:	187a      	adds	r2, r7, r1
 800d17a:	6013      	str	r3, [r2, #0]
 800d17c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	b29a      	uxth	r2, r3
 800d182:	23ec      	movs	r3, #236	; 0xec
 800d184:	18fb      	adds	r3, r7, r3
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	029b      	lsls	r3, r3, #10
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	4313      	orrs	r3, r2
 800d190:	b29b      	uxth	r3, r3
 800d192:	4a55      	ldr	r2, [pc, #340]	; (800d2e8 <USB_EPStartXfer+0xaa8>)
 800d194:	4313      	orrs	r3, r2
 800d196:	b29a      	uxth	r2, r3
 800d198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d19a:	801a      	strh	r2, [r3, #0]
 800d19c:	e052      	b.n	800d244 <USB_EPStartXfer+0xa04>
 800d19e:	1d7b      	adds	r3, r7, #5
 800d1a0:	33ff      	adds	r3, #255	; 0xff
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d108      	bne.n	800d1ba <USB_EPStartXfer+0x97a>
 800d1a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	4a4e      	ldr	r2, [pc, #312]	; (800d2e8 <USB_EPStartXfer+0xaa8>)
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1b6:	801a      	strh	r2, [r3, #0]
 800d1b8:	e044      	b.n	800d244 <USB_EPStartXfer+0xa04>
 800d1ba:	1d7b      	adds	r3, r7, #5
 800d1bc:	33ff      	adds	r3, #255	; 0xff
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	085b      	lsrs	r3, r3, #1
 800d1c2:	21ec      	movs	r1, #236	; 0xec
 800d1c4:	187a      	adds	r2, r7, r1
 800d1c6:	6013      	str	r3, [r2, #0]
 800d1c8:	1d7b      	adds	r3, r7, #5
 800d1ca:	33ff      	adds	r3, #255	; 0xff
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	4013      	ands	r3, r2
 800d1d2:	d004      	beq.n	800d1de <USB_EPStartXfer+0x99e>
 800d1d4:	187b      	adds	r3, r7, r1
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	187a      	adds	r2, r7, r1
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1e0:	881b      	ldrh	r3, [r3, #0]
 800d1e2:	b29a      	uxth	r2, r3
 800d1e4:	23ec      	movs	r3, #236	; 0xec
 800d1e6:	18fb      	adds	r3, r7, r3
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	029b      	lsls	r3, r3, #10
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1f6:	801a      	strh	r2, [r3, #0]
 800d1f8:	e024      	b.n	800d244 <USB_EPStartXfer+0xa04>
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	785b      	ldrb	r3, [r3, #1]
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d120      	bne.n	800d244 <USB_EPStartXfer+0xa04>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2184      	movs	r1, #132	; 0x84
 800d206:	187a      	adds	r2, r7, r1
 800d208:	6013      	str	r3, [r2, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2250      	movs	r2, #80	; 0x50
 800d20e:	5a9b      	ldrh	r3, [r3, r2]
 800d210:	b29b      	uxth	r3, r3
 800d212:	001a      	movs	r2, r3
 800d214:	187b      	adds	r3, r7, r1
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	189b      	adds	r3, r3, r2
 800d21a:	187a      	adds	r2, r7, r1
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	00da      	lsls	r2, r3, #3
 800d224:	187b      	adds	r3, r7, r1
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	18d3      	adds	r3, r2, r3
 800d22a:	4a30      	ldr	r2, [pc, #192]	; (800d2ec <USB_EPStartXfer+0xaac>)
 800d22c:	4694      	mov	ip, r2
 800d22e:	4463      	add	r3, ip
 800d230:	2180      	movs	r1, #128	; 0x80
 800d232:	187a      	adds	r2, r7, r1
 800d234:	6013      	str	r3, [r2, #0]
 800d236:	1d7b      	adds	r3, r7, #5
 800d238:	33ff      	adds	r3, #255	; 0xff
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	187b      	adds	r3, r7, r1
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d244:	2076      	movs	r0, #118	; 0x76
 800d246:	183b      	adds	r3, r7, r0
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	8912      	ldrh	r2, [r2, #8]
 800d24c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	6959      	ldr	r1, [r3, #20]
 800d252:	1d7b      	adds	r3, r7, #5
 800d254:	33ff      	adds	r3, #255	; 0xff
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	b29c      	uxth	r4, r3
 800d25a:	183b      	adds	r3, r7, r0
 800d25c:	881a      	ldrh	r2, [r3, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	0023      	movs	r3, r4
 800d262:	f000 fd5f 	bl	800dd24 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	18d3      	adds	r3, r2, r3
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	b29a      	uxth	r2, r3
 800d274:	200a      	movs	r0, #10
 800d276:	183b      	adds	r3, r7, r0
 800d278:	491d      	ldr	r1, [pc, #116]	; (800d2f0 <USB_EPStartXfer+0xab0>)
 800d27a:	400a      	ands	r2, r1
 800d27c:	801a      	strh	r2, [r3, #0]
 800d27e:	183b      	adds	r3, r7, r0
 800d280:	183a      	adds	r2, r7, r0
 800d282:	8812      	ldrh	r2, [r2, #0]
 800d284:	2110      	movs	r1, #16
 800d286:	404a      	eors	r2, r1
 800d288:	801a      	strh	r2, [r3, #0]
 800d28a:	183b      	adds	r3, r7, r0
 800d28c:	183a      	adds	r2, r7, r0
 800d28e:	8812      	ldrh	r2, [r2, #0]
 800d290:	2120      	movs	r1, #32
 800d292:	404a      	eors	r2, r1
 800d294:	801a      	strh	r2, [r3, #0]
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	18d3      	adds	r3, r2, r3
 800d2a0:	183a      	adds	r2, r7, r0
 800d2a2:	8812      	ldrh	r2, [r2, #0]
 800d2a4:	4913      	ldr	r1, [pc, #76]	; (800d2f4 <USB_EPStartXfer+0xab4>)
 800d2a6:	430a      	orrs	r2, r1
 800d2a8:	b292      	uxth	r2, r2
 800d2aa:	801a      	strh	r2, [r3, #0]
 800d2ac:	f000 fbf4 	bl	800da98 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	7b1b      	ldrb	r3, [r3, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d000      	beq.n	800d2ba <USB_EPStartXfer+0xa7a>
 800d2b8:	e0a9      	b.n	800d40e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	699a      	ldr	r2, [r3, #24]
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d918      	bls.n	800d2f8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	691b      	ldr	r3, [r3, #16]
 800d2ca:	1d7a      	adds	r2, r7, #5
 800d2cc:	32ff      	adds	r2, #255	; 0xff
 800d2ce:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	699a      	ldr	r2, [r3, #24]
 800d2d4:	1d7b      	adds	r3, r7, #5
 800d2d6:	33ff      	adds	r3, #255	; 0xff
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	1ad2      	subs	r2, r2, r3
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	619a      	str	r2, [r3, #24]
 800d2e0:	e012      	b.n	800d308 <USB_EPStartXfer+0xac8>
 800d2e2:	46c0      	nop			; (mov r8, r8)
 800d2e4:	00000406 	.word	0x00000406
 800d2e8:	ffff8000 	.word	0xffff8000
 800d2ec:	00000402 	.word	0x00000402
 800d2f0:	ffff8fbf 	.word	0xffff8fbf
 800d2f4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	1d7a      	adds	r2, r7, #5
 800d2fe:	32ff      	adds	r2, #255	; 0xff
 800d300:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2200      	movs	r2, #0
 800d306:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2190      	movs	r1, #144	; 0x90
 800d30c:	187a      	adds	r2, r7, r1
 800d30e:	6013      	str	r3, [r2, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2250      	movs	r2, #80	; 0x50
 800d314:	5a9b      	ldrh	r3, [r3, r2]
 800d316:	b29b      	uxth	r3, r3
 800d318:	001a      	movs	r2, r3
 800d31a:	187b      	adds	r3, r7, r1
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	189b      	adds	r3, r3, r2
 800d320:	187a      	adds	r2, r7, r1
 800d322:	6013      	str	r3, [r2, #0]
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	00da      	lsls	r2, r3, #3
 800d32a:	187b      	adds	r3, r7, r1
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	18d3      	adds	r3, r2, r3
 800d330:	4acf      	ldr	r2, [pc, #828]	; (800d670 <USB_EPStartXfer+0xe30>)
 800d332:	4694      	mov	ip, r2
 800d334:	4463      	add	r3, ip
 800d336:	218c      	movs	r1, #140	; 0x8c
 800d338:	187a      	adds	r2, r7, r1
 800d33a:	6013      	str	r3, [r2, #0]
 800d33c:	187b      	adds	r3, r7, r1
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	b29b      	uxth	r3, r3
 800d344:	059b      	lsls	r3, r3, #22
 800d346:	0d9b      	lsrs	r3, r3, #22
 800d348:	b29a      	uxth	r2, r3
 800d34a:	187b      	adds	r3, r7, r1
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	801a      	strh	r2, [r3, #0]
 800d350:	1d7b      	adds	r3, r7, #5
 800d352:	33ff      	adds	r3, #255	; 0xff
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b3e      	cmp	r3, #62	; 0x3e
 800d358:	d925      	bls.n	800d3a6 <USB_EPStartXfer+0xb66>
 800d35a:	1d7b      	adds	r3, r7, #5
 800d35c:	33ff      	adds	r3, #255	; 0xff
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	095b      	lsrs	r3, r3, #5
 800d362:	21e8      	movs	r1, #232	; 0xe8
 800d364:	187a      	adds	r2, r7, r1
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	1d7b      	adds	r3, r7, #5
 800d36a:	33ff      	adds	r3, #255	; 0xff
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	221f      	movs	r2, #31
 800d370:	4013      	ands	r3, r2
 800d372:	d104      	bne.n	800d37e <USB_EPStartXfer+0xb3e>
 800d374:	187b      	adds	r3, r7, r1
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3b01      	subs	r3, #1
 800d37a:	187a      	adds	r2, r7, r1
 800d37c:	6013      	str	r3, [r2, #0]
 800d37e:	218c      	movs	r1, #140	; 0x8c
 800d380:	187b      	adds	r3, r7, r1
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	b29a      	uxth	r2, r3
 800d388:	23e8      	movs	r3, #232	; 0xe8
 800d38a:	18fb      	adds	r3, r7, r3
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	b29b      	uxth	r3, r3
 800d390:	029b      	lsls	r3, r3, #10
 800d392:	b29b      	uxth	r3, r3
 800d394:	4313      	orrs	r3, r2
 800d396:	b29b      	uxth	r3, r3
 800d398:	4ab6      	ldr	r2, [pc, #728]	; (800d674 <USB_EPStartXfer+0xe34>)
 800d39a:	4313      	orrs	r3, r2
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	187b      	adds	r3, r7, r1
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	801a      	strh	r2, [r3, #0]
 800d3a4:	e353      	b.n	800da4e <USB_EPStartXfer+0x120e>
 800d3a6:	1d7b      	adds	r3, r7, #5
 800d3a8:	33ff      	adds	r3, #255	; 0xff
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10b      	bne.n	800d3c8 <USB_EPStartXfer+0xb88>
 800d3b0:	218c      	movs	r1, #140	; 0x8c
 800d3b2:	187b      	adds	r3, r7, r1
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	4aae      	ldr	r2, [pc, #696]	; (800d674 <USB_EPStartXfer+0xe34>)
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	187b      	adds	r3, r7, r1
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	801a      	strh	r2, [r3, #0]
 800d3c6:	e342      	b.n	800da4e <USB_EPStartXfer+0x120e>
 800d3c8:	1d7b      	adds	r3, r7, #5
 800d3ca:	33ff      	adds	r3, #255	; 0xff
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	085b      	lsrs	r3, r3, #1
 800d3d0:	21e8      	movs	r1, #232	; 0xe8
 800d3d2:	187a      	adds	r2, r7, r1
 800d3d4:	6013      	str	r3, [r2, #0]
 800d3d6:	1d7b      	adds	r3, r7, #5
 800d3d8:	33ff      	adds	r3, #255	; 0xff
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	4013      	ands	r3, r2
 800d3e0:	d004      	beq.n	800d3ec <USB_EPStartXfer+0xbac>
 800d3e2:	187b      	adds	r3, r7, r1
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	187a      	adds	r2, r7, r1
 800d3ea:	6013      	str	r3, [r2, #0]
 800d3ec:	218c      	movs	r1, #140	; 0x8c
 800d3ee:	187b      	adds	r3, r7, r1
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	23e8      	movs	r3, #232	; 0xe8
 800d3f8:	18fb      	adds	r3, r7, r3
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	029b      	lsls	r3, r3, #10
 800d400:	b29b      	uxth	r3, r3
 800d402:	4313      	orrs	r3, r2
 800d404:	b29a      	uxth	r2, r3
 800d406:	187b      	adds	r3, r7, r1
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	801a      	strh	r2, [r3, #0]
 800d40c:	e31f      	b.n	800da4e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	78db      	ldrb	r3, [r3, #3]
 800d412:	2b02      	cmp	r3, #2
 800d414:	d000      	beq.n	800d418 <USB_EPStartXfer+0xbd8>
 800d416:	e191      	b.n	800d73c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	785b      	ldrb	r3, [r3, #1]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d000      	beq.n	800d422 <USB_EPStartXfer+0xbe2>
 800d420:	e07c      	b.n	800d51c <USB_EPStartXfer+0xcdc>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	21ac      	movs	r1, #172	; 0xac
 800d426:	187a      	adds	r2, r7, r1
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2250      	movs	r2, #80	; 0x50
 800d42e:	5a9b      	ldrh	r3, [r3, r2]
 800d430:	b29b      	uxth	r3, r3
 800d432:	001a      	movs	r2, r3
 800d434:	187b      	adds	r3, r7, r1
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	189b      	adds	r3, r3, r2
 800d43a:	187a      	adds	r2, r7, r1
 800d43c:	6013      	str	r3, [r2, #0]
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	00da      	lsls	r2, r3, #3
 800d444:	187b      	adds	r3, r7, r1
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	18d3      	adds	r3, r2, r3
 800d44a:	4a8b      	ldr	r2, [pc, #556]	; (800d678 <USB_EPStartXfer+0xe38>)
 800d44c:	4694      	mov	ip, r2
 800d44e:	4463      	add	r3, ip
 800d450:	21a8      	movs	r1, #168	; 0xa8
 800d452:	187a      	adds	r2, r7, r1
 800d454:	6013      	str	r3, [r2, #0]
 800d456:	187b      	adds	r3, r7, r1
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	059b      	lsls	r3, r3, #22
 800d460:	0d9b      	lsrs	r3, r3, #22
 800d462:	b29a      	uxth	r2, r3
 800d464:	187b      	adds	r3, r7, r1
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	801a      	strh	r2, [r3, #0]
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	691b      	ldr	r3, [r3, #16]
 800d46e:	2b3e      	cmp	r3, #62	; 0x3e
 800d470:	d923      	bls.n	800d4ba <USB_EPStartXfer+0xc7a>
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	095b      	lsrs	r3, r3, #5
 800d478:	21e4      	movs	r1, #228	; 0xe4
 800d47a:	187a      	adds	r2, r7, r1
 800d47c:	6013      	str	r3, [r2, #0]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	691b      	ldr	r3, [r3, #16]
 800d482:	221f      	movs	r2, #31
 800d484:	4013      	ands	r3, r2
 800d486:	d104      	bne.n	800d492 <USB_EPStartXfer+0xc52>
 800d488:	187b      	adds	r3, r7, r1
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3b01      	subs	r3, #1
 800d48e:	187a      	adds	r2, r7, r1
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	21a8      	movs	r1, #168	; 0xa8
 800d494:	187b      	adds	r3, r7, r1
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	881b      	ldrh	r3, [r3, #0]
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	23e4      	movs	r3, #228	; 0xe4
 800d49e:	18fb      	adds	r3, r7, r3
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	029b      	lsls	r3, r3, #10
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	4a71      	ldr	r2, [pc, #452]	; (800d674 <USB_EPStartXfer+0xe34>)
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	187b      	adds	r3, r7, r1
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	801a      	strh	r2, [r3, #0]
 800d4b8:	e054      	b.n	800d564 <USB_EPStartXfer+0xd24>
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d10b      	bne.n	800d4da <USB_EPStartXfer+0xc9a>
 800d4c2:	21a8      	movs	r1, #168	; 0xa8
 800d4c4:	187b      	adds	r3, r7, r1
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4a69      	ldr	r2, [pc, #420]	; (800d674 <USB_EPStartXfer+0xe34>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	187b      	adds	r3, r7, r1
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	801a      	strh	r2, [r3, #0]
 800d4d8:	e044      	b.n	800d564 <USB_EPStartXfer+0xd24>
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	085b      	lsrs	r3, r3, #1
 800d4e0:	21e4      	movs	r1, #228	; 0xe4
 800d4e2:	187a      	adds	r2, r7, r1
 800d4e4:	6013      	str	r3, [r2, #0]
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	691b      	ldr	r3, [r3, #16]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	d004      	beq.n	800d4fa <USB_EPStartXfer+0xcba>
 800d4f0:	187b      	adds	r3, r7, r1
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	187a      	adds	r2, r7, r1
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	21a8      	movs	r1, #168	; 0xa8
 800d4fc:	187b      	adds	r3, r7, r1
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	b29a      	uxth	r2, r3
 800d504:	23e4      	movs	r3, #228	; 0xe4
 800d506:	18fb      	adds	r3, r7, r3
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	029b      	lsls	r3, r3, #10
 800d50e:	b29b      	uxth	r3, r3
 800d510:	4313      	orrs	r3, r2
 800d512:	b29a      	uxth	r2, r3
 800d514:	187b      	adds	r3, r7, r1
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	801a      	strh	r2, [r3, #0]
 800d51a:	e023      	b.n	800d564 <USB_EPStartXfer+0xd24>
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	785b      	ldrb	r3, [r3, #1]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d11f      	bne.n	800d564 <USB_EPStartXfer+0xd24>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	21b4      	movs	r1, #180	; 0xb4
 800d528:	187a      	adds	r2, r7, r1
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2250      	movs	r2, #80	; 0x50
 800d530:	5a9b      	ldrh	r3, [r3, r2]
 800d532:	b29b      	uxth	r3, r3
 800d534:	001a      	movs	r2, r3
 800d536:	187b      	adds	r3, r7, r1
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	189b      	adds	r3, r3, r2
 800d53c:	187a      	adds	r2, r7, r1
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	00da      	lsls	r2, r3, #3
 800d546:	187b      	adds	r3, r7, r1
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	18d3      	adds	r3, r2, r3
 800d54c:	4a4a      	ldr	r2, [pc, #296]	; (800d678 <USB_EPStartXfer+0xe38>)
 800d54e:	4694      	mov	ip, r2
 800d550:	4463      	add	r3, ip
 800d552:	21b0      	movs	r1, #176	; 0xb0
 800d554:	187a      	adds	r2, r7, r1
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	691b      	ldr	r3, [r3, #16]
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	187b      	adds	r3, r7, r1
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	801a      	strh	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	22a4      	movs	r2, #164	; 0xa4
 800d568:	18ba      	adds	r2, r7, r2
 800d56a:	6013      	str	r3, [r2, #0]
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	785b      	ldrb	r3, [r3, #1]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d000      	beq.n	800d576 <USB_EPStartXfer+0xd36>
 800d574:	e082      	b.n	800d67c <USB_EPStartXfer+0xe3c>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	219c      	movs	r1, #156	; 0x9c
 800d57a:	187a      	adds	r2, r7, r1
 800d57c:	6013      	str	r3, [r2, #0]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2250      	movs	r2, #80	; 0x50
 800d582:	5a9b      	ldrh	r3, [r3, r2]
 800d584:	b29b      	uxth	r3, r3
 800d586:	001a      	movs	r2, r3
 800d588:	187b      	adds	r3, r7, r1
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	189b      	adds	r3, r3, r2
 800d58e:	187a      	adds	r2, r7, r1
 800d590:	6013      	str	r3, [r2, #0]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	00da      	lsls	r2, r3, #3
 800d598:	187b      	adds	r3, r7, r1
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	18d3      	adds	r3, r2, r3
 800d59e:	4a34      	ldr	r2, [pc, #208]	; (800d670 <USB_EPStartXfer+0xe30>)
 800d5a0:	4694      	mov	ip, r2
 800d5a2:	4463      	add	r3, ip
 800d5a4:	2198      	movs	r1, #152	; 0x98
 800d5a6:	187a      	adds	r2, r7, r1
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	187b      	adds	r3, r7, r1
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	881b      	ldrh	r3, [r3, #0]
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	059b      	lsls	r3, r3, #22
 800d5b4:	0d9b      	lsrs	r3, r3, #22
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	187b      	adds	r3, r7, r1
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	801a      	strh	r2, [r3, #0]
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	2b3e      	cmp	r3, #62	; 0x3e
 800d5c4:	d923      	bls.n	800d60e <USB_EPStartXfer+0xdce>
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	691b      	ldr	r3, [r3, #16]
 800d5ca:	095b      	lsrs	r3, r3, #5
 800d5cc:	21e0      	movs	r1, #224	; 0xe0
 800d5ce:	187a      	adds	r2, r7, r1
 800d5d0:	6013      	str	r3, [r2, #0]
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	221f      	movs	r2, #31
 800d5d8:	4013      	ands	r3, r2
 800d5da:	d104      	bne.n	800d5e6 <USB_EPStartXfer+0xda6>
 800d5dc:	187b      	adds	r3, r7, r1
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	187a      	adds	r2, r7, r1
 800d5e4:	6013      	str	r3, [r2, #0]
 800d5e6:	2198      	movs	r1, #152	; 0x98
 800d5e8:	187b      	adds	r3, r7, r1
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	b29a      	uxth	r2, r3
 800d5f0:	23e0      	movs	r3, #224	; 0xe0
 800d5f2:	18fb      	adds	r3, r7, r3
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	029b      	lsls	r3, r3, #10
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	4a1c      	ldr	r2, [pc, #112]	; (800d674 <USB_EPStartXfer+0xe34>)
 800d602:	4313      	orrs	r3, r2
 800d604:	b29a      	uxth	r2, r3
 800d606:	187b      	adds	r3, r7, r1
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	801a      	strh	r2, [r3, #0]
 800d60c:	e057      	b.n	800d6be <USB_EPStartXfer+0xe7e>
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10b      	bne.n	800d62e <USB_EPStartXfer+0xdee>
 800d616:	2198      	movs	r1, #152	; 0x98
 800d618:	187b      	adds	r3, r7, r1
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	881b      	ldrh	r3, [r3, #0]
 800d61e:	b29b      	uxth	r3, r3
 800d620:	4a14      	ldr	r2, [pc, #80]	; (800d674 <USB_EPStartXfer+0xe34>)
 800d622:	4313      	orrs	r3, r2
 800d624:	b29a      	uxth	r2, r3
 800d626:	187b      	adds	r3, r7, r1
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	801a      	strh	r2, [r3, #0]
 800d62c:	e047      	b.n	800d6be <USB_EPStartXfer+0xe7e>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	085b      	lsrs	r3, r3, #1
 800d634:	21e0      	movs	r1, #224	; 0xe0
 800d636:	187a      	adds	r2, r7, r1
 800d638:	6013      	str	r3, [r2, #0]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	2201      	movs	r2, #1
 800d640:	4013      	ands	r3, r2
 800d642:	d004      	beq.n	800d64e <USB_EPStartXfer+0xe0e>
 800d644:	187b      	adds	r3, r7, r1
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3301      	adds	r3, #1
 800d64a:	187a      	adds	r2, r7, r1
 800d64c:	6013      	str	r3, [r2, #0]
 800d64e:	2198      	movs	r1, #152	; 0x98
 800d650:	187b      	adds	r3, r7, r1
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	881b      	ldrh	r3, [r3, #0]
 800d656:	b29a      	uxth	r2, r3
 800d658:	23e0      	movs	r3, #224	; 0xe0
 800d65a:	18fb      	adds	r3, r7, r3
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	b29b      	uxth	r3, r3
 800d660:	029b      	lsls	r3, r3, #10
 800d662:	b29b      	uxth	r3, r3
 800d664:	4313      	orrs	r3, r2
 800d666:	b29a      	uxth	r2, r3
 800d668:	187b      	adds	r3, r7, r1
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	801a      	strh	r2, [r3, #0]
 800d66e:	e026      	b.n	800d6be <USB_EPStartXfer+0xe7e>
 800d670:	00000406 	.word	0x00000406
 800d674:	ffff8000 	.word	0xffff8000
 800d678:	00000402 	.word	0x00000402
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	785b      	ldrb	r3, [r3, #1]
 800d680:	2b01      	cmp	r3, #1
 800d682:	d11c      	bne.n	800d6be <USB_EPStartXfer+0xe7e>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2250      	movs	r2, #80	; 0x50
 800d688:	5a9b      	ldrh	r3, [r3, r2]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	001a      	movs	r2, r3
 800d68e:	21a4      	movs	r1, #164	; 0xa4
 800d690:	187b      	adds	r3, r7, r1
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	189b      	adds	r3, r3, r2
 800d696:	187a      	adds	r2, r7, r1
 800d698:	6013      	str	r3, [r2, #0]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	00da      	lsls	r2, r3, #3
 800d6a0:	187b      	adds	r3, r7, r1
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	18d3      	adds	r3, r2, r3
 800d6a6:	4ad2      	ldr	r2, [pc, #840]	; (800d9f0 <USB_EPStartXfer+0x11b0>)
 800d6a8:	4694      	mov	ip, r2
 800d6aa:	4463      	add	r3, ip
 800d6ac:	21a0      	movs	r1, #160	; 0xa0
 800d6ae:	187a      	adds	r2, r7, r1
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	187b      	adds	r3, r7, r1
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	69db      	ldr	r3, [r3, #28]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d100      	bne.n	800d6c8 <USB_EPStartXfer+0xe88>
 800d6c6:	e1c2      	b.n	800da4e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	18d2      	adds	r2, r2, r3
 800d6d2:	2196      	movs	r1, #150	; 0x96
 800d6d4:	187b      	adds	r3, r7, r1
 800d6d6:	8812      	ldrh	r2, [r2, #0]
 800d6d8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d6da:	187b      	adds	r3, r7, r1
 800d6dc:	881a      	ldrh	r2, [r3, #0]
 800d6de:	2380      	movs	r3, #128	; 0x80
 800d6e0:	01db      	lsls	r3, r3, #7
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	d004      	beq.n	800d6f0 <USB_EPStartXfer+0xeb0>
 800d6e6:	187b      	adds	r3, r7, r1
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	2240      	movs	r2, #64	; 0x40
 800d6ec:	4013      	ands	r3, r2
 800d6ee:	d10d      	bne.n	800d70c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d6f0:	2196      	movs	r1, #150	; 0x96
 800d6f2:	187b      	adds	r3, r7, r1
 800d6f4:	881a      	ldrh	r2, [r3, #0]
 800d6f6:	2380      	movs	r3, #128	; 0x80
 800d6f8:	01db      	lsls	r3, r3, #7
 800d6fa:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d6fc:	d000      	beq.n	800d700 <USB_EPStartXfer+0xec0>
 800d6fe:	e1a6      	b.n	800da4e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d700:	187b      	adds	r3, r7, r1
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	2240      	movs	r2, #64	; 0x40
 800d706:	4013      	ands	r3, r2
 800d708:	d000      	beq.n	800d70c <USB_EPStartXfer+0xecc>
 800d70a:	e1a0      	b.n	800da4e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	18d3      	adds	r3, r2, r3
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	b29a      	uxth	r2, r3
 800d71a:	2094      	movs	r0, #148	; 0x94
 800d71c:	183b      	adds	r3, r7, r0
 800d71e:	49b5      	ldr	r1, [pc, #724]	; (800d9f4 <USB_EPStartXfer+0x11b4>)
 800d720:	400a      	ands	r2, r1
 800d722:	801a      	strh	r2, [r3, #0]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	18d3      	adds	r3, r2, r3
 800d72e:	183a      	adds	r2, r7, r0
 800d730:	8812      	ldrh	r2, [r2, #0]
 800d732:	49b1      	ldr	r1, [pc, #708]	; (800d9f8 <USB_EPStartXfer+0x11b8>)
 800d734:	430a      	orrs	r2, r1
 800d736:	b292      	uxth	r2, r2
 800d738:	801a      	strh	r2, [r3, #0]
 800d73a:	e188      	b.n	800da4e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	78db      	ldrb	r3, [r3, #3]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d000      	beq.n	800d746 <USB_EPStartXfer+0xf06>
 800d744:	e181      	b.n	800da4a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	699a      	ldr	r2, [r3, #24]
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d90d      	bls.n	800d76e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	1d7a      	adds	r2, r7, #5
 800d758:	32ff      	adds	r2, #255	; 0xff
 800d75a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	699a      	ldr	r2, [r3, #24]
 800d760:	1d7b      	adds	r3, r7, #5
 800d762:	33ff      	adds	r3, #255	; 0xff
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	1ad2      	subs	r2, r2, r3
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	619a      	str	r2, [r3, #24]
 800d76c:	e007      	b.n	800d77e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	1d7a      	adds	r2, r7, #5
 800d774:	32ff      	adds	r2, #255	; 0xff
 800d776:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	2200      	movs	r2, #0
 800d77c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	785b      	ldrb	r3, [r3, #1]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d000      	beq.n	800d788 <USB_EPStartXfer+0xf48>
 800d786:	e082      	b.n	800d88e <USB_EPStartXfer+0x104e>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	21cc      	movs	r1, #204	; 0xcc
 800d78c:	187a      	adds	r2, r7, r1
 800d78e:	6013      	str	r3, [r2, #0]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2250      	movs	r2, #80	; 0x50
 800d794:	5a9b      	ldrh	r3, [r3, r2]
 800d796:	b29b      	uxth	r3, r3
 800d798:	001a      	movs	r2, r3
 800d79a:	187b      	adds	r3, r7, r1
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	189b      	adds	r3, r3, r2
 800d7a0:	187a      	adds	r2, r7, r1
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	00da      	lsls	r2, r3, #3
 800d7aa:	187b      	adds	r3, r7, r1
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	18d3      	adds	r3, r2, r3
 800d7b0:	4a92      	ldr	r2, [pc, #584]	; (800d9fc <USB_EPStartXfer+0x11bc>)
 800d7b2:	4694      	mov	ip, r2
 800d7b4:	4463      	add	r3, ip
 800d7b6:	21c8      	movs	r1, #200	; 0xc8
 800d7b8:	187a      	adds	r2, r7, r1
 800d7ba:	6013      	str	r3, [r2, #0]
 800d7bc:	187b      	adds	r3, r7, r1
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	059b      	lsls	r3, r3, #22
 800d7c6:	0d9b      	lsrs	r3, r3, #22
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	187b      	adds	r3, r7, r1
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	801a      	strh	r2, [r3, #0]
 800d7d0:	1d7b      	adds	r3, r7, #5
 800d7d2:	33ff      	adds	r3, #255	; 0xff
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b3e      	cmp	r3, #62	; 0x3e
 800d7d8:	d925      	bls.n	800d826 <USB_EPStartXfer+0xfe6>
 800d7da:	1d7b      	adds	r3, r7, #5
 800d7dc:	33ff      	adds	r3, #255	; 0xff
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	095b      	lsrs	r3, r3, #5
 800d7e2:	21dc      	movs	r1, #220	; 0xdc
 800d7e4:	187a      	adds	r2, r7, r1
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	1d7b      	adds	r3, r7, #5
 800d7ea:	33ff      	adds	r3, #255	; 0xff
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	221f      	movs	r2, #31
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	d104      	bne.n	800d7fe <USB_EPStartXfer+0xfbe>
 800d7f4:	187b      	adds	r3, r7, r1
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	187a      	adds	r2, r7, r1
 800d7fc:	6013      	str	r3, [r2, #0]
 800d7fe:	21c8      	movs	r1, #200	; 0xc8
 800d800:	187b      	adds	r3, r7, r1
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	b29a      	uxth	r2, r3
 800d808:	23dc      	movs	r3, #220	; 0xdc
 800d80a:	18fb      	adds	r3, r7, r3
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	029b      	lsls	r3, r3, #10
 800d812:	b29b      	uxth	r3, r3
 800d814:	4313      	orrs	r3, r2
 800d816:	b29b      	uxth	r3, r3
 800d818:	4a79      	ldr	r2, [pc, #484]	; (800da00 <USB_EPStartXfer+0x11c0>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	187b      	adds	r3, r7, r1
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	801a      	strh	r2, [r3, #0]
 800d824:	e058      	b.n	800d8d8 <USB_EPStartXfer+0x1098>
 800d826:	1d7b      	adds	r3, r7, #5
 800d828:	33ff      	adds	r3, #255	; 0xff
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10b      	bne.n	800d848 <USB_EPStartXfer+0x1008>
 800d830:	21c8      	movs	r1, #200	; 0xc8
 800d832:	187b      	adds	r3, r7, r1
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	4a71      	ldr	r2, [pc, #452]	; (800da00 <USB_EPStartXfer+0x11c0>)
 800d83c:	4313      	orrs	r3, r2
 800d83e:	b29a      	uxth	r2, r3
 800d840:	187b      	adds	r3, r7, r1
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	801a      	strh	r2, [r3, #0]
 800d846:	e047      	b.n	800d8d8 <USB_EPStartXfer+0x1098>
 800d848:	1d7b      	adds	r3, r7, #5
 800d84a:	33ff      	adds	r3, #255	; 0xff
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	085b      	lsrs	r3, r3, #1
 800d850:	21dc      	movs	r1, #220	; 0xdc
 800d852:	187a      	adds	r2, r7, r1
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	1d7b      	adds	r3, r7, #5
 800d858:	33ff      	adds	r3, #255	; 0xff
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2201      	movs	r2, #1
 800d85e:	4013      	ands	r3, r2
 800d860:	d004      	beq.n	800d86c <USB_EPStartXfer+0x102c>
 800d862:	187b      	adds	r3, r7, r1
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3301      	adds	r3, #1
 800d868:	187a      	adds	r2, r7, r1
 800d86a:	6013      	str	r3, [r2, #0]
 800d86c:	21c8      	movs	r1, #200	; 0xc8
 800d86e:	187b      	adds	r3, r7, r1
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	881b      	ldrh	r3, [r3, #0]
 800d874:	b29a      	uxth	r2, r3
 800d876:	23dc      	movs	r3, #220	; 0xdc
 800d878:	18fb      	adds	r3, r7, r3
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	029b      	lsls	r3, r3, #10
 800d880:	b29b      	uxth	r3, r3
 800d882:	4313      	orrs	r3, r2
 800d884:	b29a      	uxth	r2, r3
 800d886:	187b      	adds	r3, r7, r1
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	801a      	strh	r2, [r3, #0]
 800d88c:	e024      	b.n	800d8d8 <USB_EPStartXfer+0x1098>
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	785b      	ldrb	r3, [r3, #1]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d120      	bne.n	800d8d8 <USB_EPStartXfer+0x1098>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	21d4      	movs	r1, #212	; 0xd4
 800d89a:	187a      	adds	r2, r7, r1
 800d89c:	6013      	str	r3, [r2, #0]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2250      	movs	r2, #80	; 0x50
 800d8a2:	5a9b      	ldrh	r3, [r3, r2]
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	001a      	movs	r2, r3
 800d8a8:	187b      	adds	r3, r7, r1
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	189b      	adds	r3, r3, r2
 800d8ae:	187a      	adds	r2, r7, r1
 800d8b0:	6013      	str	r3, [r2, #0]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	00da      	lsls	r2, r3, #3
 800d8b8:	187b      	adds	r3, r7, r1
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	18d3      	adds	r3, r2, r3
 800d8be:	4a4f      	ldr	r2, [pc, #316]	; (800d9fc <USB_EPStartXfer+0x11bc>)
 800d8c0:	4694      	mov	ip, r2
 800d8c2:	4463      	add	r3, ip
 800d8c4:	21d0      	movs	r1, #208	; 0xd0
 800d8c6:	187a      	adds	r2, r7, r1
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	1d7b      	adds	r3, r7, #5
 800d8cc:	33ff      	adds	r3, #255	; 0xff
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	187b      	adds	r3, r7, r1
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	801a      	strh	r2, [r3, #0]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	22c4      	movs	r2, #196	; 0xc4
 800d8dc:	18ba      	adds	r2, r7, r2
 800d8de:	6013      	str	r3, [r2, #0]
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	785b      	ldrb	r3, [r3, #1]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d000      	beq.n	800d8ea <USB_EPStartXfer+0x10aa>
 800d8e8:	e08c      	b.n	800da04 <USB_EPStartXfer+0x11c4>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	21bc      	movs	r1, #188	; 0xbc
 800d8ee:	187a      	adds	r2, r7, r1
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2250      	movs	r2, #80	; 0x50
 800d8f6:	5a9b      	ldrh	r3, [r3, r2]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	001a      	movs	r2, r3
 800d8fc:	187b      	adds	r3, r7, r1
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	189b      	adds	r3, r3, r2
 800d902:	187a      	adds	r2, r7, r1
 800d904:	6013      	str	r3, [r2, #0]
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	00da      	lsls	r2, r3, #3
 800d90c:	187b      	adds	r3, r7, r1
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	18d3      	adds	r3, r2, r3
 800d912:	4a37      	ldr	r2, [pc, #220]	; (800d9f0 <USB_EPStartXfer+0x11b0>)
 800d914:	4694      	mov	ip, r2
 800d916:	4463      	add	r3, ip
 800d918:	21b8      	movs	r1, #184	; 0xb8
 800d91a:	187a      	adds	r2, r7, r1
 800d91c:	6013      	str	r3, [r2, #0]
 800d91e:	187b      	adds	r3, r7, r1
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	881b      	ldrh	r3, [r3, #0]
 800d924:	b29b      	uxth	r3, r3
 800d926:	059b      	lsls	r3, r3, #22
 800d928:	0d9b      	lsrs	r3, r3, #22
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	187b      	adds	r3, r7, r1
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	801a      	strh	r2, [r3, #0]
 800d932:	1d7b      	adds	r3, r7, #5
 800d934:	33ff      	adds	r3, #255	; 0xff
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2b3e      	cmp	r3, #62	; 0x3e
 800d93a:	d925      	bls.n	800d988 <USB_EPStartXfer+0x1148>
 800d93c:	1d7b      	adds	r3, r7, #5
 800d93e:	33ff      	adds	r3, #255	; 0xff
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	095b      	lsrs	r3, r3, #5
 800d944:	21d8      	movs	r1, #216	; 0xd8
 800d946:	187a      	adds	r2, r7, r1
 800d948:	6013      	str	r3, [r2, #0]
 800d94a:	1d7b      	adds	r3, r7, #5
 800d94c:	33ff      	adds	r3, #255	; 0xff
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	221f      	movs	r2, #31
 800d952:	4013      	ands	r3, r2
 800d954:	d104      	bne.n	800d960 <USB_EPStartXfer+0x1120>
 800d956:	187b      	adds	r3, r7, r1
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3b01      	subs	r3, #1
 800d95c:	187a      	adds	r2, r7, r1
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	21b8      	movs	r1, #184	; 0xb8
 800d962:	187b      	adds	r3, r7, r1
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	881b      	ldrh	r3, [r3, #0]
 800d968:	b29a      	uxth	r2, r3
 800d96a:	23d8      	movs	r3, #216	; 0xd8
 800d96c:	18fb      	adds	r3, r7, r3
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	b29b      	uxth	r3, r3
 800d972:	029b      	lsls	r3, r3, #10
 800d974:	b29b      	uxth	r3, r3
 800d976:	4313      	orrs	r3, r2
 800d978:	b29b      	uxth	r3, r3
 800d97a:	4a21      	ldr	r2, [pc, #132]	; (800da00 <USB_EPStartXfer+0x11c0>)
 800d97c:	4313      	orrs	r3, r2
 800d97e:	b29a      	uxth	r2, r3
 800d980:	187b      	adds	r3, r7, r1
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	801a      	strh	r2, [r3, #0]
 800d986:	e062      	b.n	800da4e <USB_EPStartXfer+0x120e>
 800d988:	1d7b      	adds	r3, r7, #5
 800d98a:	33ff      	adds	r3, #255	; 0xff
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d10b      	bne.n	800d9aa <USB_EPStartXfer+0x116a>
 800d992:	21b8      	movs	r1, #184	; 0xb8
 800d994:	187b      	adds	r3, r7, r1
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	4a18      	ldr	r2, [pc, #96]	; (800da00 <USB_EPStartXfer+0x11c0>)
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	187b      	adds	r3, r7, r1
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	801a      	strh	r2, [r3, #0]
 800d9a8:	e051      	b.n	800da4e <USB_EPStartXfer+0x120e>
 800d9aa:	1d7b      	adds	r3, r7, #5
 800d9ac:	33ff      	adds	r3, #255	; 0xff
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	085b      	lsrs	r3, r3, #1
 800d9b2:	21d8      	movs	r1, #216	; 0xd8
 800d9b4:	187a      	adds	r2, r7, r1
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	1d7b      	adds	r3, r7, #5
 800d9ba:	33ff      	adds	r3, #255	; 0xff
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	d004      	beq.n	800d9ce <USB_EPStartXfer+0x118e>
 800d9c4:	187b      	adds	r3, r7, r1
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	187a      	adds	r2, r7, r1
 800d9cc:	6013      	str	r3, [r2, #0]
 800d9ce:	21b8      	movs	r1, #184	; 0xb8
 800d9d0:	187b      	adds	r3, r7, r1
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	23d8      	movs	r3, #216	; 0xd8
 800d9da:	18fb      	adds	r3, r7, r3
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	029b      	lsls	r3, r3, #10
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	187b      	adds	r3, r7, r1
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	801a      	strh	r2, [r3, #0]
 800d9ee:	e02e      	b.n	800da4e <USB_EPStartXfer+0x120e>
 800d9f0:	00000406 	.word	0x00000406
 800d9f4:	ffff8f8f 	.word	0xffff8f8f
 800d9f8:	ffff80c0 	.word	0xffff80c0
 800d9fc:	00000402 	.word	0x00000402
 800da00:	ffff8000 	.word	0xffff8000
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	785b      	ldrb	r3, [r3, #1]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d120      	bne.n	800da4e <USB_EPStartXfer+0x120e>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2250      	movs	r2, #80	; 0x50
 800da10:	5a9b      	ldrh	r3, [r3, r2]
 800da12:	b29b      	uxth	r3, r3
 800da14:	001a      	movs	r2, r3
 800da16:	21c4      	movs	r1, #196	; 0xc4
 800da18:	187b      	adds	r3, r7, r1
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	189b      	adds	r3, r3, r2
 800da1e:	187a      	adds	r2, r7, r1
 800da20:	6013      	str	r3, [r2, #0]
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	00da      	lsls	r2, r3, #3
 800da28:	187b      	adds	r3, r7, r1
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	18d3      	adds	r3, r2, r3
 800da2e:	4a1d      	ldr	r2, [pc, #116]	; (800daa4 <USB_EPStartXfer+0x1264>)
 800da30:	4694      	mov	ip, r2
 800da32:	4463      	add	r3, ip
 800da34:	21c0      	movs	r1, #192	; 0xc0
 800da36:	187a      	adds	r2, r7, r1
 800da38:	6013      	str	r3, [r2, #0]
 800da3a:	1d7b      	adds	r3, r7, #5
 800da3c:	33ff      	adds	r3, #255	; 0xff
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	b29a      	uxth	r2, r3
 800da42:	187b      	adds	r3, r7, r1
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	801a      	strh	r2, [r3, #0]
 800da48:	e001      	b.n	800da4e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e025      	b.n	800da9a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	18d3      	adds	r3, r2, r3
 800da58:	881b      	ldrh	r3, [r3, #0]
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	208a      	movs	r0, #138	; 0x8a
 800da5e:	183b      	adds	r3, r7, r0
 800da60:	4911      	ldr	r1, [pc, #68]	; (800daa8 <USB_EPStartXfer+0x1268>)
 800da62:	400a      	ands	r2, r1
 800da64:	801a      	strh	r2, [r3, #0]
 800da66:	183b      	adds	r3, r7, r0
 800da68:	183a      	adds	r2, r7, r0
 800da6a:	8812      	ldrh	r2, [r2, #0]
 800da6c:	2180      	movs	r1, #128	; 0x80
 800da6e:	0149      	lsls	r1, r1, #5
 800da70:	404a      	eors	r2, r1
 800da72:	801a      	strh	r2, [r3, #0]
 800da74:	183b      	adds	r3, r7, r0
 800da76:	183a      	adds	r2, r7, r0
 800da78:	8812      	ldrh	r2, [r2, #0]
 800da7a:	2180      	movs	r1, #128	; 0x80
 800da7c:	0189      	lsls	r1, r1, #6
 800da7e:	404a      	eors	r2, r1
 800da80:	801a      	strh	r2, [r3, #0]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	18d3      	adds	r3, r2, r3
 800da8c:	183a      	adds	r2, r7, r0
 800da8e:	8812      	ldrh	r2, [r2, #0]
 800da90:	4906      	ldr	r1, [pc, #24]	; (800daac <USB_EPStartXfer+0x126c>)
 800da92:	430a      	orrs	r2, r1
 800da94:	b292      	uxth	r2, r2
 800da96:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800da98:	2300      	movs	r3, #0
}
 800da9a:	0018      	movs	r0, r3
 800da9c:	46bd      	mov	sp, r7
 800da9e:	b043      	add	sp, #268	; 0x10c
 800daa0:	bd90      	pop	{r4, r7, pc}
 800daa2:	46c0      	nop			; (mov r8, r8)
 800daa4:	00000406 	.word	0x00000406
 800daa8:	ffffbf8f 	.word	0xffffbf8f
 800daac:	ffff8080 	.word	0xffff8080

0800dab0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	785b      	ldrb	r3, [r3, #1]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d01d      	beq.n	800dafe <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	18d3      	adds	r3, r2, r3
 800dacc:	881b      	ldrh	r3, [r3, #0]
 800dace:	b29a      	uxth	r2, r3
 800dad0:	200c      	movs	r0, #12
 800dad2:	183b      	adds	r3, r7, r0
 800dad4:	491b      	ldr	r1, [pc, #108]	; (800db44 <USB_EPSetStall+0x94>)
 800dad6:	400a      	ands	r2, r1
 800dad8:	801a      	strh	r2, [r3, #0]
 800dada:	183b      	adds	r3, r7, r0
 800dadc:	183a      	adds	r2, r7, r0
 800dade:	8812      	ldrh	r2, [r2, #0]
 800dae0:	2110      	movs	r1, #16
 800dae2:	404a      	eors	r2, r1
 800dae4:	801a      	strh	r2, [r3, #0]
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	18d3      	adds	r3, r2, r3
 800daf0:	183a      	adds	r2, r7, r0
 800daf2:	8812      	ldrh	r2, [r2, #0]
 800daf4:	4914      	ldr	r1, [pc, #80]	; (800db48 <USB_EPSetStall+0x98>)
 800daf6:	430a      	orrs	r2, r1
 800daf8:	b292      	uxth	r2, r2
 800dafa:	801a      	strh	r2, [r3, #0]
 800dafc:	e01d      	b.n	800db3a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	18d3      	adds	r3, r2, r3
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	b29a      	uxth	r2, r3
 800db0c:	200e      	movs	r0, #14
 800db0e:	183b      	adds	r3, r7, r0
 800db10:	490e      	ldr	r1, [pc, #56]	; (800db4c <USB_EPSetStall+0x9c>)
 800db12:	400a      	ands	r2, r1
 800db14:	801a      	strh	r2, [r3, #0]
 800db16:	183b      	adds	r3, r7, r0
 800db18:	183a      	adds	r2, r7, r0
 800db1a:	8812      	ldrh	r2, [r2, #0]
 800db1c:	2180      	movs	r1, #128	; 0x80
 800db1e:	0149      	lsls	r1, r1, #5
 800db20:	404a      	eors	r2, r1
 800db22:	801a      	strh	r2, [r3, #0]
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	18d3      	adds	r3, r2, r3
 800db2e:	183a      	adds	r2, r7, r0
 800db30:	8812      	ldrh	r2, [r2, #0]
 800db32:	4905      	ldr	r1, [pc, #20]	; (800db48 <USB_EPSetStall+0x98>)
 800db34:	430a      	orrs	r2, r1
 800db36:	b292      	uxth	r2, r2
 800db38:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	0018      	movs	r0, r3
 800db3e:	46bd      	mov	sp, r7
 800db40:	b004      	add	sp, #16
 800db42:	bd80      	pop	{r7, pc}
 800db44:	ffff8fbf 	.word	0xffff8fbf
 800db48:	ffff8080 	.word	0xffff8080
 800db4c:	ffffbf8f 	.word	0xffffbf8f

0800db50 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	7b1b      	ldrb	r3, [r3, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d000      	beq.n	800db64 <USB_EPClearStall+0x14>
 800db62:	e095      	b.n	800dc90 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	785b      	ldrb	r3, [r3, #1]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d046      	beq.n	800dbfa <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	18d2      	adds	r2, r2, r3
 800db76:	2110      	movs	r1, #16
 800db78:	187b      	adds	r3, r7, r1
 800db7a:	8812      	ldrh	r2, [r2, #0]
 800db7c:	801a      	strh	r2, [r3, #0]
 800db7e:	187b      	adds	r3, r7, r1
 800db80:	881b      	ldrh	r3, [r3, #0]
 800db82:	2240      	movs	r2, #64	; 0x40
 800db84:	4013      	ands	r3, r2
 800db86:	d016      	beq.n	800dbb6 <USB_EPClearStall+0x66>
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	18d3      	adds	r3, r2, r3
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	b29a      	uxth	r2, r3
 800db96:	200e      	movs	r0, #14
 800db98:	183b      	adds	r3, r7, r0
 800db9a:	4940      	ldr	r1, [pc, #256]	; (800dc9c <USB_EPClearStall+0x14c>)
 800db9c:	400a      	ands	r2, r1
 800db9e:	801a      	strh	r2, [r3, #0]
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	18d3      	adds	r3, r2, r3
 800dbaa:	183a      	adds	r2, r7, r0
 800dbac:	8812      	ldrh	r2, [r2, #0]
 800dbae:	493c      	ldr	r1, [pc, #240]	; (800dca0 <USB_EPClearStall+0x150>)
 800dbb0:	430a      	orrs	r2, r1
 800dbb2:	b292      	uxth	r2, r2
 800dbb4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	78db      	ldrb	r3, [r3, #3]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d068      	beq.n	800dc90 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	18d3      	adds	r3, r2, r3
 800dbc8:	881b      	ldrh	r3, [r3, #0]
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	200c      	movs	r0, #12
 800dbce:	183b      	adds	r3, r7, r0
 800dbd0:	4934      	ldr	r1, [pc, #208]	; (800dca4 <USB_EPClearStall+0x154>)
 800dbd2:	400a      	ands	r2, r1
 800dbd4:	801a      	strh	r2, [r3, #0]
 800dbd6:	183b      	adds	r3, r7, r0
 800dbd8:	183a      	adds	r2, r7, r0
 800dbda:	8812      	ldrh	r2, [r2, #0]
 800dbdc:	2120      	movs	r1, #32
 800dbde:	404a      	eors	r2, r1
 800dbe0:	801a      	strh	r2, [r3, #0]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	18d3      	adds	r3, r2, r3
 800dbec:	183a      	adds	r2, r7, r0
 800dbee:	8812      	ldrh	r2, [r2, #0]
 800dbf0:	492d      	ldr	r1, [pc, #180]	; (800dca8 <USB_EPClearStall+0x158>)
 800dbf2:	430a      	orrs	r2, r1
 800dbf4:	b292      	uxth	r2, r2
 800dbf6:	801a      	strh	r2, [r3, #0]
 800dbf8:	e04a      	b.n	800dc90 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	18d2      	adds	r2, r2, r3
 800dc04:	2116      	movs	r1, #22
 800dc06:	187b      	adds	r3, r7, r1
 800dc08:	8812      	ldrh	r2, [r2, #0]
 800dc0a:	801a      	strh	r2, [r3, #0]
 800dc0c:	187b      	adds	r3, r7, r1
 800dc0e:	881a      	ldrh	r2, [r3, #0]
 800dc10:	2380      	movs	r3, #128	; 0x80
 800dc12:	01db      	lsls	r3, r3, #7
 800dc14:	4013      	ands	r3, r2
 800dc16:	d016      	beq.n	800dc46 <USB_EPClearStall+0xf6>
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	18d3      	adds	r3, r2, r3
 800dc22:	881b      	ldrh	r3, [r3, #0]
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	2014      	movs	r0, #20
 800dc28:	183b      	adds	r3, r7, r0
 800dc2a:	491c      	ldr	r1, [pc, #112]	; (800dc9c <USB_EPClearStall+0x14c>)
 800dc2c:	400a      	ands	r2, r1
 800dc2e:	801a      	strh	r2, [r3, #0]
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	18d3      	adds	r3, r2, r3
 800dc3a:	183a      	adds	r2, r7, r0
 800dc3c:	8812      	ldrh	r2, [r2, #0]
 800dc3e:	491b      	ldr	r1, [pc, #108]	; (800dcac <USB_EPClearStall+0x15c>)
 800dc40:	430a      	orrs	r2, r1
 800dc42:	b292      	uxth	r2, r2
 800dc44:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	18d3      	adds	r3, r2, r3
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	2012      	movs	r0, #18
 800dc56:	183b      	adds	r3, r7, r0
 800dc58:	4915      	ldr	r1, [pc, #84]	; (800dcb0 <USB_EPClearStall+0x160>)
 800dc5a:	400a      	ands	r2, r1
 800dc5c:	801a      	strh	r2, [r3, #0]
 800dc5e:	183b      	adds	r3, r7, r0
 800dc60:	183a      	adds	r2, r7, r0
 800dc62:	8812      	ldrh	r2, [r2, #0]
 800dc64:	2180      	movs	r1, #128	; 0x80
 800dc66:	0149      	lsls	r1, r1, #5
 800dc68:	404a      	eors	r2, r1
 800dc6a:	801a      	strh	r2, [r3, #0]
 800dc6c:	183b      	adds	r3, r7, r0
 800dc6e:	183a      	adds	r2, r7, r0
 800dc70:	8812      	ldrh	r2, [r2, #0]
 800dc72:	2180      	movs	r1, #128	; 0x80
 800dc74:	0189      	lsls	r1, r1, #6
 800dc76:	404a      	eors	r2, r1
 800dc78:	801a      	strh	r2, [r3, #0]
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	18d3      	adds	r3, r2, r3
 800dc84:	183a      	adds	r2, r7, r0
 800dc86:	8812      	ldrh	r2, [r2, #0]
 800dc88:	4907      	ldr	r1, [pc, #28]	; (800dca8 <USB_EPClearStall+0x158>)
 800dc8a:	430a      	orrs	r2, r1
 800dc8c:	b292      	uxth	r2, r2
 800dc8e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	0018      	movs	r0, r3
 800dc94:	46bd      	mov	sp, r7
 800dc96:	b006      	add	sp, #24
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	46c0      	nop			; (mov r8, r8)
 800dc9c:	ffff8f8f 	.word	0xffff8f8f
 800dca0:	ffff80c0 	.word	0xffff80c0
 800dca4:	ffff8fbf 	.word	0xffff8fbf
 800dca8:	ffff8080 	.word	0xffff8080
 800dcac:	ffffc080 	.word	0xffffc080
 800dcb0:	ffffbf8f 	.word	0xffffbf8f

0800dcb4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	000a      	movs	r2, r1
 800dcbe:	1cfb      	adds	r3, r7, #3
 800dcc0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800dcc2:	1cfb      	adds	r3, r7, #3
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d103      	bne.n	800dcd2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	224c      	movs	r2, #76	; 0x4c
 800dcce:	2180      	movs	r1, #128	; 0x80
 800dcd0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	0018      	movs	r0, r3
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	b002      	add	sp, #8
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2258      	movs	r2, #88	; 0x58
 800dce8:	5a9b      	ldrh	r3, [r3, r2]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	4a05      	ldr	r2, [pc, #20]	; (800dd04 <USB_DevConnect+0x28>)
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	b299      	uxth	r1, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2258      	movs	r2, #88	; 0x58
 800dcf6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	b002      	add	sp, #8
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	46c0      	nop			; (mov r8, r8)
 800dd04:	ffff8000 	.word	0xffff8000

0800dd08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2244      	movs	r2, #68	; 0x44
 800dd14:	5a9b      	ldrh	r3, [r3, r2]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
}
 800dd1c:	0018      	movs	r0, r3
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	b004      	add	sp, #16
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08a      	sub	sp, #40	; 0x28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	0019      	movs	r1, r3
 800dd30:	1dbb      	adds	r3, r7, #6
 800dd32:	801a      	strh	r2, [r3, #0]
 800dd34:	1d3b      	adds	r3, r7, #4
 800dd36:	1c0a      	adds	r2, r1, #0
 800dd38:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800dd3a:	1d3b      	adds	r3, r7, #4
 800dd3c:	881b      	ldrh	r3, [r3, #0]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	085b      	lsrs	r3, r3, #1
 800dd42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dd4c:	1dbb      	adds	r3, r7, #6
 800dd4e:	881a      	ldrh	r2, [r3, #0]
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	18d3      	adds	r3, r2, r3
 800dd54:	2280      	movs	r2, #128	; 0x80
 800dd56:	00d2      	lsls	r2, r2, #3
 800dd58:	4694      	mov	ip, r2
 800dd5a:	4463      	add	r3, ip
 800dd5c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	627b      	str	r3, [r7, #36]	; 0x24
 800dd62:	e020      	b.n	800dda6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	781a      	ldrb	r2, [r3, #0]
 800dd68:	2112      	movs	r1, #18
 800dd6a:	187b      	adds	r3, r7, r1
 800dd6c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	3301      	adds	r3, #1
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	021b      	lsls	r3, r3, #8
 800dd76:	b21a      	sxth	r2, r3
 800dd78:	187b      	adds	r3, r7, r1
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	5e1b      	ldrsh	r3, [r3, r0]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	b21a      	sxth	r2, r3
 800dd82:	187b      	adds	r3, r7, r1
 800dd84:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	187a      	adds	r2, r7, r1
 800dd8a:	8812      	ldrh	r2, [r2, #0]
 800dd8c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	3302      	adds	r3, #2
 800dd92:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	3301      	adds	r3, #1
 800dd98:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda2:	3b01      	subs	r3, #1
 800dda4:	627b      	str	r3, [r7, #36]	; 0x24
 800dda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d1db      	bne.n	800dd64 <USB_WritePMA+0x40>
  }
}
 800ddac:	46c0      	nop			; (mov r8, r8)
 800ddae:	46c0      	nop			; (mov r8, r8)
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	b00a      	add	sp, #40	; 0x28
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b08a      	sub	sp, #40	; 0x28
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	0019      	movs	r1, r3
 800ddc2:	1dbb      	adds	r3, r7, #6
 800ddc4:	801a      	strh	r2, [r3, #0]
 800ddc6:	1d3b      	adds	r3, r7, #4
 800ddc8:	1c0a      	adds	r2, r1, #0
 800ddca:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ddcc:	1d3b      	adds	r3, r7, #4
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	085b      	lsrs	r3, r3, #1
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ddde:	1dbb      	adds	r3, r7, #6
 800dde0:	881a      	ldrh	r2, [r3, #0]
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	18d3      	adds	r3, r2, r3
 800dde6:	2280      	movs	r2, #128	; 0x80
 800dde8:	00d2      	lsls	r2, r2, #3
 800ddea:	4694      	mov	ip, r2
 800ddec:	4463      	add	r3, ip
 800ddee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf4:	e018      	b.n	800de28 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	881b      	ldrh	r3, [r3, #0]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ddfe:	6a3b      	ldr	r3, [r7, #32]
 800de00:	3302      	adds	r3, #2
 800de02:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	b2da      	uxtb	r2, r3
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	3301      	adds	r3, #1
 800de10:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	0a1b      	lsrs	r3, r3, #8
 800de16:	b2da      	uxtb	r2, r3
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	3301      	adds	r3, #1
 800de20:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de24:	3b01      	subs	r3, #1
 800de26:	627b      	str	r3, [r7, #36]	; 0x24
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1e3      	bne.n	800ddf6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800de2e:	1d3b      	adds	r3, r7, #4
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	2201      	movs	r2, #1
 800de34:	4013      	ands	r3, r2
 800de36:	b29b      	uxth	r3, r3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d007      	beq.n	800de4c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	b29b      	uxth	r3, r3
 800de42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	b2da      	uxtb	r2, r3
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	701a      	strb	r2, [r3, #0]
  }
}
 800de4c:	46c0      	nop			; (mov r8, r8)
 800de4e:	46bd      	mov	sp, r7
 800de50:	b00a      	add	sp, #40	; 0x28
 800de52:	bd80      	pop	{r7, pc}

0800de54 <memset>:
 800de54:	0003      	movs	r3, r0
 800de56:	1882      	adds	r2, r0, r2
 800de58:	4293      	cmp	r3, r2
 800de5a:	d100      	bne.n	800de5e <memset+0xa>
 800de5c:	4770      	bx	lr
 800de5e:	7019      	strb	r1, [r3, #0]
 800de60:	3301      	adds	r3, #1
 800de62:	e7f9      	b.n	800de58 <memset+0x4>

0800de64 <__libc_init_array>:
 800de64:	b570      	push	{r4, r5, r6, lr}
 800de66:	2600      	movs	r6, #0
 800de68:	4c0c      	ldr	r4, [pc, #48]	; (800de9c <__libc_init_array+0x38>)
 800de6a:	4d0d      	ldr	r5, [pc, #52]	; (800dea0 <__libc_init_array+0x3c>)
 800de6c:	1b64      	subs	r4, r4, r5
 800de6e:	10a4      	asrs	r4, r4, #2
 800de70:	42a6      	cmp	r6, r4
 800de72:	d109      	bne.n	800de88 <__libc_init_array+0x24>
 800de74:	2600      	movs	r6, #0
 800de76:	f000 f819 	bl	800deac <_init>
 800de7a:	4c0a      	ldr	r4, [pc, #40]	; (800dea4 <__libc_init_array+0x40>)
 800de7c:	4d0a      	ldr	r5, [pc, #40]	; (800dea8 <__libc_init_array+0x44>)
 800de7e:	1b64      	subs	r4, r4, r5
 800de80:	10a4      	asrs	r4, r4, #2
 800de82:	42a6      	cmp	r6, r4
 800de84:	d105      	bne.n	800de92 <__libc_init_array+0x2e>
 800de86:	bd70      	pop	{r4, r5, r6, pc}
 800de88:	00b3      	lsls	r3, r6, #2
 800de8a:	58eb      	ldr	r3, [r5, r3]
 800de8c:	4798      	blx	r3
 800de8e:	3601      	adds	r6, #1
 800de90:	e7ee      	b.n	800de70 <__libc_init_array+0xc>
 800de92:	00b3      	lsls	r3, r6, #2
 800de94:	58eb      	ldr	r3, [r5, r3]
 800de96:	4798      	blx	r3
 800de98:	3601      	adds	r6, #1
 800de9a:	e7f2      	b.n	800de82 <__libc_init_array+0x1e>
 800de9c:	0800e108 	.word	0x0800e108
 800dea0:	0800e108 	.word	0x0800e108
 800dea4:	0800e10c 	.word	0x0800e10c
 800dea8:	0800e108 	.word	0x0800e108

0800deac <_init>:
 800deac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deae:	46c0      	nop			; (mov r8, r8)
 800deb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deb2:	bc08      	pop	{r3}
 800deb4:	469e      	mov	lr, r3
 800deb6:	4770      	bx	lr

0800deb8 <_fini>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	46c0      	nop			; (mov r8, r8)
 800debc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800debe:	bc08      	pop	{r3}
 800dec0:	469e      	mov	lr, r3
 800dec2:	4770      	bx	lr
